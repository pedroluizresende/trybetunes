{"ast":null,"code":"'use strict';\n\nconst isStandardSyntaxComment = require('./utils/isStandardSyntaxComment');\n\nconst {\n  assert,\n  assertNumber,\n  assertString\n} = require('./utils/validateTypes');\n\nconst COMMAND_PREFIX = 'stylelint-';\nconst disableCommand = `${COMMAND_PREFIX}disable`;\nconst enableCommand = `${COMMAND_PREFIX}enable`;\nconst disableLineCommand = `${COMMAND_PREFIX}disable-line`;\nconst disableNextLineCommand = `${COMMAND_PREFIX}disable-next-line`;\nconst ALL_RULES = 'all';\n/** @typedef {import('postcss').Comment} PostcssComment */\n\n/** @typedef {import('postcss').Root} PostcssRoot */\n\n/** @typedef {import('postcss').Document} PostcssDocument */\n\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n\n/** @typedef {import('stylelint').DisabledRangeObject} DisabledRangeObject */\n\n/** @typedef {import('stylelint').DisabledRange} DisabledRange */\n\n/**\n * @param {PostcssComment} comment\n * @param {number} start\n * @param {boolean} strictStart\n * @param {string|undefined} description\n * @param {number} [end]\n * @param {boolean} [strictEnd]\n * @returns {DisabledRange}\n */\n\nfunction createDisableRange(comment, start, strictStart, description, end, strictEnd) {\n  return {\n    comment,\n    start,\n    end: end || undefined,\n    strictStart,\n    strictEnd: typeof strictEnd === 'boolean' ? strictEnd : undefined,\n    description\n  };\n}\n/**\n * Run it like a PostCSS plugin\n * @param {PostcssRoot | PostcssDocument} root\n * @param {PostcssResult} result\n * @returns {PostcssResult}\n */\n\n\nmodule.exports = function assignDisabledRanges(root, result) {\n  result.stylelint = result.stylelint || {\n    disabledRanges: {},\n    ruleSeverities: {},\n    customMessages: {},\n    ruleMetadata: {}\n  };\n  /**\n   * Most of the functions below work via side effects mutating this object\n   * @type {DisabledRangeObject & { all: DisabledRange[] }}\n   */\n\n  const disabledRanges = {\n    [ALL_RULES]: []\n  };\n  result.stylelint.disabledRanges = disabledRanges; // Work around postcss/postcss-scss#109 by merging adjacent `//` comments\n  // into a single node before passing to `checkComment`.\n\n  /** @type {PostcssComment?} */\n\n  let inlineEnd;\n  root.walkComments(comment => {\n    if (inlineEnd) {\n      // Ignore comments already processed by grouping with a previous one.\n      if (inlineEnd === comment) inlineEnd = null;\n      return;\n    }\n\n    const nextComment = comment.next(); // If any of these conditions are not met, do not merge comments.\n\n    if (!(!isStandardSyntaxComment(comment) && isStylelintCommand(comment) && nextComment && nextComment.type === 'comment' && (comment.text.includes('--') || nextComment.text.startsWith('--')))) {\n      checkComment(comment);\n      return;\n    }\n\n    let lastLine = comment.source && comment.source.end && comment.source.end.line || 0;\n    const fullComment = comment.clone();\n    let current = nextComment;\n\n    while (!isStandardSyntaxComment(current) && !isStylelintCommand(current)) {\n      const currentLine = current.source && current.source.end && current.source.end.line || 0;\n      if (lastLine + 1 !== currentLine) break;\n      fullComment.text += `\\n${current.text}`;\n\n      if (fullComment.source && current.source) {\n        fullComment.source.end = current.source.end;\n      }\n\n      inlineEnd = current;\n      const next = current.next();\n      if (!next || next.type !== 'comment') break;\n      current = next;\n      lastLine = currentLine;\n    }\n\n    checkComment(fullComment);\n  });\n  return result;\n  /**\n   * @param {PostcssComment} comment\n   */\n\n  function isStylelintCommand(comment) {\n    return comment.text.startsWith(disableCommand) || comment.text.startsWith(enableCommand);\n  }\n  /**\n   * @param {PostcssComment} comment\n   */\n\n\n  function processDisableLineCommand(comment) {\n    if (comment.source && comment.source.start) {\n      const line = comment.source.start.line;\n      const description = getDescription(comment.text);\n\n      for (const ruleName of getCommandRules(disableLineCommand, comment.text)) {\n        disableLine(comment, line, ruleName, description);\n      }\n    }\n  }\n  /**\n   * @param {PostcssComment} comment\n   */\n\n\n  function processDisableNextLineCommand(comment) {\n    if (comment.source && comment.source.end) {\n      const line = comment.source.end.line;\n      const description = getDescription(comment.text);\n\n      for (const ruleName of getCommandRules(disableNextLineCommand, comment.text)) {\n        disableLine(comment, line + 1, ruleName, description);\n      }\n    }\n  }\n  /**\n   * @param {PostcssComment} comment\n   * @param {number} line\n   * @param {string} ruleName\n   * @param {string|undefined} description\n   */\n\n\n  function disableLine(comment, line, ruleName, description) {\n    if (ruleIsDisabled(ALL_RULES)) {\n      throw comment.error('All rules have already been disabled', {\n        plugin: 'stylelint'\n      });\n    }\n\n    if (ruleName === ALL_RULES) {\n      for (const disabledRuleName of Object.keys(disabledRanges)) {\n        if (ruleIsDisabled(disabledRuleName)) continue;\n        const strict = disabledRuleName === ALL_RULES;\n        startDisabledRange(comment, line, disabledRuleName, strict, description);\n        endDisabledRange(line, disabledRuleName, strict);\n      }\n    } else {\n      if (ruleIsDisabled(ruleName)) {\n        throw comment.error(`\"${ruleName}\" has already been disabled`, {\n          plugin: 'stylelint'\n        });\n      }\n\n      startDisabledRange(comment, line, ruleName, true, description);\n      endDisabledRange(line, ruleName, true);\n    }\n  }\n  /**\n   * @param {PostcssComment} comment\n   */\n\n\n  function processDisableCommand(comment) {\n    const description = getDescription(comment.text);\n\n    for (const ruleToDisable of getCommandRules(disableCommand, comment.text)) {\n      const isAllRules = ruleToDisable === ALL_RULES;\n\n      if (ruleIsDisabled(ruleToDisable)) {\n        throw comment.error(isAllRules ? 'All rules have already been disabled' : `\"${ruleToDisable}\" has already been disabled`, {\n          plugin: 'stylelint'\n        });\n      }\n\n      if (comment.source && comment.source.start) {\n        const line = comment.source.start.line;\n\n        if (isAllRules) {\n          for (const ruleName of Object.keys(disabledRanges)) {\n            startDisabledRange(comment, line, ruleName, ruleName === ALL_RULES, description);\n          }\n        } else {\n          startDisabledRange(comment, line, ruleToDisable, true, description);\n        }\n      }\n    }\n  }\n  /**\n   * @param {PostcssComment} comment\n   */\n\n\n  function processEnableCommand(comment) {\n    for (const ruleToEnable of getCommandRules(enableCommand, comment.text)) {\n      // need fallback if endLine will be undefined\n      const endLine = comment.source && comment.source.end && comment.source.end.line;\n      assertNumber(endLine);\n\n      if (ruleToEnable === ALL_RULES) {\n        if (Object.values(disabledRanges).every(ranges => {\n          if (ranges.length === 0) return true;\n          const lastRange = ranges[ranges.length - 1];\n          return lastRange && typeof lastRange.end === 'number';\n        })) {\n          throw comment.error('No rules have been disabled', {\n            plugin: 'stylelint'\n          });\n        }\n\n        for (const [ruleName, ranges] of Object.entries(disabledRanges)) {\n          const lastRange = ranges[ranges.length - 1];\n\n          if (!lastRange || !lastRange.end) {\n            endDisabledRange(endLine, ruleName, ruleName === ALL_RULES);\n          }\n        }\n\n        continue;\n      }\n\n      if (ruleIsDisabled(ALL_RULES) && disabledRanges[ruleToEnable] === undefined) {\n        // Get a starting point from the where all rules were disabled\n        disabledRanges[ruleToEnable] = disabledRanges[ALL_RULES].map(_ref => {\n          let {\n            start,\n            end,\n            description\n          } = _ref;\n          return createDisableRange(comment, start, false, description, end, false);\n        });\n        endDisabledRange(endLine, ruleToEnable, true);\n        continue;\n      }\n\n      if (ruleIsDisabled(ruleToEnable)) {\n        endDisabledRange(endLine, ruleToEnable, true);\n        continue;\n      }\n\n      throw comment.error(`\"${ruleToEnable}\" has not been disabled`, {\n        plugin: 'stylelint'\n      });\n    }\n  }\n  /**\n   * @param {PostcssComment} comment\n   */\n\n\n  function checkComment(comment) {\n    const text = comment.text; // Ignore comments that are not relevant commands\n\n    if (text.indexOf(COMMAND_PREFIX) !== 0) {\n      return;\n    }\n\n    if (text.startsWith(disableLineCommand)) {\n      processDisableLineCommand(comment);\n    } else if (text.startsWith(disableNextLineCommand)) {\n      processDisableNextLineCommand(comment);\n    } else if (text.startsWith(disableCommand)) {\n      processDisableCommand(comment);\n    } else if (text.startsWith(enableCommand)) {\n      processEnableCommand(comment);\n    }\n  }\n  /**\n   * @param {string} command\n   * @param {string} fullText\n   * @returns {string[]}\n   */\n\n\n  function getCommandRules(command, fullText) {\n    // Allow for description (f.e. /* stylelint-disable a, b -- Description */).\n    const splitted = fullText.slice(command.length).split(/\\s-{2,}\\s/u)[0];\n    assertString(splitted);\n    const rules = splitted.trim().split(',').filter(Boolean).map(r => r.trim());\n\n    if (rules.length === 0) {\n      return [ALL_RULES];\n    }\n\n    return rules;\n  }\n  /**\n   * @param {string} fullText\n   * @returns {string|undefined}\n   */\n\n\n  function getDescription(fullText) {\n    const descriptionStart = fullText.indexOf('--');\n    if (descriptionStart === -1) return;\n    return fullText.slice(descriptionStart + 2).trim();\n  }\n  /**\n   * @param {PostcssComment} comment\n   * @param {number} line\n   * @param {string} ruleName\n   * @param {boolean} strict\n   * @param {string|undefined} description\n   */\n\n\n  function startDisabledRange(comment, line, ruleName, strict, description) {\n    const rangeObj = createDisableRange(comment, line, strict, description);\n    ensureRuleRanges(ruleName);\n    const range = disabledRanges[ruleName];\n    assert(range);\n    range.push(rangeObj);\n  }\n  /**\n   * @param {number} line\n   * @param {string} ruleName\n   * @param {boolean} strict\n   */\n\n\n  function endDisabledRange(line, ruleName, strict) {\n    const ranges = disabledRanges[ruleName];\n    const lastRangeForRule = ranges ? ranges[ranges.length - 1] : null;\n\n    if (!lastRangeForRule) {\n      return;\n    } // Add an `end` prop to the last range of that rule\n\n\n    lastRangeForRule.end = line;\n    lastRangeForRule.strictEnd = strict;\n  }\n  /**\n   * @param {string} ruleName\n   */\n\n\n  function ensureRuleRanges(ruleName) {\n    if (!disabledRanges[ruleName]) {\n      disabledRanges[ruleName] = disabledRanges[ALL_RULES].map(_ref2 => {\n        let {\n          comment,\n          start,\n          end,\n          description\n        } = _ref2;\n        return createDisableRange(comment, start, false, description, end, false);\n      });\n    }\n  }\n  /**\n   * @param {string} ruleName\n   * @returns {boolean}\n   */\n\n\n  function ruleIsDisabled(ruleName) {\n    const ranges = disabledRanges[ruleName];\n    if (!ranges) return false;\n    const lastRange = ranges[ranges.length - 1];\n    if (!lastRange) return false;\n    if (!lastRange.end) return true;\n    return false;\n  }\n};","map":{"version":3,"names":["isStandardSyntaxComment","require","assert","assertNumber","assertString","COMMAND_PREFIX","disableCommand","enableCommand","disableLineCommand","disableNextLineCommand","ALL_RULES","createDisableRange","comment","start","strictStart","description","end","strictEnd","undefined","module","exports","assignDisabledRanges","root","result","stylelint","disabledRanges","ruleSeverities","customMessages","ruleMetadata","inlineEnd","walkComments","nextComment","next","isStylelintCommand","type","text","includes","startsWith","checkComment","lastLine","source","line","fullComment","clone","current","currentLine","processDisableLineCommand","getDescription","ruleName","getCommandRules","disableLine","processDisableNextLineCommand","ruleIsDisabled","error","plugin","disabledRuleName","Object","keys","strict","startDisabledRange","endDisabledRange","processDisableCommand","ruleToDisable","isAllRules","processEnableCommand","ruleToEnable","endLine","values","every","ranges","length","lastRange","entries","map","indexOf","command","fullText","splitted","slice","split","rules","trim","filter","Boolean","r","descriptionStart","rangeObj","ensureRuleRanges","range","push","lastRangeForRule"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/stylelint/lib/assignDisabledRanges.js"],"sourcesContent":["'use strict';\n\nconst isStandardSyntaxComment = require('./utils/isStandardSyntaxComment');\nconst { assert, assertNumber, assertString } = require('./utils/validateTypes');\n\nconst COMMAND_PREFIX = 'stylelint-';\nconst disableCommand = `${COMMAND_PREFIX}disable`;\nconst enableCommand = `${COMMAND_PREFIX}enable`;\nconst disableLineCommand = `${COMMAND_PREFIX}disable-line`;\nconst disableNextLineCommand = `${COMMAND_PREFIX}disable-next-line`;\nconst ALL_RULES = 'all';\n\n/** @typedef {import('postcss').Comment} PostcssComment */\n/** @typedef {import('postcss').Root} PostcssRoot */\n/** @typedef {import('postcss').Document} PostcssDocument */\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').DisabledRangeObject} DisabledRangeObject */\n/** @typedef {import('stylelint').DisabledRange} DisabledRange */\n\n/**\n * @param {PostcssComment} comment\n * @param {number} start\n * @param {boolean} strictStart\n * @param {string|undefined} description\n * @param {number} [end]\n * @param {boolean} [strictEnd]\n * @returns {DisabledRange}\n */\nfunction createDisableRange(comment, start, strictStart, description, end, strictEnd) {\n\treturn {\n\t\tcomment,\n\t\tstart,\n\t\tend: end || undefined,\n\t\tstrictStart,\n\t\tstrictEnd: typeof strictEnd === 'boolean' ? strictEnd : undefined,\n\t\tdescription,\n\t};\n}\n\n/**\n * Run it like a PostCSS plugin\n * @param {PostcssRoot | PostcssDocument} root\n * @param {PostcssResult} result\n * @returns {PostcssResult}\n */\nmodule.exports = function assignDisabledRanges(root, result) {\n\tresult.stylelint = result.stylelint || {\n\t\tdisabledRanges: {},\n\t\truleSeverities: {},\n\t\tcustomMessages: {},\n\t\truleMetadata: {},\n\t};\n\n\t/**\n\t * Most of the functions below work via side effects mutating this object\n\t * @type {DisabledRangeObject & { all: DisabledRange[] }}\n\t */\n\tconst disabledRanges = {\n\t\t[ALL_RULES]: [],\n\t};\n\n\tresult.stylelint.disabledRanges = disabledRanges;\n\n\t// Work around postcss/postcss-scss#109 by merging adjacent `//` comments\n\t// into a single node before passing to `checkComment`.\n\n\t/** @type {PostcssComment?} */\n\tlet inlineEnd;\n\n\troot.walkComments((comment) => {\n\t\tif (inlineEnd) {\n\t\t\t// Ignore comments already processed by grouping with a previous one.\n\t\t\tif (inlineEnd === comment) inlineEnd = null;\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst nextComment = comment.next();\n\n\t\t// If any of these conditions are not met, do not merge comments.\n\t\tif (\n\t\t\t!(\n\t\t\t\t!isStandardSyntaxComment(comment) &&\n\t\t\t\tisStylelintCommand(comment) &&\n\t\t\t\tnextComment &&\n\t\t\t\tnextComment.type === 'comment' &&\n\t\t\t\t(comment.text.includes('--') || nextComment.text.startsWith('--'))\n\t\t\t)\n\t\t) {\n\t\t\tcheckComment(comment);\n\n\t\t\treturn;\n\t\t}\n\n\t\tlet lastLine = (comment.source && comment.source.end && comment.source.end.line) || 0;\n\t\tconst fullComment = comment.clone();\n\n\t\tlet current = nextComment;\n\n\t\twhile (!isStandardSyntaxComment(current) && !isStylelintCommand(current)) {\n\t\t\tconst currentLine = (current.source && current.source.end && current.source.end.line) || 0;\n\n\t\t\tif (lastLine + 1 !== currentLine) break;\n\n\t\t\tfullComment.text += `\\n${current.text}`;\n\n\t\t\tif (fullComment.source && current.source) {\n\t\t\t\tfullComment.source.end = current.source.end;\n\t\t\t}\n\n\t\t\tinlineEnd = current;\n\t\t\tconst next = current.next();\n\n\t\t\tif (!next || next.type !== 'comment') break;\n\n\t\t\tcurrent = next;\n\t\t\tlastLine = currentLine;\n\t\t}\n\n\t\tcheckComment(fullComment);\n\t});\n\n\treturn result;\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction isStylelintCommand(comment) {\n\t\treturn comment.text.startsWith(disableCommand) || comment.text.startsWith(enableCommand);\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction processDisableLineCommand(comment) {\n\t\tif (comment.source && comment.source.start) {\n\t\t\tconst line = comment.source.start.line;\n\t\t\tconst description = getDescription(comment.text);\n\n\t\t\tfor (const ruleName of getCommandRules(disableLineCommand, comment.text)) {\n\t\t\t\tdisableLine(comment, line, ruleName, description);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction processDisableNextLineCommand(comment) {\n\t\tif (comment.source && comment.source.end) {\n\t\t\tconst line = comment.source.end.line;\n\t\t\tconst description = getDescription(comment.text);\n\n\t\t\tfor (const ruleName of getCommandRules(disableNextLineCommand, comment.text)) {\n\t\t\t\tdisableLine(comment, line + 1, ruleName, description);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t * @param {number} line\n\t * @param {string} ruleName\n\t * @param {string|undefined} description\n\t */\n\tfunction disableLine(comment, line, ruleName, description) {\n\t\tif (ruleIsDisabled(ALL_RULES)) {\n\t\t\tthrow comment.error('All rules have already been disabled', {\n\t\t\t\tplugin: 'stylelint',\n\t\t\t});\n\t\t}\n\n\t\tif (ruleName === ALL_RULES) {\n\t\t\tfor (const disabledRuleName of Object.keys(disabledRanges)) {\n\t\t\t\tif (ruleIsDisabled(disabledRuleName)) continue;\n\n\t\t\t\tconst strict = disabledRuleName === ALL_RULES;\n\n\t\t\t\tstartDisabledRange(comment, line, disabledRuleName, strict, description);\n\t\t\t\tendDisabledRange(line, disabledRuleName, strict);\n\t\t\t}\n\t\t} else {\n\t\t\tif (ruleIsDisabled(ruleName)) {\n\t\t\t\tthrow comment.error(`\"${ruleName}\" has already been disabled`, {\n\t\t\t\t\tplugin: 'stylelint',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tstartDisabledRange(comment, line, ruleName, true, description);\n\t\t\tendDisabledRange(line, ruleName, true);\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction processDisableCommand(comment) {\n\t\tconst description = getDescription(comment.text);\n\n\t\tfor (const ruleToDisable of getCommandRules(disableCommand, comment.text)) {\n\t\t\tconst isAllRules = ruleToDisable === ALL_RULES;\n\n\t\t\tif (ruleIsDisabled(ruleToDisable)) {\n\t\t\t\tthrow comment.error(\n\t\t\t\t\tisAllRules\n\t\t\t\t\t\t? 'All rules have already been disabled'\n\t\t\t\t\t\t: `\"${ruleToDisable}\" has already been disabled`,\n\t\t\t\t\t{\n\t\t\t\t\t\tplugin: 'stylelint',\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (comment.source && comment.source.start) {\n\t\t\t\tconst line = comment.source.start.line;\n\n\t\t\t\tif (isAllRules) {\n\t\t\t\t\tfor (const ruleName of Object.keys(disabledRanges)) {\n\t\t\t\t\t\tstartDisabledRange(comment, line, ruleName, ruleName === ALL_RULES, description);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstartDisabledRange(comment, line, ruleToDisable, true, description);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction processEnableCommand(comment) {\n\t\tfor (const ruleToEnable of getCommandRules(enableCommand, comment.text)) {\n\t\t\t// need fallback if endLine will be undefined\n\t\t\tconst endLine = comment.source && comment.source.end && comment.source.end.line;\n\n\t\t\tassertNumber(endLine);\n\n\t\t\tif (ruleToEnable === ALL_RULES) {\n\t\t\t\tif (\n\t\t\t\t\tObject.values(disabledRanges).every((ranges) => {\n\t\t\t\t\t\tif (ranges.length === 0) return true;\n\n\t\t\t\t\t\tconst lastRange = ranges[ranges.length - 1];\n\n\t\t\t\t\t\treturn lastRange && typeof lastRange.end === 'number';\n\t\t\t\t\t})\n\t\t\t\t) {\n\t\t\t\t\tthrow comment.error('No rules have been disabled', {\n\t\t\t\t\t\tplugin: 'stylelint',\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tfor (const [ruleName, ranges] of Object.entries(disabledRanges)) {\n\t\t\t\t\tconst lastRange = ranges[ranges.length - 1];\n\n\t\t\t\t\tif (!lastRange || !lastRange.end) {\n\t\t\t\t\t\tendDisabledRange(endLine, ruleName, ruleName === ALL_RULES);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (ruleIsDisabled(ALL_RULES) && disabledRanges[ruleToEnable] === undefined) {\n\t\t\t\t// Get a starting point from the where all rules were disabled\n\t\t\t\tdisabledRanges[ruleToEnable] = disabledRanges[ALL_RULES].map(\n\t\t\t\t\t({ start, end, description }) =>\n\t\t\t\t\t\tcreateDisableRange(comment, start, false, description, end, false),\n\t\t\t\t);\n\n\t\t\t\tendDisabledRange(endLine, ruleToEnable, true);\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (ruleIsDisabled(ruleToEnable)) {\n\t\t\t\tendDisabledRange(endLine, ruleToEnable, true);\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthrow comment.error(`\"${ruleToEnable}\" has not been disabled`, {\n\t\t\t\tplugin: 'stylelint',\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t */\n\tfunction checkComment(comment) {\n\t\tconst text = comment.text;\n\n\t\t// Ignore comments that are not relevant commands\n\n\t\tif (text.indexOf(COMMAND_PREFIX) !== 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (text.startsWith(disableLineCommand)) {\n\t\t\tprocessDisableLineCommand(comment);\n\t\t} else if (text.startsWith(disableNextLineCommand)) {\n\t\t\tprocessDisableNextLineCommand(comment);\n\t\t} else if (text.startsWith(disableCommand)) {\n\t\t\tprocessDisableCommand(comment);\n\t\t} else if (text.startsWith(enableCommand)) {\n\t\t\tprocessEnableCommand(comment);\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} command\n\t * @param {string} fullText\n\t * @returns {string[]}\n\t */\n\tfunction getCommandRules(command, fullText) {\n\t\t// Allow for description (f.e. /* stylelint-disable a, b -- Description */).\n\t\tconst splitted = fullText.slice(command.length).split(/\\s-{2,}\\s/u)[0];\n\n\t\tassertString(splitted);\n\t\tconst rules = splitted\n\t\t\t.trim()\n\t\t\t.split(',')\n\t\t\t.filter(Boolean)\n\t\t\t.map((r) => r.trim());\n\n\t\tif (rules.length === 0) {\n\t\t\treturn [ALL_RULES];\n\t\t}\n\n\t\treturn rules;\n\t}\n\n\t/**\n\t * @param {string} fullText\n\t * @returns {string|undefined}\n\t */\n\tfunction getDescription(fullText) {\n\t\tconst descriptionStart = fullText.indexOf('--');\n\n\t\tif (descriptionStart === -1) return;\n\n\t\treturn fullText.slice(descriptionStart + 2).trim();\n\t}\n\n\t/**\n\t * @param {PostcssComment} comment\n\t * @param {number} line\n\t * @param {string} ruleName\n\t * @param {boolean} strict\n\t * @param {string|undefined} description\n\t */\n\tfunction startDisabledRange(comment, line, ruleName, strict, description) {\n\t\tconst rangeObj = createDisableRange(comment, line, strict, description);\n\n\t\tensureRuleRanges(ruleName);\n\n\t\tconst range = disabledRanges[ruleName];\n\n\t\tassert(range);\n\t\trange.push(rangeObj);\n\t}\n\n\t/**\n\t * @param {number} line\n\t * @param {string} ruleName\n\t * @param {boolean} strict\n\t */\n\tfunction endDisabledRange(line, ruleName, strict) {\n\t\tconst ranges = disabledRanges[ruleName];\n\t\tconst lastRangeForRule = ranges ? ranges[ranges.length - 1] : null;\n\n\t\tif (!lastRangeForRule) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Add an `end` prop to the last range of that rule\n\t\tlastRangeForRule.end = line;\n\t\tlastRangeForRule.strictEnd = strict;\n\t}\n\n\t/**\n\t * @param {string} ruleName\n\t */\n\tfunction ensureRuleRanges(ruleName) {\n\t\tif (!disabledRanges[ruleName]) {\n\t\t\tdisabledRanges[ruleName] = disabledRanges[ALL_RULES].map(\n\t\t\t\t({ comment, start, end, description }) =>\n\t\t\t\t\tcreateDisableRange(comment, start, false, description, end, false),\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} ruleName\n\t * @returns {boolean}\n\t */\n\tfunction ruleIsDisabled(ruleName) {\n\t\tconst ranges = disabledRanges[ruleName];\n\n\t\tif (!ranges) return false;\n\n\t\tconst lastRange = ranges[ranges.length - 1];\n\n\t\tif (!lastRange) return false;\n\n\t\tif (!lastRange.end) return true;\n\n\t\treturn false;\n\t}\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}