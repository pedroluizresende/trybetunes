{"ast":null,"code":"'use strict';\n\nmodule.exports = writeFile;\nmodule.exports.sync = writeFileSync;\nmodule.exports._getTmpname = getTmpname; // for testing\n\nmodule.exports._cleanupOnExit = cleanupOnExit;\n\nconst fs = require('fs');\n\nconst MurmurHash3 = require('imurmurhash');\n\nconst onExit = require('signal-exit');\n\nconst path = require('path');\n\nconst {\n  promisify\n} = require('util');\n\nconst activeFiles = {}; // if we run inside of a worker_thread, `process.pid` is not unique\n\n/* istanbul ignore next */\n\nconst threadId = function getId() {\n  try {\n    const workerThreads = require('worker_threads'); /// if we are in main thread, this is set to `0`\n\n\n    return workerThreads.threadId;\n  } catch (e) {\n    // worker_threads are not available, fallback to 0\n    return 0;\n  }\n}();\n\nlet invocations = 0;\n\nfunction getTmpname(filename) {\n  return filename + '.' + MurmurHash3(__filename).hash(String(process.pid)).hash(String(threadId)).hash(String(++invocations)).result();\n}\n\nfunction cleanupOnExit(tmpfile) {\n  return () => {\n    try {\n      fs.unlinkSync(typeof tmpfile === 'function' ? tmpfile() : tmpfile);\n    } catch {// ignore errors\n    }\n  };\n}\n\nfunction serializeActiveFile(absoluteName) {\n  return new Promise(resolve => {\n    // make a queue if it doesn't already exist\n    if (!activeFiles[absoluteName]) {\n      activeFiles[absoluteName] = [];\n    }\n\n    activeFiles[absoluteName].push(resolve); // add this job to the queue\n\n    if (activeFiles[absoluteName].length === 1) {\n      resolve();\n    } // kick off the first one\n\n  });\n} // https://github.com/isaacs/node-graceful-fs/blob/master/polyfills.js#L315-L342\n\n\nfunction isChownErrOk(err) {\n  if (err.code === 'ENOSYS') {\n    return true;\n  }\n\n  const nonroot = !process.getuid || process.getuid() !== 0;\n\n  if (nonroot) {\n    if (err.code === 'EINVAL' || err.code === 'EPERM') {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nasync function writeFileAsync(filename, data) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (typeof options === 'string') {\n    options = {\n      encoding: options\n    };\n  }\n\n  let fd;\n  let tmpfile;\n  /* istanbul ignore next -- The closure only gets called when onExit triggers */\n\n  const removeOnExitHandler = onExit(cleanupOnExit(() => tmpfile));\n  const absoluteName = path.resolve(filename);\n\n  try {\n    await serializeActiveFile(absoluteName);\n    const truename = await promisify(fs.realpath)(filename).catch(() => filename);\n    tmpfile = getTmpname(truename);\n\n    if (!options.mode || !options.chown) {\n      // Either mode or chown is not explicitly set\n      // Default behavior is to copy it from original file\n      const stats = await promisify(fs.stat)(truename).catch(() => {});\n\n      if (stats) {\n        if (options.mode == null) {\n          options.mode = stats.mode;\n        }\n\n        if (options.chown == null && process.getuid) {\n          options.chown = {\n            uid: stats.uid,\n            gid: stats.gid\n          };\n        }\n      }\n    }\n\n    fd = await promisify(fs.open)(tmpfile, 'w', options.mode);\n\n    if (options.tmpfileCreated) {\n      await options.tmpfileCreated(tmpfile);\n    }\n\n    if (ArrayBuffer.isView(data)) {\n      await promisify(fs.write)(fd, data, 0, data.length, 0);\n    } else if (data != null) {\n      await promisify(fs.write)(fd, String(data), 0, String(options.encoding || 'utf8'));\n    }\n\n    if (options.fsync !== false) {\n      await promisify(fs.fsync)(fd);\n    }\n\n    await promisify(fs.close)(fd);\n    fd = null;\n\n    if (options.chown) {\n      await promisify(fs.chown)(tmpfile, options.chown.uid, options.chown.gid).catch(err => {\n        if (!isChownErrOk(err)) {\n          throw err;\n        }\n      });\n    }\n\n    if (options.mode) {\n      await promisify(fs.chmod)(tmpfile, options.mode).catch(err => {\n        if (!isChownErrOk(err)) {\n          throw err;\n        }\n      });\n    }\n\n    await promisify(fs.rename)(tmpfile, truename);\n  } finally {\n    if (fd) {\n      await promisify(fs.close)(fd).catch(\n      /* istanbul ignore next */\n      () => {});\n    }\n\n    removeOnExitHandler();\n    await promisify(fs.unlink)(tmpfile).catch(() => {});\n    activeFiles[absoluteName].shift(); // remove the element added by serializeSameFile\n\n    if (activeFiles[absoluteName].length > 0) {\n      activeFiles[absoluteName][0](); // start next job if one is pending\n    } else {\n      delete activeFiles[absoluteName];\n    }\n  }\n}\n\nasync function writeFile(filename, data, options, callback) {\n  if (options instanceof Function) {\n    callback = options;\n    options = {};\n  }\n\n  const promise = writeFileAsync(filename, data, options);\n\n  if (callback) {\n    try {\n      const result = await promise;\n      return callback(result);\n    } catch (err) {\n      return callback(err);\n    }\n  }\n\n  return promise;\n}\n\nfunction writeFileSync(filename, data, options) {\n  if (typeof options === 'string') {\n    options = {\n      encoding: options\n    };\n  } else if (!options) {\n    options = {};\n  }\n\n  try {\n    filename = fs.realpathSync(filename);\n  } catch (ex) {// it's ok, it'll happen on a not yet existing file\n  }\n\n  const tmpfile = getTmpname(filename);\n\n  if (!options.mode || !options.chown) {\n    // Either mode or chown is not explicitly set\n    // Default behavior is to copy it from original file\n    try {\n      const stats = fs.statSync(filename);\n      options = Object.assign({}, options);\n\n      if (!options.mode) {\n        options.mode = stats.mode;\n      }\n\n      if (!options.chown && process.getuid) {\n        options.chown = {\n          uid: stats.uid,\n          gid: stats.gid\n        };\n      }\n    } catch (ex) {// ignore stat errors\n    }\n  }\n\n  let fd;\n  const cleanup = cleanupOnExit(tmpfile);\n  const removeOnExitHandler = onExit(cleanup);\n  let threw = true;\n\n  try {\n    fd = fs.openSync(tmpfile, 'w', options.mode || 0o666);\n\n    if (options.tmpfileCreated) {\n      options.tmpfileCreated(tmpfile);\n    }\n\n    if (ArrayBuffer.isView(data)) {\n      fs.writeSync(fd, data, 0, data.length, 0);\n    } else if (data != null) {\n      fs.writeSync(fd, String(data), 0, String(options.encoding || 'utf8'));\n    }\n\n    if (options.fsync !== false) {\n      fs.fsyncSync(fd);\n    }\n\n    fs.closeSync(fd);\n    fd = null;\n\n    if (options.chown) {\n      try {\n        fs.chownSync(tmpfile, options.chown.uid, options.chown.gid);\n      } catch (err) {\n        if (!isChownErrOk(err)) {\n          throw err;\n        }\n      }\n    }\n\n    if (options.mode) {\n      try {\n        fs.chmodSync(tmpfile, options.mode);\n      } catch (err) {\n        if (!isChownErrOk(err)) {\n          throw err;\n        }\n      }\n    }\n\n    fs.renameSync(tmpfile, filename);\n    threw = false;\n  } finally {\n    if (fd) {\n      try {\n        fs.closeSync(fd);\n      } catch (ex) {// ignore close errors at this stage, error may have closed fd already.\n      }\n    }\n\n    removeOnExitHandler();\n\n    if (threw) {\n      cleanup();\n    }\n  }\n}","map":{"version":3,"names":["module","exports","writeFile","sync","writeFileSync","_getTmpname","getTmpname","_cleanupOnExit","cleanupOnExit","fs","require","MurmurHash3","onExit","path","promisify","activeFiles","threadId","getId","workerThreads","e","invocations","filename","__filename","hash","String","process","pid","result","tmpfile","unlinkSync","serializeActiveFile","absoluteName","Promise","resolve","push","length","isChownErrOk","err","code","nonroot","getuid","writeFileAsync","data","options","encoding","fd","removeOnExitHandler","truename","realpath","catch","mode","chown","stats","stat","uid","gid","open","tmpfileCreated","ArrayBuffer","isView","write","fsync","close","chmod","rename","unlink","shift","callback","Function","promise","realpathSync","ex","statSync","Object","assign","cleanup","threw","openSync","writeSync","fsyncSync","closeSync","chownSync","chmodSync","renameSync"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/stylelint/node_modules/write-file-atomic/lib/index.js"],"sourcesContent":["'use strict'\nmodule.exports = writeFile\nmodule.exports.sync = writeFileSync\nmodule.exports._getTmpname = getTmpname // for testing\nmodule.exports._cleanupOnExit = cleanupOnExit\n\nconst fs = require('fs')\nconst MurmurHash3 = require('imurmurhash')\nconst onExit = require('signal-exit')\nconst path = require('path')\nconst { promisify } = require('util')\nconst activeFiles = {}\n\n// if we run inside of a worker_thread, `process.pid` is not unique\n/* istanbul ignore next */\nconst threadId = (function getId () {\n  try {\n    const workerThreads = require('worker_threads')\n\n    /// if we are in main thread, this is set to `0`\n    return workerThreads.threadId\n  } catch (e) {\n    // worker_threads are not available, fallback to 0\n    return 0\n  }\n})()\n\nlet invocations = 0\nfunction getTmpname (filename) {\n  return filename + '.' +\n    MurmurHash3(__filename)\n      .hash(String(process.pid))\n      .hash(String(threadId))\n      .hash(String(++invocations))\n      .result()\n}\n\nfunction cleanupOnExit (tmpfile) {\n  return () => {\n    try {\n      fs.unlinkSync(typeof tmpfile === 'function' ? tmpfile() : tmpfile)\n    } catch {\n      // ignore errors\n    }\n  }\n}\n\nfunction serializeActiveFile (absoluteName) {\n  return new Promise(resolve => {\n    // make a queue if it doesn't already exist\n    if (!activeFiles[absoluteName]) {\n      activeFiles[absoluteName] = []\n    }\n\n    activeFiles[absoluteName].push(resolve) // add this job to the queue\n    if (activeFiles[absoluteName].length === 1) {\n      resolve()\n    } // kick off the first one\n  })\n}\n\n// https://github.com/isaacs/node-graceful-fs/blob/master/polyfills.js#L315-L342\nfunction isChownErrOk (err) {\n  if (err.code === 'ENOSYS') {\n    return true\n  }\n\n  const nonroot = !process.getuid || process.getuid() !== 0\n  if (nonroot) {\n    if (err.code === 'EINVAL' || err.code === 'EPERM') {\n      return true\n    }\n  }\n\n  return false\n}\n\nasync function writeFileAsync (filename, data, options = {}) {\n  if (typeof options === 'string') {\n    options = { encoding: options }\n  }\n\n  let fd\n  let tmpfile\n  /* istanbul ignore next -- The closure only gets called when onExit triggers */\n  const removeOnExitHandler = onExit(cleanupOnExit(() => tmpfile))\n  const absoluteName = path.resolve(filename)\n\n  try {\n    await serializeActiveFile(absoluteName)\n    const truename = await promisify(fs.realpath)(filename).catch(() => filename)\n    tmpfile = getTmpname(truename)\n\n    if (!options.mode || !options.chown) {\n      // Either mode or chown is not explicitly set\n      // Default behavior is to copy it from original file\n      const stats = await promisify(fs.stat)(truename).catch(() => {})\n      if (stats) {\n        if (options.mode == null) {\n          options.mode = stats.mode\n        }\n\n        if (options.chown == null && process.getuid) {\n          options.chown = { uid: stats.uid, gid: stats.gid }\n        }\n      }\n    }\n\n    fd = await promisify(fs.open)(tmpfile, 'w', options.mode)\n    if (options.tmpfileCreated) {\n      await options.tmpfileCreated(tmpfile)\n    }\n    if (ArrayBuffer.isView(data)) {\n      await promisify(fs.write)(fd, data, 0, data.length, 0)\n    } else if (data != null) {\n      await promisify(fs.write)(fd, String(data), 0, String(options.encoding || 'utf8'))\n    }\n\n    if (options.fsync !== false) {\n      await promisify(fs.fsync)(fd)\n    }\n\n    await promisify(fs.close)(fd)\n    fd = null\n\n    if (options.chown) {\n      await promisify(fs.chown)(tmpfile, options.chown.uid, options.chown.gid).catch(err => {\n        if (!isChownErrOk(err)) {\n          throw err\n        }\n      })\n    }\n\n    if (options.mode) {\n      await promisify(fs.chmod)(tmpfile, options.mode).catch(err => {\n        if (!isChownErrOk(err)) {\n          throw err\n        }\n      })\n    }\n\n    await promisify(fs.rename)(tmpfile, truename)\n  } finally {\n    if (fd) {\n      await promisify(fs.close)(fd).catch(\n        /* istanbul ignore next */\n        () => {}\n      )\n    }\n    removeOnExitHandler()\n    await promisify(fs.unlink)(tmpfile).catch(() => {})\n    activeFiles[absoluteName].shift() // remove the element added by serializeSameFile\n    if (activeFiles[absoluteName].length > 0) {\n      activeFiles[absoluteName][0]() // start next job if one is pending\n    } else {\n      delete activeFiles[absoluteName]\n    }\n  }\n}\n\nasync function writeFile (filename, data, options, callback) {\n  if (options instanceof Function) {\n    callback = options\n    options = {}\n  }\n\n  const promise = writeFileAsync(filename, data, options)\n  if (callback) {\n    try {\n      const result = await promise\n      return callback(result)\n    } catch (err) {\n      return callback(err)\n    }\n  }\n\n  return promise\n}\n\nfunction writeFileSync (filename, data, options) {\n  if (typeof options === 'string') {\n    options = { encoding: options }\n  } else if (!options) {\n    options = {}\n  }\n  try {\n    filename = fs.realpathSync(filename)\n  } catch (ex) {\n    // it's ok, it'll happen on a not yet existing file\n  }\n  const tmpfile = getTmpname(filename)\n\n  if (!options.mode || !options.chown) {\n    // Either mode or chown is not explicitly set\n    // Default behavior is to copy it from original file\n    try {\n      const stats = fs.statSync(filename)\n      options = Object.assign({}, options)\n      if (!options.mode) {\n        options.mode = stats.mode\n      }\n      if (!options.chown && process.getuid) {\n        options.chown = { uid: stats.uid, gid: stats.gid }\n      }\n    } catch (ex) {\n      // ignore stat errors\n    }\n  }\n\n  let fd\n  const cleanup = cleanupOnExit(tmpfile)\n  const removeOnExitHandler = onExit(cleanup)\n\n  let threw = true\n  try {\n    fd = fs.openSync(tmpfile, 'w', options.mode || 0o666)\n    if (options.tmpfileCreated) {\n      options.tmpfileCreated(tmpfile)\n    }\n    if (ArrayBuffer.isView(data)) {\n      fs.writeSync(fd, data, 0, data.length, 0)\n    } else if (data != null) {\n      fs.writeSync(fd, String(data), 0, String(options.encoding || 'utf8'))\n    }\n    if (options.fsync !== false) {\n      fs.fsyncSync(fd)\n    }\n\n    fs.closeSync(fd)\n    fd = null\n\n    if (options.chown) {\n      try {\n        fs.chownSync(tmpfile, options.chown.uid, options.chown.gid)\n      } catch (err) {\n        if (!isChownErrOk(err)) {\n          throw err\n        }\n      }\n    }\n\n    if (options.mode) {\n      try {\n        fs.chmodSync(tmpfile, options.mode)\n      } catch (err) {\n        if (!isChownErrOk(err)) {\n          throw err\n        }\n      }\n    }\n\n    fs.renameSync(tmpfile, filename)\n    threw = false\n  } finally {\n    if (fd) {\n      try {\n        fs.closeSync(fd)\n      } catch (ex) {\n        // ignore close errors at this stage, error may have closed fd already.\n      }\n    }\n    removeOnExitHandler()\n    if (threw) {\n      cleanup()\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}