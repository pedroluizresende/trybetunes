{"ast":null,"code":"'use strict';\n\nconst levenshtein = require('fastest-levenshtein');\n\nconst rules = require('./rules');\n\nconst MAX_LEVENSHTEIN_DISTANCE = 6;\nconst MAX_SUGGESTIONS_COUNT = 3;\n/**\n * @param {string} ruleName\n * @return {string[]}\n */\n\nfunction extractSuggestions(ruleName) {\n  const suggestions = Array.from({\n    length: MAX_LEVENSHTEIN_DISTANCE\n  });\n\n  for (let i = 0; i < suggestions.length; i++) {\n    suggestions[i] = [];\n  }\n\n  for (const existRuleName of Object.keys(rules)) {\n    const distance = levenshtein.distance(existRuleName, ruleName);\n\n    if (distance <= MAX_LEVENSHTEIN_DISTANCE) {\n      suggestions[distance - 1].push(existRuleName);\n    }\n  }\n  /** @type {string[]} */\n\n\n  let result = [];\n\n  for (const [i, suggestion] of suggestions.entries()) {\n    if (suggestion.length > 0) {\n      if (i < 3) {\n        return suggestion.slice(0, MAX_SUGGESTIONS_COUNT);\n      }\n\n      result = result.concat(suggestion);\n    }\n  }\n\n  return result.slice(0, MAX_SUGGESTIONS_COUNT);\n}\n/**\n * @param {string} ruleName\n * @param {string[]} [suggestions=[]]\n * @return {string}\n */\n\n\nfunction rejectMessage(ruleName) {\n  let suggestions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return `Unknown rule ${ruleName}.${suggestions.length > 0 ? ` Did you mean ${suggestions.join(', ')}?` : ''}`;\n}\n/** @type {Map<string, string[]>} */\n\n\nconst cache = new Map();\n/**\n * @param {string} unknownRuleName\n * @param {import('postcss').Root} postcssRoot\n * @param {import('stylelint').PostcssResult} postcssResult\n * @returns {void}\n */\n\nmodule.exports = function reportUnknownRuleNames(unknownRuleName, postcssRoot, postcssResult) {\n  const suggestions = cache.has(unknownRuleName) ?\n  /** @type {string[]} */\n  cache.get(unknownRuleName) : extractSuggestions(unknownRuleName);\n  cache.set(unknownRuleName, suggestions);\n  postcssResult.warn(rejectMessage(unknownRuleName, suggestions), {\n    severity: 'error',\n    rule: unknownRuleName,\n    node: postcssRoot,\n    index: 0\n  });\n};","map":{"version":3,"names":["levenshtein","require","rules","MAX_LEVENSHTEIN_DISTANCE","MAX_SUGGESTIONS_COUNT","extractSuggestions","ruleName","suggestions","Array","from","length","i","existRuleName","Object","keys","distance","push","result","suggestion","entries","slice","concat","rejectMessage","join","cache","Map","module","exports","reportUnknownRuleNames","unknownRuleName","postcssRoot","postcssResult","has","get","set","warn","severity","rule","node","index"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/stylelint/lib/reportUnknownRuleNames.js"],"sourcesContent":["'use strict';\n\nconst levenshtein = require('fastest-levenshtein');\nconst rules = require('./rules');\n\nconst MAX_LEVENSHTEIN_DISTANCE = 6;\nconst MAX_SUGGESTIONS_COUNT = 3;\n\n/**\n * @param {string} ruleName\n * @return {string[]}\n */\nfunction extractSuggestions(ruleName) {\n\tconst suggestions = Array.from({ length: MAX_LEVENSHTEIN_DISTANCE });\n\n\tfor (let i = 0; i < suggestions.length; i++) {\n\t\tsuggestions[i] = [];\n\t}\n\n\tfor (const existRuleName of Object.keys(rules)) {\n\t\tconst distance = levenshtein.distance(existRuleName, ruleName);\n\n\t\tif (distance <= MAX_LEVENSHTEIN_DISTANCE) {\n\t\t\tsuggestions[distance - 1].push(existRuleName);\n\t\t}\n\t}\n\n\t/** @type {string[]} */\n\tlet result = [];\n\n\tfor (const [i, suggestion] of suggestions.entries()) {\n\t\tif (suggestion.length > 0) {\n\t\t\tif (i < 3) {\n\t\t\t\treturn suggestion.slice(0, MAX_SUGGESTIONS_COUNT);\n\t\t\t}\n\n\t\t\tresult = result.concat(suggestion);\n\t\t}\n\t}\n\n\treturn result.slice(0, MAX_SUGGESTIONS_COUNT);\n}\n\n/**\n * @param {string} ruleName\n * @param {string[]} [suggestions=[]]\n * @return {string}\n */\nfunction rejectMessage(ruleName, suggestions = []) {\n\treturn `Unknown rule ${ruleName}.${\n\t\tsuggestions.length > 0 ? ` Did you mean ${suggestions.join(', ')}?` : ''\n\t}`;\n}\n\n/** @type {Map<string, string[]>} */\nconst cache = new Map();\n\n/**\n * @param {string} unknownRuleName\n * @param {import('postcss').Root} postcssRoot\n * @param {import('stylelint').PostcssResult} postcssResult\n * @returns {void}\n */\nmodule.exports = function reportUnknownRuleNames(unknownRuleName, postcssRoot, postcssResult) {\n\tconst suggestions = cache.has(unknownRuleName)\n\t\t? /** @type {string[]} */ (cache.get(unknownRuleName))\n\t\t: extractSuggestions(unknownRuleName);\n\n\tcache.set(unknownRuleName, suggestions);\n\tpostcssResult.warn(rejectMessage(unknownRuleName, suggestions), {\n\t\tseverity: 'error',\n\t\trule: unknownRuleName,\n\t\tnode: postcssRoot,\n\t\tindex: 0,\n\t});\n};\n"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,qBAAD,CAA3B;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAArB;;AAEA,MAAME,wBAAwB,GAAG,CAAjC;AACA,MAAMC,qBAAqB,GAAG,CAA9B;AAEA;AACA;AACA;AACA;;AACA,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;EACrC,MAAMC,WAAW,GAAGC,KAAK,CAACC,IAAN,CAAW;IAAEC,MAAM,EAAEP;EAAV,CAAX,CAApB;;EAEA,KAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,WAAW,CAACG,MAAhC,EAAwCC,CAAC,EAAzC,EAA6C;IAC5CJ,WAAW,CAACI,CAAD,CAAX,GAAiB,EAAjB;EACA;;EAED,KAAK,MAAMC,aAAX,IAA4BC,MAAM,CAACC,IAAP,CAAYZ,KAAZ,CAA5B,EAAgD;IAC/C,MAAMa,QAAQ,GAAGf,WAAW,CAACe,QAAZ,CAAqBH,aAArB,EAAoCN,QAApC,CAAjB;;IAEA,IAAIS,QAAQ,IAAIZ,wBAAhB,EAA0C;MACzCI,WAAW,CAACQ,QAAQ,GAAG,CAAZ,CAAX,CAA0BC,IAA1B,CAA+BJ,aAA/B;IACA;EACD;EAED;;;EACA,IAAIK,MAAM,GAAG,EAAb;;EAEA,KAAK,MAAM,CAACN,CAAD,EAAIO,UAAJ,CAAX,IAA8BX,WAAW,CAACY,OAAZ,EAA9B,EAAqD;IACpD,IAAID,UAAU,CAACR,MAAX,GAAoB,CAAxB,EAA2B;MAC1B,IAAIC,CAAC,GAAG,CAAR,EAAW;QACV,OAAOO,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoBhB,qBAApB,CAAP;MACA;;MAEDa,MAAM,GAAGA,MAAM,CAACI,MAAP,CAAcH,UAAd,CAAT;IACA;EACD;;EAED,OAAOD,MAAM,CAACG,KAAP,CAAa,CAAb,EAAgBhB,qBAAhB,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASkB,aAAT,CAAuBhB,QAAvB,EAAmD;EAAA,IAAlBC,WAAkB,uEAAJ,EAAI;EAClD,OAAQ,gBAAeD,QAAS,IAC/BC,WAAW,CAACG,MAAZ,GAAqB,CAArB,GAA0B,iBAAgBH,WAAW,CAACgB,IAAZ,CAAiB,IAAjB,CAAuB,GAAjE,GAAsE,EACtE,EAFD;AAGA;AAED;;;AACA,MAAMC,KAAK,GAAG,IAAIC,GAAJ,EAAd;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,sBAAT,CAAgCC,eAAhC,EAAiDC,WAAjD,EAA8DC,aAA9D,EAA6E;EAC7F,MAAMxB,WAAW,GAAGiB,KAAK,CAACQ,GAAN,CAAUH,eAAV;EACjB;EAAyBL,KAAK,CAACS,GAAN,CAAUJ,eAAV,CADR,GAEjBxB,kBAAkB,CAACwB,eAAD,CAFrB;EAIAL,KAAK,CAACU,GAAN,CAAUL,eAAV,EAA2BtB,WAA3B;EACAwB,aAAa,CAACI,IAAd,CAAmBb,aAAa,CAACO,eAAD,EAAkBtB,WAAlB,CAAhC,EAAgE;IAC/D6B,QAAQ,EAAE,OADqD;IAE/DC,IAAI,EAAER,eAFyD;IAG/DS,IAAI,EAAER,WAHyD;IAI/DS,KAAK,EAAE;EAJwD,CAAhE;AAMA,CAZD"},"metadata":{},"sourceType":"script"}