{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BreakStatement = BreakStatement;\nexports.CatchClause = CatchClause;\nexports.ContinueStatement = ContinueStatement;\nexports.DebuggerStatement = DebuggerStatement;\nexports.DoWhileStatement = DoWhileStatement;\nexports.ForOfStatement = exports.ForInStatement = void 0;\nexports.ForStatement = ForStatement;\nexports.IfStatement = IfStatement;\nexports.LabeledStatement = LabeledStatement;\nexports.ReturnStatement = ReturnStatement;\nexports.SwitchCase = SwitchCase;\nexports.SwitchStatement = SwitchStatement;\nexports.ThrowStatement = ThrowStatement;\nexports.TryStatement = TryStatement;\nexports.VariableDeclaration = VariableDeclaration;\nexports.VariableDeclarator = VariableDeclarator;\nexports.WhileStatement = WhileStatement;\nexports.WithStatement = WithStatement;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  isFor,\n  isForStatement,\n  isIfStatement,\n  isStatement\n} = _t;\n\nfunction WithStatement(node) {\n  this.word(\"with\");\n  this.space();\n  this.tokenChar(40);\n  this.print(node.object, node);\n  this.tokenChar(41);\n  this.printBlock(node);\n}\n\nfunction IfStatement(node) {\n  this.word(\"if\");\n  this.space();\n  this.tokenChar(40);\n  this.print(node.test, node);\n  this.tokenChar(41);\n  this.space();\n  const needsBlock = node.alternate && isIfStatement(getLastStatement(node.consequent));\n\n  if (needsBlock) {\n    this.tokenChar(123);\n    this.newline();\n    this.indent();\n  }\n\n  this.printAndIndentOnComments(node.consequent, node);\n\n  if (needsBlock) {\n    this.dedent();\n    this.newline();\n    this.tokenChar(125);\n  }\n\n  if (node.alternate) {\n    if (this.endsWith(125)) this.space();\n    this.word(\"else\");\n    this.space();\n    this.printAndIndentOnComments(node.alternate, node);\n  }\n}\n\nfunction getLastStatement(statement) {\n  const {\n    body\n  } = statement;\n\n  if (isStatement(body) === false) {\n    return statement;\n  }\n\n  return getLastStatement(body);\n}\n\nfunction ForStatement(node) {\n  this.word(\"for\");\n  this.space();\n  this.tokenChar(40);\n  this.inForStatementInitCounter++;\n  this.print(node.init, node);\n  this.inForStatementInitCounter--;\n  this.tokenChar(59);\n\n  if (node.test) {\n    this.space();\n    this.print(node.test, node);\n  }\n\n  this.tokenChar(59);\n\n  if (node.update) {\n    this.space();\n    this.print(node.update, node);\n  }\n\n  this.tokenChar(41);\n  this.printBlock(node);\n}\n\nfunction WhileStatement(node) {\n  this.word(\"while\");\n  this.space();\n  this.tokenChar(40);\n  this.print(node.test, node);\n  this.tokenChar(41);\n  this.printBlock(node);\n}\n\nfunction ForXStatement(node) {\n  this.word(\"for\");\n  this.space();\n  const isForOf = node.type === \"ForOfStatement\";\n\n  if (isForOf && node.await) {\n    this.word(\"await\");\n    this.space();\n  }\n\n  this.tokenChar(40);\n  this.print(node.left, node);\n  this.space();\n  this.word(isForOf ? \"of\" : \"in\");\n  this.space();\n  this.print(node.right, node);\n  this.tokenChar(41);\n  this.printBlock(node);\n}\n\nconst ForInStatement = ForXStatement;\nexports.ForInStatement = ForInStatement;\nconst ForOfStatement = ForXStatement;\nexports.ForOfStatement = ForOfStatement;\n\nfunction DoWhileStatement(node) {\n  this.word(\"do\");\n  this.space();\n  this.print(node.body, node);\n  this.space();\n  this.word(\"while\");\n  this.space();\n  this.tokenChar(40);\n  this.print(node.test, node);\n  this.tokenChar(41);\n  this.semicolon();\n}\n\nfunction printStatementAfterKeyword(printer, node, parent, isLabel) {\n  if (node) {\n    printer.space();\n    printer.printTerminatorless(node, parent, isLabel);\n  }\n\n  printer.semicolon();\n}\n\nfunction BreakStatement(node) {\n  this.word(\"break\");\n  printStatementAfterKeyword(this, node.label, node, true);\n}\n\nfunction ContinueStatement(node) {\n  this.word(\"continue\");\n  printStatementAfterKeyword(this, node.label, node, true);\n}\n\nfunction ReturnStatement(node) {\n  this.word(\"return\");\n  printStatementAfterKeyword(this, node.argument, node, false);\n}\n\nfunction ThrowStatement(node) {\n  this.word(\"throw\");\n  printStatementAfterKeyword(this, node.argument, node, false);\n}\n\nfunction LabeledStatement(node) {\n  this.print(node.label, node);\n  this.tokenChar(58);\n  this.space();\n  this.print(node.body, node);\n}\n\nfunction TryStatement(node) {\n  this.word(\"try\");\n  this.space();\n  this.print(node.block, node);\n  this.space();\n\n  if (node.handlers) {\n    this.print(node.handlers[0], node);\n  } else {\n    this.print(node.handler, node);\n  }\n\n  if (node.finalizer) {\n    this.space();\n    this.word(\"finally\");\n    this.space();\n    this.print(node.finalizer, node);\n  }\n}\n\nfunction CatchClause(node) {\n  this.word(\"catch\");\n  this.space();\n\n  if (node.param) {\n    this.tokenChar(40);\n    this.print(node.param, node);\n    this.print(node.param.typeAnnotation, node);\n    this.tokenChar(41);\n    this.space();\n  }\n\n  this.print(node.body, node);\n}\n\nfunction SwitchStatement(node) {\n  this.word(\"switch\");\n  this.space();\n  this.tokenChar(40);\n  this.print(node.discriminant, node);\n  this.tokenChar(41);\n  this.space();\n  this.tokenChar(123);\n  this.printSequence(node.cases, node, {\n    indent: true,\n\n    addNewlines(leading, cas) {\n      if (!leading && node.cases[node.cases.length - 1] === cas) return -1;\n    }\n\n  });\n  this.tokenChar(125);\n}\n\nfunction SwitchCase(node) {\n  if (node.test) {\n    this.word(\"case\");\n    this.space();\n    this.print(node.test, node);\n    this.tokenChar(58);\n  } else {\n    this.word(\"default\");\n    this.tokenChar(58);\n  }\n\n  if (node.consequent.length) {\n    this.newline();\n    this.printSequence(node.consequent, node, {\n      indent: true\n    });\n  }\n}\n\nfunction DebuggerStatement() {\n  this.word(\"debugger\");\n  this.semicolon();\n}\n\nfunction variableDeclarationIndent() {\n  this.tokenChar(44);\n  this.newline();\n\n  if (this.endsWith(10)) {\n    for (let i = 0; i < 4; i++) this.space(true);\n  }\n}\n\nfunction constDeclarationIndent() {\n  this.tokenChar(44);\n  this.newline();\n\n  if (this.endsWith(10)) {\n    for (let i = 0; i < 6; i++) this.space(true);\n  }\n}\n\nfunction VariableDeclaration(node, parent) {\n  if (node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(node.kind);\n  this.space();\n  let hasInits = false;\n\n  if (!isFor(parent)) {\n    for (const declar of node.declarations) {\n      if (declar.init) {\n        hasInits = true;\n      }\n    }\n  }\n\n  let separator;\n\n  if (hasInits) {\n    separator = node.kind === \"const\" ? constDeclarationIndent : variableDeclarationIndent;\n  }\n\n  this.printList(node.declarations, node, {\n    separator\n  });\n\n  if (isFor(parent)) {\n    if (isForStatement(parent)) {\n      if (parent.init === node) return;\n    } else {\n      if (parent.left === node) return;\n    }\n  }\n\n  this.semicolon();\n}\n\nfunction VariableDeclarator(node) {\n  this.print(node.id, node);\n  if (node.definite) this.tokenChar(33);\n  this.print(node.id.typeAnnotation, node);\n\n  if (node.init) {\n    this.space();\n    this.tokenChar(61);\n    this.space();\n    this.print(node.init, node);\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","BreakStatement","CatchClause","ContinueStatement","DebuggerStatement","DoWhileStatement","ForOfStatement","ForInStatement","ForStatement","IfStatement","LabeledStatement","ReturnStatement","SwitchCase","SwitchStatement","ThrowStatement","TryStatement","VariableDeclaration","VariableDeclarator","WhileStatement","WithStatement","_t","require","isFor","isForStatement","isIfStatement","isStatement","node","word","space","tokenChar","print","object","printBlock","test","needsBlock","alternate","getLastStatement","consequent","newline","indent","printAndIndentOnComments","dedent","endsWith","statement","body","inForStatementInitCounter","init","update","ForXStatement","isForOf","type","await","left","right","semicolon","printStatementAfterKeyword","printer","parent","isLabel","printTerminatorless","label","argument","block","handlers","handler","finalizer","param","typeAnnotation","discriminant","printSequence","cases","addNewlines","leading","cas","length","variableDeclarationIndent","i","constDeclarationIndent","declare","kind","hasInits","declar","declarations","separator","printList","id","definite"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/generator/lib/generators/statements.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BreakStatement = BreakStatement;\nexports.CatchClause = CatchClause;\nexports.ContinueStatement = ContinueStatement;\nexports.DebuggerStatement = DebuggerStatement;\nexports.DoWhileStatement = DoWhileStatement;\nexports.ForOfStatement = exports.ForInStatement = void 0;\nexports.ForStatement = ForStatement;\nexports.IfStatement = IfStatement;\nexports.LabeledStatement = LabeledStatement;\nexports.ReturnStatement = ReturnStatement;\nexports.SwitchCase = SwitchCase;\nexports.SwitchStatement = SwitchStatement;\nexports.ThrowStatement = ThrowStatement;\nexports.TryStatement = TryStatement;\nexports.VariableDeclaration = VariableDeclaration;\nexports.VariableDeclarator = VariableDeclarator;\nexports.WhileStatement = WhileStatement;\nexports.WithStatement = WithStatement;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  isFor,\n  isForStatement,\n  isIfStatement,\n  isStatement\n} = _t;\n\nfunction WithStatement(node) {\n  this.word(\"with\");\n  this.space();\n  this.tokenChar(40);\n  this.print(node.object, node);\n  this.tokenChar(41);\n  this.printBlock(node);\n}\n\nfunction IfStatement(node) {\n  this.word(\"if\");\n  this.space();\n  this.tokenChar(40);\n  this.print(node.test, node);\n  this.tokenChar(41);\n  this.space();\n  const needsBlock = node.alternate && isIfStatement(getLastStatement(node.consequent));\n\n  if (needsBlock) {\n    this.tokenChar(123);\n    this.newline();\n    this.indent();\n  }\n\n  this.printAndIndentOnComments(node.consequent, node);\n\n  if (needsBlock) {\n    this.dedent();\n    this.newline();\n    this.tokenChar(125);\n  }\n\n  if (node.alternate) {\n    if (this.endsWith(125)) this.space();\n    this.word(\"else\");\n    this.space();\n    this.printAndIndentOnComments(node.alternate, node);\n  }\n}\n\nfunction getLastStatement(statement) {\n  const {\n    body\n  } = statement;\n\n  if (isStatement(body) === false) {\n    return statement;\n  }\n\n  return getLastStatement(body);\n}\n\nfunction ForStatement(node) {\n  this.word(\"for\");\n  this.space();\n  this.tokenChar(40);\n  this.inForStatementInitCounter++;\n  this.print(node.init, node);\n  this.inForStatementInitCounter--;\n  this.tokenChar(59);\n\n  if (node.test) {\n    this.space();\n    this.print(node.test, node);\n  }\n\n  this.tokenChar(59);\n\n  if (node.update) {\n    this.space();\n    this.print(node.update, node);\n  }\n\n  this.tokenChar(41);\n  this.printBlock(node);\n}\n\nfunction WhileStatement(node) {\n  this.word(\"while\");\n  this.space();\n  this.tokenChar(40);\n  this.print(node.test, node);\n  this.tokenChar(41);\n  this.printBlock(node);\n}\n\nfunction ForXStatement(node) {\n  this.word(\"for\");\n  this.space();\n  const isForOf = node.type === \"ForOfStatement\";\n\n  if (isForOf && node.await) {\n    this.word(\"await\");\n    this.space();\n  }\n\n  this.tokenChar(40);\n  this.print(node.left, node);\n  this.space();\n  this.word(isForOf ? \"of\" : \"in\");\n  this.space();\n  this.print(node.right, node);\n  this.tokenChar(41);\n  this.printBlock(node);\n}\n\nconst ForInStatement = ForXStatement;\nexports.ForInStatement = ForInStatement;\nconst ForOfStatement = ForXStatement;\nexports.ForOfStatement = ForOfStatement;\n\nfunction DoWhileStatement(node) {\n  this.word(\"do\");\n  this.space();\n  this.print(node.body, node);\n  this.space();\n  this.word(\"while\");\n  this.space();\n  this.tokenChar(40);\n  this.print(node.test, node);\n  this.tokenChar(41);\n  this.semicolon();\n}\n\nfunction printStatementAfterKeyword(printer, node, parent, isLabel) {\n  if (node) {\n    printer.space();\n    printer.printTerminatorless(node, parent, isLabel);\n  }\n\n  printer.semicolon();\n}\n\nfunction BreakStatement(node) {\n  this.word(\"break\");\n  printStatementAfterKeyword(this, node.label, node, true);\n}\n\nfunction ContinueStatement(node) {\n  this.word(\"continue\");\n  printStatementAfterKeyword(this, node.label, node, true);\n}\n\nfunction ReturnStatement(node) {\n  this.word(\"return\");\n  printStatementAfterKeyword(this, node.argument, node, false);\n}\n\nfunction ThrowStatement(node) {\n  this.word(\"throw\");\n  printStatementAfterKeyword(this, node.argument, node, false);\n}\n\nfunction LabeledStatement(node) {\n  this.print(node.label, node);\n  this.tokenChar(58);\n  this.space();\n  this.print(node.body, node);\n}\n\nfunction TryStatement(node) {\n  this.word(\"try\");\n  this.space();\n  this.print(node.block, node);\n  this.space();\n\n  if (node.handlers) {\n    this.print(node.handlers[0], node);\n  } else {\n    this.print(node.handler, node);\n  }\n\n  if (node.finalizer) {\n    this.space();\n    this.word(\"finally\");\n    this.space();\n    this.print(node.finalizer, node);\n  }\n}\n\nfunction CatchClause(node) {\n  this.word(\"catch\");\n  this.space();\n\n  if (node.param) {\n    this.tokenChar(40);\n    this.print(node.param, node);\n    this.print(node.param.typeAnnotation, node);\n    this.tokenChar(41);\n    this.space();\n  }\n\n  this.print(node.body, node);\n}\n\nfunction SwitchStatement(node) {\n  this.word(\"switch\");\n  this.space();\n  this.tokenChar(40);\n  this.print(node.discriminant, node);\n  this.tokenChar(41);\n  this.space();\n  this.tokenChar(123);\n  this.printSequence(node.cases, node, {\n    indent: true,\n\n    addNewlines(leading, cas) {\n      if (!leading && node.cases[node.cases.length - 1] === cas) return -1;\n    }\n\n  });\n  this.tokenChar(125);\n}\n\nfunction SwitchCase(node) {\n  if (node.test) {\n    this.word(\"case\");\n    this.space();\n    this.print(node.test, node);\n    this.tokenChar(58);\n  } else {\n    this.word(\"default\");\n    this.tokenChar(58);\n  }\n\n  if (node.consequent.length) {\n    this.newline();\n    this.printSequence(node.consequent, node, {\n      indent: true\n    });\n  }\n}\n\nfunction DebuggerStatement() {\n  this.word(\"debugger\");\n  this.semicolon();\n}\n\nfunction variableDeclarationIndent() {\n  this.tokenChar(44);\n  this.newline();\n\n  if (this.endsWith(10)) {\n    for (let i = 0; i < 4; i++) this.space(true);\n  }\n}\n\nfunction constDeclarationIndent() {\n  this.tokenChar(44);\n  this.newline();\n\n  if (this.endsWith(10)) {\n    for (let i = 0; i < 6; i++) this.space(true);\n  }\n}\n\nfunction VariableDeclaration(node, parent) {\n  if (node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(node.kind);\n  this.space();\n  let hasInits = false;\n\n  if (!isFor(parent)) {\n    for (const declar of node.declarations) {\n      if (declar.init) {\n        hasInits = true;\n      }\n    }\n  }\n\n  let separator;\n\n  if (hasInits) {\n    separator = node.kind === \"const\" ? constDeclarationIndent : variableDeclarationIndent;\n  }\n\n  this.printList(node.declarations, node, {\n    separator\n  });\n\n  if (isFor(parent)) {\n    if (isForStatement(parent)) {\n      if (parent.init === node) return;\n    } else {\n      if (parent.left === node) return;\n    }\n  }\n\n  this.semicolon();\n}\n\nfunction VariableDeclarator(node) {\n  this.print(node.id, node);\n  if (node.definite) this.tokenChar(33);\n  this.print(node.id.typeAnnotation, node);\n\n  if (node.init) {\n    this.space();\n    this.tokenChar(61);\n    this.space();\n    this.print(node.init, node);\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}