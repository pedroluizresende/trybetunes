{"ast":null,"code":"'use strict';\n\nconst createStylelint = require('./createStylelint');\n\nconst path = require('path');\n/**\n * Resolves the effective configuation for a given file. Resolves to `undefined`\n * if no config is found.\n * @param {string} filePath - The path to the file to get the config for.\n * @param {Pick<\n *   import('stylelint').LinterOptions,\n *   | 'cwd'\n *   | 'config'\n *   | 'configBasedir'\n *   | 'configFile'\n * >} [options] - The options to use when creating the Stylelint instance.\n * @returns {Promise<import('stylelint').Config | undefined>}\n */\n\n\nmodule.exports = async function resolveConfig(filePath) {\n  let {\n    cwd = process.cwd(),\n    config,\n    configBasedir,\n    configFile\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!filePath) {\n    return undefined;\n  }\n\n  const stylelint = createStylelint({\n    config,\n    configFile,\n    configBasedir,\n    cwd\n  });\n  const absoluteFilePath = !path.isAbsolute(filePath) ? path.join(cwd, filePath) : path.normalize(filePath);\n  const configSearchPath = stylelint._options.configFile || absoluteFilePath;\n  const resolved = await stylelint.getConfigForFile(configSearchPath, absoluteFilePath);\n\n  if (!resolved) {\n    return undefined;\n  }\n\n  return resolved.config;\n};","map":{"version":3,"names":["createStylelint","require","path","module","exports","resolveConfig","filePath","cwd","process","config","configBasedir","configFile","undefined","stylelint","absoluteFilePath","isAbsolute","join","normalize","configSearchPath","_options","resolved","getConfigForFile"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/stylelint/lib/resolveConfig.js"],"sourcesContent":["'use strict';\n\nconst createStylelint = require('./createStylelint');\nconst path = require('path');\n\n/**\n * Resolves the effective configuation for a given file. Resolves to `undefined`\n * if no config is found.\n * @param {string} filePath - The path to the file to get the config for.\n * @param {Pick<\n *   import('stylelint').LinterOptions,\n *   | 'cwd'\n *   | 'config'\n *   | 'configBasedir'\n *   | 'configFile'\n * >} [options] - The options to use when creating the Stylelint instance.\n * @returns {Promise<import('stylelint').Config | undefined>}\n */\nmodule.exports = async function resolveConfig(\n\tfilePath,\n\t{ cwd = process.cwd(), config, configBasedir, configFile } = {},\n) {\n\tif (!filePath) {\n\t\treturn undefined;\n\t}\n\n\tconst stylelint = createStylelint({\n\t\tconfig,\n\t\tconfigFile,\n\t\tconfigBasedir,\n\t\tcwd,\n\t});\n\n\tconst absoluteFilePath = !path.isAbsolute(filePath)\n\t\t? path.join(cwd, filePath)\n\t\t: path.normalize(filePath);\n\n\tconst configSearchPath = stylelint._options.configFile || absoluteFilePath;\n\n\tconst resolved = await stylelint.getConfigForFile(configSearchPath, absoluteFilePath);\n\n\tif (!resolved) {\n\t\treturn undefined;\n\t}\n\n\treturn resolved.config;\n};\n"],"mappings":"AAAA;;AAEA,MAAMA,eAAe,GAAGC,OAAO,CAAC,mBAAD,CAA/B;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,eAAeC,aAAf,CAChBC,QADgB,EAGf;EAAA,IADD;IAAEC,GAAG,GAAGC,OAAO,CAACD,GAAR,EAAR;IAAuBE,MAAvB;IAA+BC,aAA/B;IAA8CC;EAA9C,CACC,uEAD4D,EAC5D;;EACD,IAAI,CAACL,QAAL,EAAe;IACd,OAAOM,SAAP;EACA;;EAED,MAAMC,SAAS,GAAGb,eAAe,CAAC;IACjCS,MADiC;IAEjCE,UAFiC;IAGjCD,aAHiC;IAIjCH;EAJiC,CAAD,CAAjC;EAOA,MAAMO,gBAAgB,GAAG,CAACZ,IAAI,CAACa,UAAL,CAAgBT,QAAhB,CAAD,GACtBJ,IAAI,CAACc,IAAL,CAAUT,GAAV,EAAeD,QAAf,CADsB,GAEtBJ,IAAI,CAACe,SAAL,CAAeX,QAAf,CAFH;EAIA,MAAMY,gBAAgB,GAAGL,SAAS,CAACM,QAAV,CAAmBR,UAAnB,IAAiCG,gBAA1D;EAEA,MAAMM,QAAQ,GAAG,MAAMP,SAAS,CAACQ,gBAAV,CAA2BH,gBAA3B,EAA6CJ,gBAA7C,CAAvB;;EAEA,IAAI,CAACM,QAAL,EAAe;IACd,OAAOR,SAAP;EACA;;EAED,OAAOQ,QAAQ,CAACX,MAAhB;AACA,CA5BD"},"metadata":{},"sourceType":"script"}