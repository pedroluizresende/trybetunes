{"ast":null,"code":"'use strict';\n\nconst configurationError = require('./utils/configurationError');\n\nconst getModulePath = require('./utils/getModulePath');\n\nconst globjoin = require('globjoin');\n\nconst micromatch = require('micromatch');\n\nconst normalizeAllRuleSettings = require('./normalizeAllRuleSettings');\n\nconst normalizePath = require('normalize-path');\n\nconst path = require('path');\n/** @typedef {import('stylelint').ConfigPlugins} StylelintConfigPlugins */\n\n/** @typedef {import('stylelint').ConfigProcessor} StylelintConfigProcessor */\n\n/** @typedef {import('stylelint').ConfigProcessors} StylelintConfigProcessors */\n\n/** @typedef {import('stylelint').ConfigRules} StylelintConfigRules */\n\n/** @typedef {import('stylelint').ConfigOverride} StylelintConfigOverride */\n\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n\n/** @typedef {import('stylelint').Config} StylelintConfig */\n\n/** @typedef {import('stylelint').CosmiconfigResult} StylelintCosmiconfigResult */\n\n/** @typedef {import('stylelint').CodeProcessor} StylelintCodeProcessor */\n\n/** @typedef {import('stylelint').ResultProcessor} StylelintResultProcessor */\n\n/**\n * - Merges config and stylelint options\n * - Makes all paths absolute\n * - Merges extends\n * @param {StylelintInternalApi} stylelint\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @param {boolean} allowOverrides\n * @param {string} rootConfigDir\n * @param {string} [filePath]\n * @returns {Promise<StylelintConfig>}\n */\n\n\nasync function augmentConfigBasic(stylelint, config, configDir, allowOverrides, rootConfigDir, filePath) {\n  let augmentedConfig = config;\n\n  if (allowOverrides) {\n    augmentedConfig = addOptions(stylelint, augmentedConfig);\n  }\n\n  if (filePath) {\n    augmentedConfig = applyOverrides(augmentedConfig, rootConfigDir, filePath);\n  }\n\n  augmentedConfig = await extendConfig(stylelint, augmentedConfig, configDir, rootConfigDir, filePath);\n  const cwd = stylelint._options.cwd;\n  return absolutizePaths(augmentedConfig, configDir, cwd);\n}\n/**\n * Extended configs need to be run through augmentConfigBasic\n * but do not need the full treatment. Things like pluginFunctions\n * will be resolved and added by the parent config.\n * @param {string} cwd\n * @returns {(cosmiconfigResult?: StylelintCosmiconfigResult) => Promise<StylelintCosmiconfigResult>}\n */\n\n\nfunction augmentConfigExtended(cwd) {\n  return async cosmiconfigResult => {\n    if (!cosmiconfigResult) {\n      return null;\n    }\n\n    const configDir = path.dirname(cosmiconfigResult.filepath || '');\n    const {\n      config\n    } = cosmiconfigResult;\n    const augmentedConfig = absolutizePaths(config, configDir, cwd);\n    return {\n      config: augmentedConfig,\n      filepath: cosmiconfigResult.filepath\n    };\n  };\n}\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {string} [filePath]\n * @param {StylelintCosmiconfigResult} [cosmiconfigResult]\n * @returns {Promise<StylelintCosmiconfigResult>}\n */\n\n\nasync function augmentConfigFull(stylelint, filePath, cosmiconfigResult) {\n  if (!cosmiconfigResult) {\n    return null;\n  }\n\n  const config = cosmiconfigResult.config;\n  const filepath = cosmiconfigResult.filepath;\n  const configDir = stylelint._options.configBasedir || path.dirname(filepath || '');\n  let augmentedConfig = await augmentConfigBasic(stylelint, config, configDir, true, configDir, filePath);\n  augmentedConfig = addPluginFunctions(augmentedConfig);\n  augmentedConfig = addProcessorFunctions(augmentedConfig);\n\n  if (!augmentedConfig.rules) {\n    throw configurationError('No rules found within configuration. Have you provided a \"rules\" property?');\n  }\n\n  augmentedConfig = normalizeAllRuleSettings(augmentedConfig);\n  return {\n    config: augmentedConfig,\n    filepath: cosmiconfigResult.filepath\n  };\n}\n/**\n * Make all paths in the config absolute:\n * - ignoreFiles\n * - plugins\n * - processors\n * (extends handled elsewhere)\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @param {string} cwd\n * @returns {StylelintConfig}\n */\n\n\nfunction absolutizePaths(config, configDir, cwd) {\n  if (config.ignoreFiles) {\n    config.ignoreFiles = [config.ignoreFiles].flat().map(glob => {\n      if (path.isAbsolute(glob.replace(/^!/, ''))) return glob;\n      return globjoin(configDir, glob);\n    });\n  }\n\n  if (config.plugins) {\n    config.plugins = [config.plugins].flat().map(lookup => getModulePath(configDir, lookup, cwd));\n  }\n\n  if (config.processors) {\n    config.processors = absolutizeProcessors(config.processors, configDir);\n  }\n\n  return config;\n}\n/**\n * Processors are absolutized in their own way because\n * they can be and return a string or an array\n * @param {StylelintConfigProcessors} processors\n * @param {string} configDir\n * @return {StylelintConfigProcessors}\n */\n\n\nfunction absolutizeProcessors(processors, configDir) {\n  const normalizedProcessors = Array.isArray(processors) ? processors : [processors];\n  return normalizedProcessors.map(item => {\n    if (typeof item === 'string') {\n      return getModulePath(configDir, item);\n    }\n\n    return [getModulePath(configDir, item[0]), item[1]];\n  });\n}\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @param {string} rootConfigDir\n * @param {string} [filePath]\n * @return {Promise<StylelintConfig>}\n */\n\n\nasync function extendConfig(stylelint, config, configDir, rootConfigDir, filePath) {\n  if (config.extends === undefined) {\n    return config;\n  }\n\n  const {\n    extends: configExtends,\n    ...originalWithoutExtends\n  } = config;\n  const normalizedExtends = [configExtends].flat();\n  let resultConfig = originalWithoutExtends;\n\n  for (const extendLookup of normalizedExtends) {\n    const extendResult = await loadExtendedConfig(stylelint, configDir, extendLookup);\n\n    if (extendResult) {\n      let extendResultConfig = extendResult.config;\n      const extendConfigDir = path.dirname(extendResult.filepath || '');\n      extendResultConfig = await augmentConfigBasic(stylelint, extendResultConfig, extendConfigDir, false, rootConfigDir, filePath);\n      resultConfig = mergeConfigs(resultConfig, extendResultConfig);\n    }\n  }\n\n  return mergeConfigs(resultConfig, originalWithoutExtends);\n}\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {string} configDir\n * @param {string} extendLookup\n * @return {Promise<StylelintCosmiconfigResult>}\n */\n\n\nfunction loadExtendedConfig(stylelint, configDir, extendLookup) {\n  const extendPath = getModulePath(configDir, extendLookup, stylelint._options.cwd);\n  return stylelint._extendExplorer.load(extendPath);\n}\n/**\n * When merging configs (via extends)\n * - plugin and processor arrays are joined\n * - rules are merged via Object.assign, so there is no attempt made to\n *   merge any given rule's settings. If b contains the same rule as a,\n *   b's rule settings will override a's rule settings entirely.\n * - Everything else is merged via Object.assign\n * @param {StylelintConfig} a\n * @param {StylelintConfig} b\n * @returns {StylelintConfig}\n */\n\n\nfunction mergeConfigs(a, b) {\n  /** @type {{plugins: StylelintConfigPlugins}} */\n  const pluginMerger = {};\n\n  if (a.plugins || b.plugins) {\n    pluginMerger.plugins = [];\n\n    if (a.plugins) {\n      pluginMerger.plugins = pluginMerger.plugins.concat(a.plugins);\n    }\n\n    if (b.plugins) {\n      pluginMerger.plugins = [...new Set(pluginMerger.plugins.concat(b.plugins))];\n    }\n  }\n  /** @type {{processors: StylelintConfigProcessors}} */\n\n\n  const processorMerger = {};\n\n  if (a.processors || b.processors) {\n    processorMerger.processors = [];\n\n    if (a.processors) {\n      processorMerger.processors = processorMerger.processors.concat(a.processors);\n    }\n\n    if (b.processors) {\n      processorMerger.processors = [...new Set(processorMerger.processors.concat(b.processors))];\n    }\n  }\n  /** @type {{overrides: StylelintConfigOverride[]}} */\n\n\n  const overridesMerger = {};\n\n  if (a.overrides || b.overrides) {\n    overridesMerger.overrides = [];\n\n    if (a.overrides) {\n      overridesMerger.overrides = overridesMerger.overrides.concat(a.overrides);\n    }\n\n    if (b.overrides) {\n      overridesMerger.overrides = [...new Set(overridesMerger.overrides.concat(b.overrides))];\n    }\n  }\n\n  const rulesMerger = {};\n\n  if (a.rules || b.rules) {\n    rulesMerger.rules = { ...a.rules,\n      ...b.rules\n    };\n  }\n\n  const result = { ...a,\n    ...b,\n    ...processorMerger,\n    ...pluginMerger,\n    ...overridesMerger,\n    ...rulesMerger\n  };\n  return result;\n}\n/**\n * @param {StylelintConfig} config\n * @returns {StylelintConfig}\n */\n\n\nfunction addPluginFunctions(config) {\n  if (!config.plugins) {\n    return config;\n  }\n\n  const normalizedPlugins = [config.plugins].flat();\n  /** @type {StylelintConfig['pluginFunctions']} */\n\n  const pluginFunctions = {};\n\n  for (const pluginLookup of normalizedPlugins) {\n    let pluginImport = require(pluginLookup); // Handle either ES6 or CommonJS modules\n\n\n    pluginImport = pluginImport.default || pluginImport; // A plugin can export either a single rule definition\n    // or an array of them\n\n    const normalizedPluginImport = [pluginImport].flat();\n\n    for (const pluginRuleDefinition of normalizedPluginImport) {\n      if (!pluginRuleDefinition.ruleName) {\n        throw configurationError(`stylelint requires plugins to expose a ruleName. The plugin \"${pluginLookup}\" is not doing this, so will not work with stylelint. Please file an issue with the plugin.`);\n      }\n\n      if (!pluginRuleDefinition.ruleName.includes('/')) {\n        throw configurationError(`stylelint requires plugin rules to be namespaced, i.e. only \\`plugin-namespace/plugin-rule-name\\` plugin rule names are supported. The plugin rule \"${pluginRuleDefinition.ruleName}\" does not do this, so will not work. Please file an issue with the plugin.`);\n      }\n\n      pluginFunctions[pluginRuleDefinition.ruleName] = pluginRuleDefinition.rule;\n    }\n  }\n\n  config.pluginFunctions = pluginFunctions;\n  return config;\n}\n/**\n * Given an array of processors strings, we want to add two\n * properties to the augmented config:\n * - codeProcessors: functions that will run on code as it comes in\n * - resultProcessors: functions that will run on results as they go out\n *\n * To create these properties, we need to:\n * - Find the processor module\n * - Initialize the processor module by calling its functions with any\n *   provided options\n * - Push the processor's code and result processors to their respective arrays\n * @type {Map<string, string | Object>}\n */\n\n\nconst processorCache = new Map();\n/**\n * @param {StylelintConfig} config\n * @return {StylelintConfig}\n */\n\nfunction addProcessorFunctions(config) {\n  if (!config.processors) return config;\n  /** @type {StylelintCodeProcessor[]} */\n\n  const codeProcessors = [];\n  /** @type {StylelintResultProcessor[]} */\n\n  const resultProcessors = [];\n\n  for (const processorConfig of [config.processors].flat()) {\n    const processorKey = JSON.stringify(processorConfig);\n    let initializedProcessor;\n\n    if (processorCache.has(processorKey)) {\n      initializedProcessor = processorCache.get(processorKey);\n    } else {\n      const processorLookup = typeof processorConfig === 'string' ? processorConfig : processorConfig[0];\n      const processorOptions = typeof processorConfig === 'string' ? undefined : processorConfig[1];\n\n      let processor = require(processorLookup);\n\n      processor = processor.default || processor;\n      initializedProcessor = processor(processorOptions);\n      processorCache.set(processorKey, initializedProcessor);\n    }\n\n    if (initializedProcessor && initializedProcessor.code) {\n      codeProcessors.push(initializedProcessor.code);\n    }\n\n    if (initializedProcessor && initializedProcessor.result) {\n      resultProcessors.push(initializedProcessor.result);\n    }\n  }\n\n  config.codeProcessors = codeProcessors;\n  config.resultProcessors = resultProcessors;\n  return config;\n}\n/**\n * @param {StylelintConfig} fullConfig\n * @param {string} rootConfigDir\n * @param {string} filePath\n * @return {StylelintConfig}\n */\n\n\nfunction applyOverrides(fullConfig, rootConfigDir, filePath) {\n  let {\n    overrides,\n    ...config\n  } = fullConfig;\n\n  if (!overrides) {\n    return config;\n  }\n\n  if (!Array.isArray(overrides)) {\n    throw new TypeError('The `overrides` configuration property should be an array, e.g. { \"overrides\": [{ \"files\": \"*.css\", \"rules\": {} }] }.');\n  }\n\n  for (const override of overrides) {\n    const {\n      files,\n      ...configOverrides\n    } = override;\n\n    if (!files) {\n      throw new Error('Every object in the `overrides` configuration property should have a `files` property with globs, e.g. { \"overrides\": [{ \"files\": \"*.css\", \"rules\": {} }] }.');\n    }\n\n    const filesGlobs = [files].flat().map(glob => {\n      if (path.isAbsolute(glob.replace(/^!/, ''))) {\n        return glob;\n      }\n\n      return globjoin(rootConfigDir, glob);\n    }) // Glob patterns for micromatch should be in POSIX-style\n    .map(s => normalizePath(s));\n\n    if (micromatch.isMatch(filePath, filesGlobs, {\n      dot: true\n    })) {\n      config = mergeConfigs(config, configOverrides);\n    }\n  }\n\n  return config;\n}\n/**\n * Add options to the config\n *\n * @param {StylelintInternalApi} stylelint\n * @param {StylelintConfig} config\n *\n * @returns {StylelintConfig}\n */\n\n\nfunction addOptions(stylelint, config) {\n  const augmentedConfig = { ...config\n  };\n\n  if (stylelint._options.ignoreDisables) {\n    augmentedConfig.ignoreDisables = stylelint._options.ignoreDisables;\n  }\n\n  if (stylelint._options.quiet) {\n    augmentedConfig.quiet = stylelint._options.quiet;\n  }\n\n  if (stylelint._options.reportNeedlessDisables) {\n    augmentedConfig.reportNeedlessDisables = stylelint._options.reportNeedlessDisables;\n  }\n\n  if (stylelint._options.reportInvalidScopeDisables) {\n    augmentedConfig.reportInvalidScopeDisables = stylelint._options.reportInvalidScopeDisables;\n  }\n\n  if (stylelint._options.reportDescriptionlessDisables) {\n    augmentedConfig.reportDescriptionlessDisables = stylelint._options.reportDescriptionlessDisables;\n  }\n\n  if (stylelint._options.customSyntax) {\n    augmentedConfig.customSyntax = stylelint._options.customSyntax;\n  }\n\n  return augmentedConfig;\n}\n\nmodule.exports = {\n  augmentConfigExtended,\n  augmentConfigFull,\n  applyOverrides\n};","map":{"version":3,"names":["configurationError","require","getModulePath","globjoin","micromatch","normalizeAllRuleSettings","normalizePath","path","augmentConfigBasic","stylelint","config","configDir","allowOverrides","rootConfigDir","filePath","augmentedConfig","addOptions","applyOverrides","extendConfig","cwd","_options","absolutizePaths","augmentConfigExtended","cosmiconfigResult","dirname","filepath","augmentConfigFull","configBasedir","addPluginFunctions","addProcessorFunctions","rules","ignoreFiles","flat","map","glob","isAbsolute","replace","plugins","lookup","processors","absolutizeProcessors","normalizedProcessors","Array","isArray","item","extends","undefined","configExtends","originalWithoutExtends","normalizedExtends","resultConfig","extendLookup","extendResult","loadExtendedConfig","extendResultConfig","extendConfigDir","mergeConfigs","extendPath","_extendExplorer","load","a","b","pluginMerger","concat","Set","processorMerger","overridesMerger","overrides","rulesMerger","result","normalizedPlugins","pluginFunctions","pluginLookup","pluginImport","default","normalizedPluginImport","pluginRuleDefinition","ruleName","includes","rule","processorCache","Map","codeProcessors","resultProcessors","processorConfig","processorKey","JSON","stringify","initializedProcessor","has","get","processorLookup","processorOptions","processor","set","code","push","fullConfig","TypeError","override","files","configOverrides","Error","filesGlobs","s","isMatch","dot","ignoreDisables","quiet","reportNeedlessDisables","reportInvalidScopeDisables","reportDescriptionlessDisables","customSyntax","module","exports"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/stylelint/lib/augmentConfig.js"],"sourcesContent":["'use strict';\n\nconst configurationError = require('./utils/configurationError');\nconst getModulePath = require('./utils/getModulePath');\nconst globjoin = require('globjoin');\nconst micromatch = require('micromatch');\nconst normalizeAllRuleSettings = require('./normalizeAllRuleSettings');\nconst normalizePath = require('normalize-path');\nconst path = require('path');\n\n/** @typedef {import('stylelint').ConfigPlugins} StylelintConfigPlugins */\n/** @typedef {import('stylelint').ConfigProcessor} StylelintConfigProcessor */\n/** @typedef {import('stylelint').ConfigProcessors} StylelintConfigProcessors */\n/** @typedef {import('stylelint').ConfigRules} StylelintConfigRules */\n/** @typedef {import('stylelint').ConfigOverride} StylelintConfigOverride */\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n/** @typedef {import('stylelint').Config} StylelintConfig */\n/** @typedef {import('stylelint').CosmiconfigResult} StylelintCosmiconfigResult */\n/** @typedef {import('stylelint').CodeProcessor} StylelintCodeProcessor */\n/** @typedef {import('stylelint').ResultProcessor} StylelintResultProcessor */\n\n/**\n * - Merges config and stylelint options\n * - Makes all paths absolute\n * - Merges extends\n * @param {StylelintInternalApi} stylelint\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @param {boolean} allowOverrides\n * @param {string} rootConfigDir\n * @param {string} [filePath]\n * @returns {Promise<StylelintConfig>}\n */\nasync function augmentConfigBasic(\n\tstylelint,\n\tconfig,\n\tconfigDir,\n\tallowOverrides,\n\trootConfigDir,\n\tfilePath,\n) {\n\tlet augmentedConfig = config;\n\n\tif (allowOverrides) {\n\t\taugmentedConfig = addOptions(stylelint, augmentedConfig);\n\t}\n\n\tif (filePath) {\n\t\taugmentedConfig = applyOverrides(augmentedConfig, rootConfigDir, filePath);\n\t}\n\n\taugmentedConfig = await extendConfig(\n\t\tstylelint,\n\t\taugmentedConfig,\n\t\tconfigDir,\n\t\trootConfigDir,\n\t\tfilePath,\n\t);\n\n\tconst cwd = stylelint._options.cwd;\n\n\treturn absolutizePaths(augmentedConfig, configDir, cwd);\n}\n\n/**\n * Extended configs need to be run through augmentConfigBasic\n * but do not need the full treatment. Things like pluginFunctions\n * will be resolved and added by the parent config.\n * @param {string} cwd\n * @returns {(cosmiconfigResult?: StylelintCosmiconfigResult) => Promise<StylelintCosmiconfigResult>}\n */\nfunction augmentConfigExtended(cwd) {\n\treturn async (cosmiconfigResult) => {\n\t\tif (!cosmiconfigResult) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst configDir = path.dirname(cosmiconfigResult.filepath || '');\n\t\tconst { config } = cosmiconfigResult;\n\n\t\tconst augmentedConfig = absolutizePaths(config, configDir, cwd);\n\n\t\treturn {\n\t\t\tconfig: augmentedConfig,\n\t\t\tfilepath: cosmiconfigResult.filepath,\n\t\t};\n\t};\n}\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {string} [filePath]\n * @param {StylelintCosmiconfigResult} [cosmiconfigResult]\n * @returns {Promise<StylelintCosmiconfigResult>}\n */\nasync function augmentConfigFull(stylelint, filePath, cosmiconfigResult) {\n\tif (!cosmiconfigResult) {\n\t\treturn null;\n\t}\n\n\tconst config = cosmiconfigResult.config;\n\tconst filepath = cosmiconfigResult.filepath;\n\n\tconst configDir = stylelint._options.configBasedir || path.dirname(filepath || '');\n\n\tlet augmentedConfig = await augmentConfigBasic(\n\t\tstylelint,\n\t\tconfig,\n\t\tconfigDir,\n\t\ttrue,\n\t\tconfigDir,\n\t\tfilePath,\n\t);\n\n\taugmentedConfig = addPluginFunctions(augmentedConfig);\n\taugmentedConfig = addProcessorFunctions(augmentedConfig);\n\n\tif (!augmentedConfig.rules) {\n\t\tthrow configurationError(\n\t\t\t'No rules found within configuration. Have you provided a \"rules\" property?',\n\t\t);\n\t}\n\n\taugmentedConfig = normalizeAllRuleSettings(augmentedConfig);\n\n\treturn {\n\t\tconfig: augmentedConfig,\n\t\tfilepath: cosmiconfigResult.filepath,\n\t};\n}\n\n/**\n * Make all paths in the config absolute:\n * - ignoreFiles\n * - plugins\n * - processors\n * (extends handled elsewhere)\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @param {string} cwd\n * @returns {StylelintConfig}\n */\nfunction absolutizePaths(config, configDir, cwd) {\n\tif (config.ignoreFiles) {\n\t\tconfig.ignoreFiles = [config.ignoreFiles].flat().map((glob) => {\n\t\t\tif (path.isAbsolute(glob.replace(/^!/, ''))) return glob;\n\n\t\t\treturn globjoin(configDir, glob);\n\t\t});\n\t}\n\n\tif (config.plugins) {\n\t\tconfig.plugins = [config.plugins].flat().map((lookup) => getModulePath(configDir, lookup, cwd));\n\t}\n\n\tif (config.processors) {\n\t\tconfig.processors = absolutizeProcessors(config.processors, configDir);\n\t}\n\n\treturn config;\n}\n\n/**\n * Processors are absolutized in their own way because\n * they can be and return a string or an array\n * @param {StylelintConfigProcessors} processors\n * @param {string} configDir\n * @return {StylelintConfigProcessors}\n */\nfunction absolutizeProcessors(processors, configDir) {\n\tconst normalizedProcessors = Array.isArray(processors) ? processors : [processors];\n\n\treturn normalizedProcessors.map((item) => {\n\t\tif (typeof item === 'string') {\n\t\t\treturn getModulePath(configDir, item);\n\t\t}\n\n\t\treturn [getModulePath(configDir, item[0]), item[1]];\n\t});\n}\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {StylelintConfig} config\n * @param {string} configDir\n * @param {string} rootConfigDir\n * @param {string} [filePath]\n * @return {Promise<StylelintConfig>}\n */\nasync function extendConfig(stylelint, config, configDir, rootConfigDir, filePath) {\n\tif (config.extends === undefined) {\n\t\treturn config;\n\t}\n\n\tconst { extends: configExtends, ...originalWithoutExtends } = config;\n\tconst normalizedExtends = [configExtends].flat();\n\n\tlet resultConfig = originalWithoutExtends;\n\n\tfor (const extendLookup of normalizedExtends) {\n\t\tconst extendResult = await loadExtendedConfig(stylelint, configDir, extendLookup);\n\n\t\tif (extendResult) {\n\t\t\tlet extendResultConfig = extendResult.config;\n\t\t\tconst extendConfigDir = path.dirname(extendResult.filepath || '');\n\n\t\t\textendResultConfig = await augmentConfigBasic(\n\t\t\t\tstylelint,\n\t\t\t\textendResultConfig,\n\t\t\t\textendConfigDir,\n\t\t\t\tfalse,\n\t\t\t\trootConfigDir,\n\t\t\t\tfilePath,\n\t\t\t);\n\n\t\t\tresultConfig = mergeConfigs(resultConfig, extendResultConfig);\n\t\t}\n\t}\n\n\treturn mergeConfigs(resultConfig, originalWithoutExtends);\n}\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {string} configDir\n * @param {string} extendLookup\n * @return {Promise<StylelintCosmiconfigResult>}\n */\nfunction loadExtendedConfig(stylelint, configDir, extendLookup) {\n\tconst extendPath = getModulePath(configDir, extendLookup, stylelint._options.cwd);\n\n\treturn stylelint._extendExplorer.load(extendPath);\n}\n\n/**\n * When merging configs (via extends)\n * - plugin and processor arrays are joined\n * - rules are merged via Object.assign, so there is no attempt made to\n *   merge any given rule's settings. If b contains the same rule as a,\n *   b's rule settings will override a's rule settings entirely.\n * - Everything else is merged via Object.assign\n * @param {StylelintConfig} a\n * @param {StylelintConfig} b\n * @returns {StylelintConfig}\n */\nfunction mergeConfigs(a, b) {\n\t/** @type {{plugins: StylelintConfigPlugins}} */\n\tconst pluginMerger = {};\n\n\tif (a.plugins || b.plugins) {\n\t\tpluginMerger.plugins = [];\n\n\t\tif (a.plugins) {\n\t\t\tpluginMerger.plugins = pluginMerger.plugins.concat(a.plugins);\n\t\t}\n\n\t\tif (b.plugins) {\n\t\t\tpluginMerger.plugins = [...new Set(pluginMerger.plugins.concat(b.plugins))];\n\t\t}\n\t}\n\n\t/** @type {{processors: StylelintConfigProcessors}} */\n\tconst processorMerger = {};\n\n\tif (a.processors || b.processors) {\n\t\tprocessorMerger.processors = [];\n\n\t\tif (a.processors) {\n\t\t\tprocessorMerger.processors = processorMerger.processors.concat(a.processors);\n\t\t}\n\n\t\tif (b.processors) {\n\t\t\tprocessorMerger.processors = [...new Set(processorMerger.processors.concat(b.processors))];\n\t\t}\n\t}\n\n\t/** @type {{overrides: StylelintConfigOverride[]}} */\n\tconst overridesMerger = {};\n\n\tif (a.overrides || b.overrides) {\n\t\toverridesMerger.overrides = [];\n\n\t\tif (a.overrides) {\n\t\t\toverridesMerger.overrides = overridesMerger.overrides.concat(a.overrides);\n\t\t}\n\n\t\tif (b.overrides) {\n\t\t\toverridesMerger.overrides = [...new Set(overridesMerger.overrides.concat(b.overrides))];\n\t\t}\n\t}\n\n\tconst rulesMerger = {};\n\n\tif (a.rules || b.rules) {\n\t\trulesMerger.rules = { ...a.rules, ...b.rules };\n\t}\n\n\tconst result = {\n\t\t...a,\n\t\t...b,\n\t\t...processorMerger,\n\t\t...pluginMerger,\n\t\t...overridesMerger,\n\t\t...rulesMerger,\n\t};\n\n\treturn result;\n}\n\n/**\n * @param {StylelintConfig} config\n * @returns {StylelintConfig}\n */\nfunction addPluginFunctions(config) {\n\tif (!config.plugins) {\n\t\treturn config;\n\t}\n\n\tconst normalizedPlugins = [config.plugins].flat();\n\n\t/** @type {StylelintConfig['pluginFunctions']} */\n\tconst pluginFunctions = {};\n\n\tfor (const pluginLookup of normalizedPlugins) {\n\t\tlet pluginImport = require(pluginLookup);\n\n\t\t// Handle either ES6 or CommonJS modules\n\t\tpluginImport = pluginImport.default || pluginImport;\n\n\t\t// A plugin can export either a single rule definition\n\t\t// or an array of them\n\t\tconst normalizedPluginImport = [pluginImport].flat();\n\n\t\tfor (const pluginRuleDefinition of normalizedPluginImport) {\n\t\t\tif (!pluginRuleDefinition.ruleName) {\n\t\t\t\tthrow configurationError(\n\t\t\t\t\t`stylelint requires plugins to expose a ruleName. The plugin \"${pluginLookup}\" is not doing this, so will not work with stylelint. Please file an issue with the plugin.`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!pluginRuleDefinition.ruleName.includes('/')) {\n\t\t\t\tthrow configurationError(\n\t\t\t\t\t`stylelint requires plugin rules to be namespaced, i.e. only \\`plugin-namespace/plugin-rule-name\\` plugin rule names are supported. The plugin rule \"${pluginRuleDefinition.ruleName}\" does not do this, so will not work. Please file an issue with the plugin.`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tpluginFunctions[pluginRuleDefinition.ruleName] = pluginRuleDefinition.rule;\n\t\t}\n\t}\n\n\tconfig.pluginFunctions = pluginFunctions;\n\n\treturn config;\n}\n\n/**\n * Given an array of processors strings, we want to add two\n * properties to the augmented config:\n * - codeProcessors: functions that will run on code as it comes in\n * - resultProcessors: functions that will run on results as they go out\n *\n * To create these properties, we need to:\n * - Find the processor module\n * - Initialize the processor module by calling its functions with any\n *   provided options\n * - Push the processor's code and result processors to their respective arrays\n * @type {Map<string, string | Object>}\n */\nconst processorCache = new Map();\n\n/**\n * @param {StylelintConfig} config\n * @return {StylelintConfig}\n */\nfunction addProcessorFunctions(config) {\n\tif (!config.processors) return config;\n\n\t/** @type {StylelintCodeProcessor[]} */\n\tconst codeProcessors = [];\n\t/** @type {StylelintResultProcessor[]} */\n\tconst resultProcessors = [];\n\n\tfor (const processorConfig of [config.processors].flat()) {\n\t\tconst processorKey = JSON.stringify(processorConfig);\n\n\t\tlet initializedProcessor;\n\n\t\tif (processorCache.has(processorKey)) {\n\t\t\tinitializedProcessor = processorCache.get(processorKey);\n\t\t} else {\n\t\t\tconst processorLookup =\n\t\t\t\ttypeof processorConfig === 'string' ? processorConfig : processorConfig[0];\n\t\t\tconst processorOptions = typeof processorConfig === 'string' ? undefined : processorConfig[1];\n\t\t\tlet processor = require(processorLookup);\n\n\t\t\tprocessor = processor.default || processor;\n\t\t\tinitializedProcessor = processor(processorOptions);\n\t\t\tprocessorCache.set(processorKey, initializedProcessor);\n\t\t}\n\n\t\tif (initializedProcessor && initializedProcessor.code) {\n\t\t\tcodeProcessors.push(initializedProcessor.code);\n\t\t}\n\n\t\tif (initializedProcessor && initializedProcessor.result) {\n\t\t\tresultProcessors.push(initializedProcessor.result);\n\t\t}\n\t}\n\n\tconfig.codeProcessors = codeProcessors;\n\tconfig.resultProcessors = resultProcessors;\n\n\treturn config;\n}\n\n/**\n * @param {StylelintConfig} fullConfig\n * @param {string} rootConfigDir\n * @param {string} filePath\n * @return {StylelintConfig}\n */\nfunction applyOverrides(fullConfig, rootConfigDir, filePath) {\n\tlet { overrides, ...config } = fullConfig;\n\n\tif (!overrides) {\n\t\treturn config;\n\t}\n\n\tif (!Array.isArray(overrides)) {\n\t\tthrow new TypeError(\n\t\t\t'The `overrides` configuration property should be an array, e.g. { \"overrides\": [{ \"files\": \"*.css\", \"rules\": {} }] }.',\n\t\t);\n\t}\n\n\tfor (const override of overrides) {\n\t\tconst { files, ...configOverrides } = override;\n\n\t\tif (!files) {\n\t\t\tthrow new Error(\n\t\t\t\t'Every object in the `overrides` configuration property should have a `files` property with globs, e.g. { \"overrides\": [{ \"files\": \"*.css\", \"rules\": {} }] }.',\n\t\t\t);\n\t\t}\n\n\t\tconst filesGlobs = [files]\n\t\t\t.flat()\n\t\t\t.map((glob) => {\n\t\t\t\tif (path.isAbsolute(glob.replace(/^!/, ''))) {\n\t\t\t\t\treturn glob;\n\t\t\t\t}\n\n\t\t\t\treturn globjoin(rootConfigDir, glob);\n\t\t\t})\n\t\t\t// Glob patterns for micromatch should be in POSIX-style\n\t\t\t.map((s) => normalizePath(s));\n\n\t\tif (micromatch.isMatch(filePath, filesGlobs, { dot: true })) {\n\t\t\tconfig = mergeConfigs(config, configOverrides);\n\t\t}\n\t}\n\n\treturn config;\n}\n\n/**\n * Add options to the config\n *\n * @param {StylelintInternalApi} stylelint\n * @param {StylelintConfig} config\n *\n * @returns {StylelintConfig}\n */\nfunction addOptions(stylelint, config) {\n\tconst augmentedConfig = {\n\t\t...config,\n\t};\n\n\tif (stylelint._options.ignoreDisables) {\n\t\taugmentedConfig.ignoreDisables = stylelint._options.ignoreDisables;\n\t}\n\n\tif (stylelint._options.quiet) {\n\t\taugmentedConfig.quiet = stylelint._options.quiet;\n\t}\n\n\tif (stylelint._options.reportNeedlessDisables) {\n\t\taugmentedConfig.reportNeedlessDisables = stylelint._options.reportNeedlessDisables;\n\t}\n\n\tif (stylelint._options.reportInvalidScopeDisables) {\n\t\taugmentedConfig.reportInvalidScopeDisables = stylelint._options.reportInvalidScopeDisables;\n\t}\n\n\tif (stylelint._options.reportDescriptionlessDisables) {\n\t\taugmentedConfig.reportDescriptionlessDisables =\n\t\t\tstylelint._options.reportDescriptionlessDisables;\n\t}\n\n\tif (stylelint._options.customSyntax) {\n\t\taugmentedConfig.customSyntax = stylelint._options.customSyntax;\n\t}\n\n\treturn augmentedConfig;\n}\n\nmodule.exports = { augmentConfigExtended, augmentConfigFull, applyOverrides };\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}