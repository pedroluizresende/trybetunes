{"ast":null,"code":"'use strict';\n\nconst assignDisabledRanges = require('./assignDisabledRanges');\n\nconst getOsEol = require('./utils/getOsEol');\n\nconst reportUnknownRuleNames = require('./reportUnknownRuleNames');\n\nconst rules = require('./rules');\n/** @typedef {import('stylelint').LinterOptions} LinterOptions */\n\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n\n/** @typedef {import('stylelint').Config} StylelintConfig */\n\n/**\n * @param {LinterOptions} stylelintOptions\n * @param {PostcssResult} postcssResult\n * @param {StylelintConfig} config\n * @returns {Promise<any>}\n */\n\n\nfunction lintPostcssResult(stylelintOptions, postcssResult, config) {\n  postcssResult.stylelint.ruleSeverities = {};\n  postcssResult.stylelint.customMessages = {};\n  postcssResult.stylelint.ruleMetadata = {};\n  postcssResult.stylelint.stylelintError = false;\n  postcssResult.stylelint.quiet = config.quiet;\n  postcssResult.stylelint.config = config;\n  /** @type {string | undefined} */\n\n  let newline;\n  const postcssDoc = postcssResult.root;\n\n  if (postcssDoc) {\n    if (!('type' in postcssDoc)) {\n      throw new Error('Unexpected Postcss root object!');\n    }\n\n    const newlineMatch = postcssDoc.source && postcssDoc.source.input.css.match(/\\r?\\n/);\n    newline = newlineMatch ? newlineMatch[0] : getOsEol();\n    assignDisabledRanges(postcssDoc, postcssResult);\n  }\n\n  const isFileFixCompatible = isFixCompatible(postcssResult);\n\n  if (!isFileFixCompatible) {\n    postcssResult.stylelint.disableWritingFix = true;\n  }\n\n  const postcssRoots =\n  /** @type {import('postcss').Root[]} */\n  postcssDoc && postcssDoc.constructor.name === 'Document' ? postcssDoc.nodes : [postcssDoc]; // Promises for the rules. Although the rule code runs synchronously now,\n  // the use of Promises makes it compatible with the possibility of async\n  // rules down the line.\n\n  /** @type {Array<Promise<any>>} */\n\n  const performRules = [];\n  const rulesOrder = Object.keys(rules);\n  const ruleNames = config.rules ? Object.keys(config.rules).sort((a, b) => rulesOrder.indexOf(a) - rulesOrder.indexOf(b)) : [];\n\n  for (const ruleName of ruleNames) {\n    const ruleFunction = rules[ruleName] || config.pluginFunctions && config.pluginFunctions[ruleName];\n\n    if (ruleFunction === undefined) {\n      performRules.push(Promise.all(postcssRoots.map(postcssRoot => reportUnknownRuleNames(ruleName, postcssRoot, postcssResult))));\n      continue;\n    }\n\n    const ruleSettings = config.rules && config.rules[ruleName];\n\n    if (ruleSettings === null || ruleSettings[0] === null) {\n      continue;\n    }\n\n    const primaryOption = ruleSettings[0];\n    const secondaryOptions = ruleSettings[1]; // Log the rule's severity in the PostCSS result\n\n    const defaultSeverity = config.defaultSeverity || 'error'; // disableFix in secondary option\n\n    const disableFix = secondaryOptions && secondaryOptions.disableFix === true || false;\n\n    if (disableFix) {\n      postcssResult.stylelint.ruleDisableFix = true;\n    }\n\n    postcssResult.stylelint.ruleSeverities[ruleName] = secondaryOptions && secondaryOptions.severity || defaultSeverity;\n    postcssResult.stylelint.customMessages[ruleName] = secondaryOptions && secondaryOptions.message;\n    postcssResult.stylelint.ruleMetadata[ruleName] = ruleFunction.meta || {};\n    performRules.push(Promise.all(postcssRoots.map(postcssRoot => ruleFunction(primaryOption, secondaryOptions, {\n      fix: !disableFix && stylelintOptions.fix && // Next two conditionals are temporary measures until #2643 is resolved\n      isFileFixCompatible && !postcssResult.stylelint.disabledRanges[ruleName],\n      newline\n    })(postcssRoot, postcssResult))));\n  }\n\n  return Promise.all(performRules);\n}\n/**\n * There are currently some bugs in the autofixer of Stylelint.\n * The autofixer does not yet adhere to stylelint-disable comments, so if there are disabled\n * ranges we can not autofix this document. More info in issue #2643.\n *\n * @param {PostcssResult} postcssResult\n * @returns {boolean}\n */\n\n\nfunction isFixCompatible(_ref) {\n  let {\n    stylelint\n  } = _ref;\n  // Check for issue #2643\n  if (stylelint.disabledRanges.all && stylelint.disabledRanges.all.length) return false;\n  return true;\n}\n\nmodule.exports = lintPostcssResult;","map":{"version":3,"names":["assignDisabledRanges","require","getOsEol","reportUnknownRuleNames","rules","lintPostcssResult","stylelintOptions","postcssResult","config","stylelint","ruleSeverities","customMessages","ruleMetadata","stylelintError","quiet","newline","postcssDoc","root","Error","newlineMatch","source","input","css","match","isFileFixCompatible","isFixCompatible","disableWritingFix","postcssRoots","constructor","name","nodes","performRules","rulesOrder","Object","keys","ruleNames","sort","a","b","indexOf","ruleName","ruleFunction","pluginFunctions","undefined","push","Promise","all","map","postcssRoot","ruleSettings","primaryOption","secondaryOptions","defaultSeverity","disableFix","ruleDisableFix","severity","message","meta","fix","disabledRanges","length","module","exports"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/stylelint/lib/lintPostcssResult.js"],"sourcesContent":["'use strict';\n\nconst assignDisabledRanges = require('./assignDisabledRanges');\nconst getOsEol = require('./utils/getOsEol');\nconst reportUnknownRuleNames = require('./reportUnknownRuleNames');\nconst rules = require('./rules');\n\n/** @typedef {import('stylelint').LinterOptions} LinterOptions */\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').Config} StylelintConfig */\n\n/**\n * @param {LinterOptions} stylelintOptions\n * @param {PostcssResult} postcssResult\n * @param {StylelintConfig} config\n * @returns {Promise<any>}\n */\nfunction lintPostcssResult(stylelintOptions, postcssResult, config) {\n\tpostcssResult.stylelint.ruleSeverities = {};\n\tpostcssResult.stylelint.customMessages = {};\n\tpostcssResult.stylelint.ruleMetadata = {};\n\tpostcssResult.stylelint.stylelintError = false;\n\tpostcssResult.stylelint.quiet = config.quiet;\n\tpostcssResult.stylelint.config = config;\n\n\t/** @type {string | undefined} */\n\tlet newline;\n\tconst postcssDoc = postcssResult.root;\n\n\tif (postcssDoc) {\n\t\tif (!('type' in postcssDoc)) {\n\t\t\tthrow new Error('Unexpected Postcss root object!');\n\t\t}\n\n\t\tconst newlineMatch = postcssDoc.source && postcssDoc.source.input.css.match(/\\r?\\n/);\n\n\t\tnewline = newlineMatch ? newlineMatch[0] : getOsEol();\n\n\t\tassignDisabledRanges(postcssDoc, postcssResult);\n\t}\n\n\tconst isFileFixCompatible = isFixCompatible(postcssResult);\n\n\tif (!isFileFixCompatible) {\n\t\tpostcssResult.stylelint.disableWritingFix = true;\n\t}\n\n\tconst postcssRoots = /** @type {import('postcss').Root[]} */ (\n\t\tpostcssDoc && postcssDoc.constructor.name === 'Document' ? postcssDoc.nodes : [postcssDoc]\n\t);\n\n\t// Promises for the rules. Although the rule code runs synchronously now,\n\t// the use of Promises makes it compatible with the possibility of async\n\t// rules down the line.\n\t/** @type {Array<Promise<any>>} */\n\tconst performRules = [];\n\n\tconst rulesOrder = Object.keys(rules);\n\tconst ruleNames = config.rules\n\t\t? Object.keys(config.rules).sort((a, b) => rulesOrder.indexOf(a) - rulesOrder.indexOf(b))\n\t\t: [];\n\n\tfor (const ruleName of ruleNames) {\n\t\tconst ruleFunction =\n\t\t\trules[ruleName] || (config.pluginFunctions && config.pluginFunctions[ruleName]);\n\n\t\tif (ruleFunction === undefined) {\n\t\t\tperformRules.push(\n\t\t\t\tPromise.all(\n\t\t\t\t\tpostcssRoots.map((postcssRoot) =>\n\t\t\t\t\t\treportUnknownRuleNames(ruleName, postcssRoot, postcssResult),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst ruleSettings = config.rules && config.rules[ruleName];\n\n\t\tif (ruleSettings === null || ruleSettings[0] === null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst primaryOption = ruleSettings[0];\n\t\tconst secondaryOptions = ruleSettings[1];\n\n\t\t// Log the rule's severity in the PostCSS result\n\t\tconst defaultSeverity = config.defaultSeverity || 'error';\n\t\t// disableFix in secondary option\n\t\tconst disableFix = (secondaryOptions && secondaryOptions.disableFix === true) || false;\n\n\t\tif (disableFix) {\n\t\t\tpostcssResult.stylelint.ruleDisableFix = true;\n\t\t}\n\n\t\tpostcssResult.stylelint.ruleSeverities[ruleName] =\n\t\t\t(secondaryOptions && secondaryOptions.severity) || defaultSeverity;\n\t\tpostcssResult.stylelint.customMessages[ruleName] = secondaryOptions && secondaryOptions.message;\n\t\tpostcssResult.stylelint.ruleMetadata[ruleName] = ruleFunction.meta || {};\n\n\t\tperformRules.push(\n\t\t\tPromise.all(\n\t\t\t\tpostcssRoots.map((postcssRoot) =>\n\t\t\t\t\truleFunction(primaryOption, secondaryOptions, {\n\t\t\t\t\t\tfix:\n\t\t\t\t\t\t\t!disableFix &&\n\t\t\t\t\t\t\tstylelintOptions.fix &&\n\t\t\t\t\t\t\t// Next two conditionals are temporary measures until #2643 is resolved\n\t\t\t\t\t\t\tisFileFixCompatible &&\n\t\t\t\t\t\t\t!postcssResult.stylelint.disabledRanges[ruleName],\n\t\t\t\t\t\tnewline,\n\t\t\t\t\t})(postcssRoot, postcssResult),\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t}\n\n\treturn Promise.all(performRules);\n}\n\n/**\n * There are currently some bugs in the autofixer of Stylelint.\n * The autofixer does not yet adhere to stylelint-disable comments, so if there are disabled\n * ranges we can not autofix this document. More info in issue #2643.\n *\n * @param {PostcssResult} postcssResult\n * @returns {boolean}\n */\nfunction isFixCompatible({ stylelint }) {\n\t// Check for issue #2643\n\tif (stylelint.disabledRanges.all && stylelint.disabledRanges.all.length) return false;\n\n\treturn true;\n}\n\nmodule.exports = lintPostcssResult;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}