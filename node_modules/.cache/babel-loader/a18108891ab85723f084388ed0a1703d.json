{"ast":null,"code":"'use strict';\n\nconst {\n  isPlainObject: _isPlainObject\n} = require('is-plain-object');\n/**\n * Checks if the value is a boolean or a Boolean object.\n * @param {unknown} value\n * @returns {value is boolean}\n */\n\n\nfunction isBoolean(value) {\n  return typeof value === 'boolean' || value instanceof Boolean;\n}\n/**\n * Checks if the value is a function or a Function object.\n * @param {unknown} value\n * @returns {value is Function}\n */\n\n\nfunction isFunction(value) {\n  return typeof value === 'function' || value instanceof Function;\n}\n/**\n * Checks if the value is *nullish*.\n * @see https://developer.mozilla.org/en-US/docs/Glossary/Nullish\n * @param {unknown} value\n * @returns {value is null | undefined}\n */\n\n\nfunction isNullish(value) {\n  return value == null;\n}\n/**\n * Checks if the value is a number or a Number object.\n * @param {unknown} value\n * @returns {value is number}\n */\n\n\nfunction isNumber(value) {\n  return typeof value === 'number' || value instanceof Number;\n}\n/**\n * Checks if the value is a regular expression.\n * @param {unknown} value\n * @returns {value is RegExp}\n */\n\n\nfunction isRegExp(value) {\n  return value instanceof RegExp;\n}\n/**\n * Checks if the value is a string or a String object.\n * @param {unknown} value\n * @returns {value is string}\n */\n\n\nfunction isString(value) {\n  return typeof value === 'string' || value instanceof String;\n}\n/**\n * Checks if the value is a plain object.\n * @param {unknown} value\n * @returns {value is Record<string, unknown>}\n */\n\n\nfunction isPlainObject(value) {\n  return _isPlainObject(value);\n}\n/**\n * Assert that the value is truthy.\n * @param {unknown} value\n * @param {string} [message]\n * @returns {asserts value}\n */\n\n\nfunction assert(value) {\n  let message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n  if (message) {\n    // eslint-disable-next-line no-console\n    console.assert(value, message);\n  } else {\n    // eslint-disable-next-line no-console\n    console.assert(value);\n  }\n}\n/**\n * Assert that the value is a function or a Function object.\n * @param {unknown} value\n * @returns {asserts value is Function}\n */\n\n\nfunction assertFunction(value) {\n  // eslint-disable-next-line no-console\n  console.assert(isFunction(value), `\"${value}\" must be a function`);\n}\n/**\n * Assert that the value is a number or a Number object.\n * @param {unknown} value\n * @returns {asserts value is number}\n */\n\n\nfunction assertNumber(value) {\n  // eslint-disable-next-line no-console\n  console.assert(isNumber(value), `\"${value}\" must be a number`);\n}\n/**\n * Assert that the value is a string or a String object.\n * @param {unknown} value\n * @returns {asserts value is string}\n */\n\n\nfunction assertString(value) {\n  // eslint-disable-next-line no-console\n  console.assert(isString(value), `\"${value}\" must be a string`);\n}\n\nmodule.exports = {\n  isBoolean,\n  isFunction,\n  isNullish,\n  isNumber,\n  isRegExp,\n  isString,\n  isPlainObject,\n  assert,\n  assertFunction,\n  assertNumber,\n  assertString\n};","map":{"version":3,"names":["isPlainObject","_isPlainObject","require","isBoolean","value","Boolean","isFunction","Function","isNullish","isNumber","Number","isRegExp","RegExp","isString","String","assert","message","undefined","console","assertFunction","assertNumber","assertString","module","exports"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/stylelint/lib/utils/validateTypes.js"],"sourcesContent":["'use strict';\n\nconst { isPlainObject: _isPlainObject } = require('is-plain-object');\n\n/**\n * Checks if the value is a boolean or a Boolean object.\n * @param {unknown} value\n * @returns {value is boolean}\n */\nfunction isBoolean(value) {\n\treturn typeof value === 'boolean' || value instanceof Boolean;\n}\n\n/**\n * Checks if the value is a function or a Function object.\n * @param {unknown} value\n * @returns {value is Function}\n */\nfunction isFunction(value) {\n\treturn typeof value === 'function' || value instanceof Function;\n}\n\n/**\n * Checks if the value is *nullish*.\n * @see https://developer.mozilla.org/en-US/docs/Glossary/Nullish\n * @param {unknown} value\n * @returns {value is null | undefined}\n */\nfunction isNullish(value) {\n\treturn value == null;\n}\n\n/**\n * Checks if the value is a number or a Number object.\n * @param {unknown} value\n * @returns {value is number}\n */\nfunction isNumber(value) {\n\treturn typeof value === 'number' || value instanceof Number;\n}\n\n/**\n * Checks if the value is a regular expression.\n * @param {unknown} value\n * @returns {value is RegExp}\n */\nfunction isRegExp(value) {\n\treturn value instanceof RegExp;\n}\n\n/**\n * Checks if the value is a string or a String object.\n * @param {unknown} value\n * @returns {value is string}\n */\nfunction isString(value) {\n\treturn typeof value === 'string' || value instanceof String;\n}\n\n/**\n * Checks if the value is a plain object.\n * @param {unknown} value\n * @returns {value is Record<string, unknown>}\n */\nfunction isPlainObject(value) {\n\treturn _isPlainObject(value);\n}\n\n/**\n * Assert that the value is truthy.\n * @param {unknown} value\n * @param {string} [message]\n * @returns {asserts value}\n */\nfunction assert(value, message = undefined) {\n\tif (message) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.assert(value, message);\n\t} else {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.assert(value);\n\t}\n}\n\n/**\n * Assert that the value is a function or a Function object.\n * @param {unknown} value\n * @returns {asserts value is Function}\n */\nfunction assertFunction(value) {\n\t// eslint-disable-next-line no-console\n\tconsole.assert(isFunction(value), `\"${value}\" must be a function`);\n}\n\n/**\n * Assert that the value is a number or a Number object.\n * @param {unknown} value\n * @returns {asserts value is number}\n */\nfunction assertNumber(value) {\n\t// eslint-disable-next-line no-console\n\tconsole.assert(isNumber(value), `\"${value}\" must be a number`);\n}\n\n/**\n * Assert that the value is a string or a String object.\n * @param {unknown} value\n * @returns {asserts value is string}\n */\nfunction assertString(value) {\n\t// eslint-disable-next-line no-console\n\tconsole.assert(isString(value), `\"${value}\" must be a string`);\n}\n\nmodule.exports = {\n\tisBoolean,\n\tisFunction,\n\tisNullish,\n\tisNumber,\n\tisRegExp,\n\tisString,\n\tisPlainObject,\n\n\tassert,\n\tassertFunction,\n\tassertNumber,\n\tassertString,\n};\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA,aAAa,EAAEC;AAAjB,IAAoCC,OAAO,CAAC,iBAAD,CAAjD;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;EACzB,OAAO,OAAOA,KAAP,KAAiB,SAAjB,IAA8BA,KAAK,YAAYC,OAAtD;AACA;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,CAAoBF,KAApB,EAA2B;EAC1B,OAAO,OAAOA,KAAP,KAAiB,UAAjB,IAA+BA,KAAK,YAAYG,QAAvD;AACA;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,SAAT,CAAmBJ,KAAnB,EAA0B;EACzB,OAAOA,KAAK,IAAI,IAAhB;AACA;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASK,QAAT,CAAkBL,KAAlB,EAAyB;EACxB,OAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,YAAYM,MAArD;AACA;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASC,QAAT,CAAkBP,KAAlB,EAAyB;EACxB,OAAOA,KAAK,YAAYQ,MAAxB;AACA;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASC,QAAT,CAAkBT,KAAlB,EAAyB;EACxB,OAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,YAAYU,MAArD;AACA;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASd,aAAT,CAAuBI,KAAvB,EAA8B;EAC7B,OAAOH,cAAc,CAACG,KAAD,CAArB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASW,MAAT,CAAgBX,KAAhB,EAA4C;EAAA,IAArBY,OAAqB,uEAAXC,SAAW;;EAC3C,IAAID,OAAJ,EAAa;IACZ;IACAE,OAAO,CAACH,MAAR,CAAeX,KAAf,EAAsBY,OAAtB;EACA,CAHD,MAGO;IACN;IACAE,OAAO,CAACH,MAAR,CAAeX,KAAf;EACA;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASe,cAAT,CAAwBf,KAAxB,EAA+B;EAC9B;EACAc,OAAO,CAACH,MAAR,CAAeT,UAAU,CAACF,KAAD,CAAzB,EAAmC,IAAGA,KAAM,sBAA5C;AACA;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASgB,YAAT,CAAsBhB,KAAtB,EAA6B;EAC5B;EACAc,OAAO,CAACH,MAAR,CAAeN,QAAQ,CAACL,KAAD,CAAvB,EAAiC,IAAGA,KAAM,oBAA1C;AACA;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASiB,YAAT,CAAsBjB,KAAtB,EAA6B;EAC5B;EACAc,OAAO,CAACH,MAAR,CAAeF,QAAQ,CAACT,KAAD,CAAvB,EAAiC,IAAGA,KAAM,oBAA1C;AACA;;AAEDkB,MAAM,CAACC,OAAP,GAAiB;EAChBpB,SADgB;EAEhBG,UAFgB;EAGhBE,SAHgB;EAIhBC,QAJgB;EAKhBE,QALgB;EAMhBE,QANgB;EAOhBb,aAPgB;EAShBe,MATgB;EAUhBI,cAVgB;EAWhBC,YAXgB;EAYhBC;AAZgB,CAAjB"},"metadata":{},"sourceType":"script"}