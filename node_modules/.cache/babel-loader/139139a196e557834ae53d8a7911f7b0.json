{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nclass Position {\n  constructor(line, col, index) {\n    this.line = void 0;\n    this.column = void 0;\n    this.index = void 0;\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n\n}\n\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n\n}\n\nfunction createPositionWithColumnOffset(position, columnOffset) {\n  const {\n    line,\n    column,\n    index\n  } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n\nvar ParseErrorCode = {\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n};\n\nconst reflect = function (keys) {\n  let last = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : keys.length - 1;\n  return {\n    get() {\n      return keys.reduce((object, key) => object[key], this);\n    },\n\n    set(value) {\n      keys.reduce((item, key, i) => i === last ? item[key] = value : item[key], this);\n    }\n\n  };\n};\n\nconst instantiate = (constructor, properties, descriptors) => Object.keys(descriptors).map(key => [key, descriptors[key]]).filter(_ref3 => {\n  let [, descriptor] = _ref3;\n  return !!descriptor;\n}).map(_ref4 => {\n  let [key, descriptor] = _ref4;\n  return [key, typeof descriptor === \"function\" ? {\n    value: descriptor,\n    enumerable: false\n  } : typeof descriptor.reflect === \"string\" ? Object.assign({}, descriptor, reflect(descriptor.reflect.split(\".\"))) : descriptor];\n}).reduce((instance, _ref5) => {\n  let [key, descriptor] = _ref5;\n  return Object.defineProperty(instance, key, Object.assign({\n    configurable: true\n  }, descriptor));\n}, Object.assign(new constructor(), properties));\n\nvar ModuleErrors = {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError\n  }\n};\nconst NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\"\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\"\n};\n\nconst toNodeDescription = _ref6 => {\n  let {\n    type,\n    prefix\n  } = _ref6;\n  return type === \"UpdateExpression\" ? NodeDescriptions.UpdateExpression[String(prefix)] : NodeDescriptions[type];\n};\n\nvar StandardErrors = {\n  AccessorIsGenerator: _ref7 => {\n    let {\n      kind\n    } = _ref7;\n    return `A ${kind}ter cannot be a generator.`;\n  },\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock: \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter: \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n  BadSetterRestParameter: \"A 'set' accesor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: _ref8 => {\n    let {\n      kind\n    } = _ref8;\n    return `Missing initializer in ${kind} declaration.`;\n  },\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: _ref9 => {\n    let {\n      exportName\n    } = _ref9;\n    return `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`;\n  },\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: _ref10 => {\n    let {\n      localName,\n      exportName\n    } = _ref10;\n    return `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`;\n  },\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'.\",\n  ForInOfLoopInitializer: _ref11 => {\n    let {\n      type\n    } = _ref11;\n    return `'${type === \"ForInStatement\" ? \"for-in\" : \"for-of\"}' loop variable declaration may not have an initializer.`;\n  },\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block.\",\n  IllegalBreakContinue: _ref12 => {\n    let {\n      type\n    } = _ref12;\n    return `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`;\n  },\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: _ref13 => {\n    let {\n      importName\n    } = _ref13;\n    return `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`;\n  },\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: _ref14 => {\n    let {\n      maxArgumentCount\n    } = _ref14;\n    return `\\`import()\\` requires exactly ${maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"}.`;\n  },\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault: \"A JSON module can only be imported with `default`.\",\n  IncompatibleRegExpUVFlags: \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: _ref15 => {\n    let {\n      radix\n    } = _ref15;\n    return `Expected number in radix ${radix}.`;\n  },\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: _ref16 => {\n    let {\n      reservedWord\n    } = _ref16;\n    return `Escape sequence in keyword ${reservedWord}.`;\n  },\n  InvalidIdentifier: _ref17 => {\n    let {\n      identifierName\n    } = _ref17;\n    return `Invalid identifier ${identifierName}.`;\n  },\n  InvalidLhs: _ref18 => {\n    let {\n      ancestor\n    } = _ref18;\n    return `Invalid left-hand side in ${toNodeDescription(ancestor)}.`;\n  },\n  InvalidLhsBinding: _ref19 => {\n    let {\n      ancestor\n    } = _ref19;\n    return `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`;\n  },\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: _ref20 => {\n    let {\n      unexpected\n    } = _ref20;\n    return `Unexpected character '${unexpected}'.`;\n  },\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: _ref21 => {\n    let {\n      identifierName\n    } = _ref21;\n    return `Private name #${identifierName} is not defined.`;\n  },\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: _ref22 => {\n    let {\n      labelName\n    } = _ref22;\n    return `Label '${labelName}' is already declared.`;\n  },\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: _ref23 => {\n    let {\n      missingPlugin\n    } = _ref23;\n    return `This experimental syntax requires enabling the parser plugin: ${missingPlugin.map(name => JSON.stringify(name)).join(\", \")}.`;\n  },\n  MissingOneOfPlugins: _ref24 => {\n    let {\n      missingPlugin\n    } = _ref24;\n    return `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin.map(name => JSON.stringify(name)).join(\", \")}.`;\n  },\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: _ref25 => {\n    let {\n      key\n    } = _ref25;\n    return `Duplicate key \"${key}\" is not allowed in module attributes.`;\n  },\n  ModuleExportNameHasLoneSurrogate: _ref26 => {\n    let {\n      surrogateCharCode\n    } = _ref26;\n    return `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(16)}'.`;\n  },\n  ModuleExportUndefined: _ref27 => {\n    let {\n      localName\n    } = _ref27;\n    return `Export '${localName}' is not defined.`;\n  },\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar: \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor: \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: _ref28 => {\n    let {\n      identifierName\n    } = _ref28;\n    return `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`;\n  },\n  PrivateNameRedeclaration: _ref29 => {\n    let {\n      identifierName\n    } = _ref29;\n    return `Duplicate private name #${identifierName}.`;\n  },\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed: \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: _ref30 => {\n    let {\n      keyword\n    } = _ref30;\n    return `Unexpected keyword '${keyword}'.`;\n  },\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget: \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: _ref31 => {\n    let {\n      reservedWord\n    } = _ref31;\n    return `Unexpected reserved word '${reservedWord}'.`;\n  },\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: _ref32 => {\n    let {\n      expected,\n      unexpected\n    } = _ref32;\n    return `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${expected ? `, expected \"${expected}\"` : \"\"}`;\n  },\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: _ref33 => {\n    let {\n      target,\n      onlyValidPropertyName\n    } = _ref33;\n    return `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`;\n  },\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper: \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  VarRedeclaration: _ref34 => {\n    let {\n      identifierName\n    } = _ref34;\n    return `Identifier '${identifierName}' has already been declared.`;\n  },\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0.\"\n};\nvar StrictModeErrors = {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n  StrictEvalArguments: _ref35 => {\n    let {\n      referenceName\n    } = _ref35;\n    return `Assigning to '${referenceName}' in strict mode.`;\n  },\n  StrictEvalArgumentsBinding: _ref36 => {\n    let {\n      bindingName\n    } = _ref36;\n    return `Binding '${bindingName}' in strict mode.`;\n  },\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n  StrictWith: \"'with' in strict mode.\"\n};\nconst UnparenthesizedPipeBodyDescriptions = new Set([\"ArrowFunctionExpression\", \"AssignmentExpression\", \"ConditionalExpression\", \"YieldExpression\"]);\nvar PipelineOperatorErrors = {\n  PipeBodyIsTighter: \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound: \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: _ref37 => {\n    let {\n      token\n    } = _ref37;\n    return `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`;\n  },\n  PipeTopicUnused: \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: _ref38 => {\n    let {\n      type\n    } = _ref38;\n    return `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type\n    })}; please wrap it in parentheses.`;\n  },\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.'\n};\nconst _excluded$1 = [\"toMessage\"],\n      _excluded2$1 = [\"message\"];\n\nfunction toParseErrorConstructor(_ref) {\n  let {\n    toMessage\n  } = _ref,\n      properties = _objectWithoutPropertiesLoose(_ref, _excluded$1);\n\n  return function constructor(_ref39) {\n    let {\n      loc,\n      details\n    } = _ref39;\n    return instantiate(SyntaxError, Object.assign({}, properties, {\n      loc\n    }), {\n      clone() {\n        let overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        const loc = overrides.loc || {};\n        return constructor({\n          loc: new Position(\"line\" in loc ? loc.line : this.loc.line, \"column\" in loc ? loc.column : this.loc.column, \"index\" in loc ? loc.index : this.loc.index),\n          details: Object.assign({}, this.details, overrides.details)\n        });\n      },\n\n      details: {\n        value: details,\n        enumerable: false\n      },\n      message: {\n        get() {\n          return `${toMessage(this.details)} (${this.loc.line}:${this.loc.column})`;\n        },\n\n        set(value) {\n          Object.defineProperty(this, \"message\", {\n            value\n          });\n        }\n\n      },\n      pos: {\n        reflect: \"loc.index\",\n        enumerable: true\n      },\n      missingPlugin: \"missingPlugin\" in details && {\n        reflect: \"details.missingPlugin\",\n        enumerable: true\n      }\n    });\n  };\n}\n\nfunction ParseErrorEnum(argument, syntaxPlugin) {\n  if (Array.isArray(argument)) {\n    return parseErrorTemplates => ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n\n  const ParseErrorConstructors = {};\n\n  for (const reasonCode of Object.keys(argument)) {\n    const template = argument[reasonCode];\n\n    const _ref2 = typeof template === \"string\" ? {\n      message: () => template\n    } : typeof template === \"function\" ? {\n      message: template\n    } : template,\n          {\n      message\n    } = _ref2,\n          rest = _objectWithoutPropertiesLoose(_ref2, _excluded2$1);\n\n    const toMessage = typeof message === \"string\" ? () => message : message;\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor(Object.assign({\n      code: ParseErrorCode.SyntaxError,\n      reasonCode,\n      toMessage\n    }, syntaxPlugin ? {\n      syntaxPlugin\n    } : {}, rest));\n  }\n\n  return ParseErrorConstructors;\n}\n\nconst Errors = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum(StrictModeErrors), ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors));\nconst {\n  defineProperty\n} = Object;\n\nconst toUnenumerable = (object, key) => defineProperty(object, key, {\n  enumerable: false,\n  value: object[key]\n});\n\nfunction toESTreeLocation(node) {\n  node.loc.start && toUnenumerable(node.loc.start, \"index\");\n  node.loc.end && toUnenumerable(node.loc.end, \"index\");\n  return node;\n}\n\nvar estree = superClass => class ESTreeParserMixin extends superClass {\n  parse() {\n    const file = toESTreeLocation(super.parse());\n\n    if (this.options.tokens) {\n      file.tokens = file.tokens.map(toESTreeLocation);\n    }\n\n    return file;\n  }\n\n  parseRegExpLiteral(_ref40) {\n    let {\n      pattern,\n      flags\n    } = _ref40;\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  parseBigIntLiteral(value) {\n    let bigInt;\n\n    try {\n      bigInt = BigInt(value);\n    } catch (_unused) {\n      bigInt = null;\n    }\n\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  parseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  parseStringLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNumericLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNullLiteral() {\n    return this.estreeParseLiteral(null);\n  }\n\n  parseBooleanLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.extra.expressionValue;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    super.parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parsePrivateName() {\n    const node = super.parsePrivateName();\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return node;\n      }\n    }\n    return this.convertPrivateNameToPrivateIdentifier(node);\n  }\n\n  convertPrivateNameToPrivateIdentifier(node) {\n    const name = super.getPrivateNameSV(node);\n    node = node;\n    delete node.id;\n    node.name = name;\n    node.type = \"PrivateIdentifier\";\n    return node;\n  }\n\n  isPrivateName(node) {\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.isPrivateName(node);\n      }\n    }\n    return node.type === \"PrivateIdentifier\";\n  }\n\n  getPrivateNameSV(node) {\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.getPrivateNameSV(node);\n      }\n    }\n    return node.name;\n  }\n\n  parseLiteral(value, type) {\n    const node = super.parseLiteral(value, type);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n    let inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n\n    if (type === \"ClassPrivateMethod\") {\n      node.computed = false;\n    }\n\n    return this.finishNode(node, \"MethodDefinition\");\n  }\n\n  parseClassProperty() {\n    const propertyNode = super.parseClassProperty(...arguments);\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return propertyNode;\n      }\n    }\n    propertyNode.type = \"PropertyDefinition\";\n    return propertyNode;\n  }\n\n  parseClassPrivateProperty() {\n    const propertyNode = super.parseClassPrivateProperty(...arguments);\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return propertyNode;\n      }\n    }\n    propertyNode.type = \"PropertyDefinition\";\n    propertyNode.computed = false;\n    return propertyNode;\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n\n    if (node) {\n      node.type = \"Property\";\n\n      if (node.kind === \"method\") {\n        node.kind = \"init\";\n      }\n\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  isValidLVal(type, isUnparenthesizedInAssign, binding) {\n    return type === \"Property\" ? \"value\" : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n  }\n\n  isAssignable(node, isBinding) {\n    if (node != null && this.isObjectProperty(node)) {\n      return this.isAssignable(node.value, isBinding);\n    }\n\n    return super.isAssignable(node, isBinding);\n  }\n\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (node != null && this.isObjectProperty(node)) {\n      const {\n        key,\n        value\n      } = node;\n\n      if (this.isPrivateName(key)) {\n        this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);\n      }\n\n      this.toAssignable(value, isLHS);\n    } else {\n      super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      this.raise(Errors.PatternHasAccessor, {\n        at: prop.key\n      });\n    } else if (prop.method) {\n      this.raise(Errors.PatternHasMethod, {\n        at: prop.key\n      });\n    } else {\n      super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n    }\n  }\n\n  finishCallExpression(unfinished, optional) {\n    const node = super.finishCallExpression(unfinished, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        var _node$arguments$;\n\n        node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;\n      }\n\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedArguments(node) {\n    if (node.type === \"ImportExpression\") {\n      return;\n    }\n\n    super.toReferencedArguments(node);\n  }\n\n  parseExport(unfinished) {\n    const node = super.parseExport(unfinished);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n\n    return node;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    if (node.type === \"ChainExpression\") {\n      node = node.expression;\n    }\n\n    return super.hasPropertyAsPrivateName(node);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"ChainExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n  }\n\n  isObjectMethod(node) {\n    return node.method || node.kind === \"get\" || node.kind === \"set\";\n  }\n\n  finishNodeAt(node, type, endLoc) {\n    return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    super.resetStartLocation(node, start, startLoc);\n    toESTreeLocation(node);\n  }\n\n  resetEndLocation(node) {\n    let endLoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.lastTokEndLoc;\n    super.resetEndLocation(node, endLoc);\n    toESTreeLocation(node);\n  }\n\n};\n\nclass TokContext {\n  constructor(token, preserveSpace) {\n    this.token = void 0;\n    this.preserveSpace = void 0;\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n}\n\nconst types = {\n  brace: new TokContext(\"{\"),\n  j_oTag: new TokContext(\"<tag\"),\n  j_cTag: new TokContext(\"</tag\"),\n  j_expr: new TokContext(\"<tag>...</tag>\", true)\n};\n{\n  types.template = new TokContext(\"`\", true);\n}\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\nclass ExportedTokenType {\n  constructor(label) {\n    let conf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    {\n      this.updateContext = null;\n    }\n  }\n\n}\n\nconst keywords$1 = new Map();\n\nfunction createKeyword(name) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords$1.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return createToken(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nlet tokenTypeCounter = -1;\nconst tokenTypes = [];\nconst tokenLabels = [];\nconst tokenBinops = [];\nconst tokenBeforeExprs = [];\nconst tokenStartsExprs = [];\nconst tokenPrefixes = [];\n\nfunction createToken(name) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;\n\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);\n  tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);\n  tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);\n  tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(name) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;\n\n  ++tokenTypeCounter;\n  keywords$1.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1);\n  tokenBeforeExprs.push((_options$beforeExpr2 = options.beforeExpr) != null ? _options$beforeExpr2 : false);\n  tokenStartsExprs.push((_options$startsExpr2 = options.startsExpr) != null ? _options$startsExpr2 : false);\n  tokenPrefixes.push((_options$prefix2 = options.prefix) != null ? _options$prefix2 : false);\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n  return tokenTypeCounter;\n}\n\nconst tt = {\n  bracketL: createToken(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: createToken(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: createToken(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: createToken(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: createToken(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", {\n    beforeExpr\n  }),\n  semi: createToken(\";\", {\n    beforeExpr\n  }),\n  colon: createToken(\":\", {\n    beforeExpr\n  }),\n  doubleColon: createToken(\"::\", {\n    beforeExpr\n  }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", {\n    beforeExpr\n  }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", {\n    beforeExpr\n  }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", {\n    beforeExpr\n  }),\n  backQuote: createToken(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: createToken(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  templateTail: createToken(\"...`\", {\n    startsExpr\n  }),\n  templateNonTail: createToken(\"...${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: createToken(\"#!...\"),\n  eq: createToken(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  slashAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  xorAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  moduloAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: createToken(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: createToken(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: createToken(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  doubleCaret: createToken(\"^^\", {\n    startsExpr\n  }),\n  doubleAt: createToken(\"@@\", {\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: createToken(\"%\", {\n    binop: 10,\n    startsExpr\n  }),\n  star: createToken(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _as: createKeywordLike(\"as\", {\n    startsExpr\n  }),\n  _assert: createKeywordLike(\"assert\", {\n    startsExpr\n  }),\n  _async: createKeywordLike(\"async\", {\n    startsExpr\n  }),\n  _await: createKeywordLike(\"await\", {\n    startsExpr\n  }),\n  _from: createKeywordLike(\"from\", {\n    startsExpr\n  }),\n  _get: createKeywordLike(\"get\", {\n    startsExpr\n  }),\n  _let: createKeywordLike(\"let\", {\n    startsExpr\n  }),\n  _meta: createKeywordLike(\"meta\", {\n    startsExpr\n  }),\n  _of: createKeywordLike(\"of\", {\n    startsExpr\n  }),\n  _sent: createKeywordLike(\"sent\", {\n    startsExpr\n  }),\n  _set: createKeywordLike(\"set\", {\n    startsExpr\n  }),\n  _static: createKeywordLike(\"static\", {\n    startsExpr\n  }),\n  _yield: createKeywordLike(\"yield\", {\n    startsExpr\n  }),\n  _asserts: createKeywordLike(\"asserts\", {\n    startsExpr\n  }),\n  _checks: createKeywordLike(\"checks\", {\n    startsExpr\n  }),\n  _exports: createKeywordLike(\"exports\", {\n    startsExpr\n  }),\n  _global: createKeywordLike(\"global\", {\n    startsExpr\n  }),\n  _implements: createKeywordLike(\"implements\", {\n    startsExpr\n  }),\n  _intrinsic: createKeywordLike(\"intrinsic\", {\n    startsExpr\n  }),\n  _infer: createKeywordLike(\"infer\", {\n    startsExpr\n  }),\n  _is: createKeywordLike(\"is\", {\n    startsExpr\n  }),\n  _mixins: createKeywordLike(\"mixins\", {\n    startsExpr\n  }),\n  _proto: createKeywordLike(\"proto\", {\n    startsExpr\n  }),\n  _require: createKeywordLike(\"require\", {\n    startsExpr\n  }),\n  _keyof: createKeywordLike(\"keyof\", {\n    startsExpr\n  }),\n  _readonly: createKeywordLike(\"readonly\", {\n    startsExpr\n  }),\n  _unique: createKeywordLike(\"unique\", {\n    startsExpr\n  }),\n  _abstract: createKeywordLike(\"abstract\", {\n    startsExpr\n  }),\n  _declare: createKeywordLike(\"declare\", {\n    startsExpr\n  }),\n  _enum: createKeywordLike(\"enum\", {\n    startsExpr\n  }),\n  _module: createKeywordLike(\"module\", {\n    startsExpr\n  }),\n  _namespace: createKeywordLike(\"namespace\", {\n    startsExpr\n  }),\n  _interface: createKeywordLike(\"interface\", {\n    startsExpr\n  }),\n  _type: createKeywordLike(\"type\", {\n    startsExpr\n  }),\n  _opaque: createKeywordLike(\"opaque\", {\n    startsExpr\n  }),\n  name: createToken(\"name\", {\n    startsExpr\n  }),\n  string: createToken(\"string\", {\n    startsExpr\n  }),\n  num: createToken(\"num\", {\n    startsExpr\n  }),\n  bigint: createToken(\"bigint\", {\n    startsExpr\n  }),\n  decimal: createToken(\"decimal\", {\n    startsExpr\n  }),\n  regexp: createToken(\"regexp\", {\n    startsExpr\n  }),\n  privateName: createToken(\"#name\", {\n    startsExpr\n  }),\n  eof: createToken(\"eof\"),\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", {\n    beforeExpr: true\n  }),\n  jsxTagStart: createToken(\"jsxTagStart\", {\n    startsExpr: true\n  }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n  placeholder: createToken(\"%%\", {\n    startsExpr: true\n  })\n};\n\nfunction tokenIsIdentifier(token) {\n  return token >= 93 && token <= 128;\n}\n\nfunction tokenKeywordOrIdentifierIsKeyword(token) {\n  return token <= 92;\n}\n\nfunction tokenIsKeywordOrIdentifier(token) {\n  return token >= 58 && token <= 128;\n}\n\nfunction tokenIsLiteralPropertyName(token) {\n  return token >= 58 && token <= 132;\n}\n\nfunction tokenComesBeforeExpression(token) {\n  return tokenBeforeExprs[token];\n}\n\nfunction tokenCanStartExpression(token) {\n  return tokenStartsExprs[token];\n}\n\nfunction tokenIsAssignment(token) {\n  return token >= 29 && token <= 33;\n}\n\nfunction tokenIsFlowInterfaceOrTypeOrOpaque(token) {\n  return token >= 125 && token <= 127;\n}\n\nfunction tokenIsLoop(token) {\n  return token >= 90 && token <= 92;\n}\n\nfunction tokenIsKeyword(token) {\n  return token >= 58 && token <= 92;\n}\n\nfunction tokenIsOperator(token) {\n  return token >= 39 && token <= 59;\n}\n\nfunction tokenIsPostfix(token) {\n  return token === 34;\n}\n\nfunction tokenIsPrefix(token) {\n  return tokenPrefixes[token];\n}\n\nfunction tokenIsTSTypeOperator(token) {\n  return token >= 117 && token <= 119;\n}\n\nfunction tokenIsTSDeclarationStart(token) {\n  return token >= 120 && token <= 126;\n}\n\nfunction tokenLabelName(token) {\n  return tokenLabels[token];\n}\n\nfunction tokenOperatorPrecedence(token) {\n  return tokenBinops[token];\n}\n\nfunction tokenIsRightAssociative(token) {\n  return token === 57;\n}\n\nfunction tokenIsTemplate(token) {\n  return token >= 24 && token <= 25;\n}\n\nfunction getExportedToken(token) {\n  return tokenTypes[token];\n}\n\n{\n  tokenTypes[8].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = context => {\n    context.push(types.brace);\n  };\n\n  tokenTypes[22].updateContext = context => {\n    if (context[context.length - 1] === types.template) {\n      context.pop();\n    } else {\n      context.push(types.template);\n    }\n  };\n\n  tokenTypes[138].updateContext = context => {\n    context.push(types.j_expr, types.j_oTag);\n  };\n}\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\n\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\n\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\n\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\n\nfunction isIteratorStart(current, next, next2) {\n  return current === 64 && next === 64 && isIdentifierStart(next2);\n}\n\nconst reservedWordLikeSet = new Set([\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\", \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"eval\", \"arguments\", \"enum\", \"await\"]);\n\nfunction canBeReservedWord(word) {\n  return reservedWordLikeSet.has(word);\n}\n\nconst SCOPE_OTHER = 0b000000000,\n      SCOPE_PROGRAM = 0b000000001,\n      SCOPE_FUNCTION = 0b000000010,\n      SCOPE_ARROW = 0b000000100,\n      SCOPE_SIMPLE_CATCH = 0b000001000,\n      SCOPE_SUPER = 0b000010000,\n      SCOPE_DIRECT_SUPER = 0b000100000,\n      SCOPE_CLASS = 0b001000000,\n      SCOPE_STATIC_BLOCK = 0b010000000,\n      SCOPE_TS_MODULE = 0b100000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b000000000001,\n      BIND_KIND_TYPE = 0b000000000010,\n      BIND_SCOPE_VAR = 0b000000000100,\n      BIND_SCOPE_LEXICAL = 0b000000001000,\n      BIND_SCOPE_FUNCTION = 0b000000010000,\n      BIND_FLAGS_NONE = 0b000001000000,\n      BIND_FLAGS_CLASS = 0b000010000000,\n      BIND_FLAGS_TS_ENUM = 0b000100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b001000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b010000000000,\n      BIND_FLAGS_FLOW_DECLARE_FN = 0b100000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(pluginConfig) {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n\n      const actualOptions = this.plugins.get(pluginName);\n\n      for (const key of Object.keys(pluginOptions)) {\n        if ((actualOptions == null ? void 0 : actualOptions[key]) !== pluginOptions[key]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }\n\n  getPluginOption(plugin, name) {\n    var _this$plugins$get;\n\n    return (_this$plugins$get = this.plugins.get(plugin)) == null ? void 0 : _this$plugins$get[name];\n  }\n\n}\n\nfunction setTrailingComments(node, comments) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\nfunction setLeadingComments(node, comments) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\nfunction setInnerComments(node, comments) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\nfunction adjustInnerComments(node, elements, commentWS) {\n  let lastElement = null;\n  let i = elements.length;\n\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  processComment(node) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const {\n      start: nodeStart\n    } = node;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n\n      if (commentEnd > nodeStart) {\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n\n        break;\n      }\n    }\n  }\n\n  finalizeComment(commentWS) {\n    const {\n      comments\n    } = commentWS;\n\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      const {\n        containingNode: node,\n        start: commentStart\n      } = commentWS;\n\n      if (this.input.charCodeAt(commentStart - 1) === 44) {\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n\n          default:\n            {\n              setInnerComments(node, comments);\n            }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  finalizeRemainingComments() {\n    const {\n      commentStack\n    } = this.state;\n\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n\n    this.state.commentStack = [];\n  }\n\n  resetPreviousNodeTrailingComments(node) {\n    const {\n      commentStack\n    } = this.state;\n    const {\n      length\n    } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  takeSurroundingComments(node, start, end) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n\n}\n\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nconst skipWhiteSpaceInLine = /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\nconst skipWhiteSpaceToLineBreak = new RegExp(\"(?=(\" + skipWhiteSpaceInLine.source + \"))\\\\1\" + /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source, \"y\");\n\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass State {\n  constructor() {\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.lineStart = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.hasFlowComment = false;\n    this.isAmbientContext = false;\n    this.inAbstractClass = false;\n    this.inDisallowConditionalTypesContext = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.comments = [];\n    this.commentStack = [];\n    this.pos = 0;\n    this.type = 135;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.context = [types.brace];\n    this.canStartJSXElement = true;\n    this.containsEsc = false;\n    this.strictErrors = new Map();\n    this.tokensLength = 0;\n  }\n\n  init(_ref41) {\n    let {\n      strictMode,\n      sourceType,\n      startLine,\n      startColumn\n    } = _ref41;\n    this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === \"module\";\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set([46, 66, 69, 79, 95, 98, 101, 111]),\n  hex: new Set([46, 88, 95, 120])\n};\nconst isAllowedNumericSeparatorSibling = {\n  bin: ch => ch === 48 || ch === 49,\n  oct: ch => ch >= 48 && ch <= 55,\n  dec: ch => ch >= 48 && ch <= 57,\n  hex: ch => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102\n};\n\nfunction readStringContents(type, input, pos, lineStart, curLine, errors) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n  let out = \"\";\n  let containsInvalid = false;\n  let chunkStart = pos;\n  const {\n    length\n  } = input;\n\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n\n    const ch = input.charCodeAt(pos);\n\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n\n    if (ch === 92) {\n      out += input.slice(chunkStart, pos);\n      let escaped;\n      ({\n        ch: escaped,\n        pos,\n        lineStart,\n        curLine\n      } = readEscapedChar(input, pos, lineStart, curLine, type === \"template\", errors));\n\n      if (escaped === null) {\n        containsInvalid = true;\n      } else {\n        out += escaped;\n      }\n\n      chunkStart = pos;\n    } else if (ch === 8232 || ch === 8233) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === 10 || ch === 13) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n\n        if (ch === 13 && input.charCodeAt(pos) === 10) {\n          ++pos;\n        }\n\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n\n  return {\n    pos,\n    str: out,\n    containsInvalid,\n    lineStart,\n    curLine\n  };\n}\n\nfunction isStringEnd(type, ch, input, pos) {\n  if (type === \"template\") {\n    return ch === 96 || ch === 36 && input.charCodeAt(pos + 1) === 123;\n  }\n\n  return ch === (type === \"double\" ? 34 : 39);\n}\n\nfunction readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {\n  const throwOnInvalid = !inTemplate;\n  pos++;\n\n  const res = ch => ({\n    pos,\n    ch,\n    lineStart,\n    curLine\n  });\n\n  const ch = input.charCodeAt(pos++);\n\n  switch (ch) {\n    case 110:\n      return res(\"\\n\");\n\n    case 114:\n      return res(\"\\r\");\n\n    case 120:\n      {\n        let code;\n        ({\n          code,\n          pos\n        } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors));\n        return res(code === null ? null : String.fromCharCode(code));\n      }\n\n    case 117:\n      {\n        let code;\n        ({\n          code,\n          pos\n        } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors));\n        return res(code === null ? null : String.fromCodePoint(code));\n      }\n\n    case 116:\n      return res(\"\\t\");\n\n    case 98:\n      return res(\"\\b\");\n\n    case 118:\n      return res(\"\\u000b\");\n\n    case 102:\n      return res(\"\\f\");\n\n    case 13:\n      if (input.charCodeAt(pos) === 10) {\n        ++pos;\n      }\n\n    case 10:\n      lineStart = pos;\n      ++curLine;\n\n    case 8232:\n    case 8233:\n      return res(\"\");\n\n    case 56:\n    case 57:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n\n    default:\n      if (ch >= 48 && ch <= 55) {\n        const startPos = pos - 1;\n        const match = input.slice(startPos, pos + 2).match(/^[0-7]+/);\n        let octalStr = match[0];\n        let octal = parseInt(octalStr, 8);\n\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n\n        if (octalStr !== \"0\" || next === 56 || next === 57) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\nfunction readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {\n  const initialPos = pos;\n  let n;\n  ({\n    n,\n    pos\n  } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors));\n\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n\n  return {\n    code: n,\n    pos\n  };\n}\n\nfunction readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors) {\n  const start = pos;\n  const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === 95 && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      ++pos;\n      continue;\n    }\n\n    if (code >= 97) {\n      val = code - 97 + 10;\n    } else if (code >= 65) {\n      val = code - 65 + 10;\n    } else if (_isDigit(code)) {\n      val = code - 48;\n    } else {\n      val = Infinity;\n    }\n\n    if (val >= radix) {\n      if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n\n    ++pos;\n    total = total * radix + val;\n  }\n\n  if (pos === start || len != null && pos - start !== len || invalid) {\n    return {\n      n: null,\n      pos\n    };\n  }\n\n  return {\n    n: total,\n    pos\n  };\n}\n\nfunction readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === 123) {\n    ++pos;\n    ({\n      code,\n      pos\n    } = readHexChar(input, pos, lineStart, curLine, input.indexOf(\"}\", pos) - pos, true, throwOnInvalid, errors));\n    ++pos;\n\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return {\n          code: null,\n          pos\n        };\n      }\n    }\n  } else {\n    ({\n      code,\n      pos\n    } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));\n  }\n\n  return {\n    code,\n    pos\n  };\n}\n\nconst _excluded = [\"at\"],\n      _excluded2 = [\"at\"];\n\nfunction buildPosition(pos, lineStart, curLine) {\n  return new Position(curLine, pos - lineStart, pos);\n}\n\nconst VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100, 118]);\n\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\n\nclass Tokenizer extends CommentsParser {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.errorHandlers_readInt = {\n      invalidDigit: (pos, lineStart, curLine, radix) => {\n        if (!this.options.errorRecovery) return false;\n        this.raise(Errors.InvalidDigit, {\n          at: buildPosition(pos, lineStart, curLine),\n          radix\n        });\n        return true;\n      },\n      numericSeparatorInEscapeSequence: this.errorBuilder(Errors.NumericSeparatorInEscapeSequence),\n      unexpectedNumericSeparator: this.errorBuilder(Errors.UnexpectedNumericSeparator)\n    };\n    this.errorHandlers_readCodePoint = Object.assign({}, this.errorHandlers_readInt, {\n      invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n      invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint)\n    });\n    this.errorHandlers_readStringContents_string = Object.assign({}, this.errorHandlers_readCodePoint, {\n      strictNumericEscape: (pos, lineStart, curLine) => {\n        this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n          at: buildPosition(pos, lineStart, curLine)\n        });\n      },\n      unterminated: (pos, lineStart, curLine) => {\n        throw this.raise(Errors.UnterminatedString, {\n          at: buildPosition(pos - 1, lineStart, curLine)\n        });\n      }\n    });\n    this.errorHandlers_readStringContents_template = Object.assign({}, this.errorHandlers_readCodePoint, {\n      strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n      unterminated: (pos, lineStart, curLine) => {\n        throw this.raise(Errors.UnterminatedTemplate, {\n          at: buildPosition(pos, lineStart, curLine)\n        });\n      }\n    });\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    this.checkKeywordEscapes();\n\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  createLookaheadState(state) {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition\n    };\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = this.createLookaheadState(old);\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos) {\n    let cp = this.input.charCodeAt(pos);\n\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n\n    return cp;\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n\n    if (strict) {\n      this.state.strictErrors.forEach(_ref42 => {\n        let [toParseError, at] = _ref42;\n        return this.raise(toParseError, {\n          at\n        });\n      });\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(135);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  skipBlockComment() {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n\n    if (end === -1) {\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition()\n      });\n    }\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    if (this.isLookahead) return;\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipSpace() {\n    const spaceStart = this.state.pos;\n    const comments = [];\n\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              {\n                const comment = this.skipBlockComment();\n\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n\n                break;\n              }\n\n            case 47:\n              {\n                const comment = this.skipLineComment(2);\n\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n\n                break;\n              }\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === 45 && !this.inModule) {\n            const pos = this.state.pos;\n\n            if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {\n              const comment = this.skipLineComment(3);\n\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === 60 && !this.inModule) {\n            const pos = this.state.pos;\n\n            if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {\n              const comment = this.skipLineComment(4);\n\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type) {\n    this.state.type = type;\n    this.updateContext();\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition()\n      });\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(next === 123 ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType, {\n          at: this.state.curPosition()\n        });\n      }\n\n      this.state.pos += 2;\n\n      if (next === 123) {\n        this.finishToken(7);\n      } else {\n        this.finishToken(1);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(134, this.readWord1(next));\n    } else if (next === 92) {\n      ++this.state.pos;\n      this.finishToken(134, this.readWord1());\n    } else {\n      this.finishOp(27, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(21);\n    } else {\n      ++this.state.pos;\n      this.finishToken(16);\n    }\n  }\n\n  readToken_slash() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(31, 2);\n    } else {\n      this.finishOp(56, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(28, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? 55 : 54;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = 57;\n    }\n\n    if (next === 61 && !this.state.inType) {\n      width++;\n      type = code === 37 ? 33 : 30;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(30, 3);\n      } else {\n        this.finishOp(code === 124 ? 41 : 42, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(39, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition()\n          });\n        }\n\n        this.state.pos += 2;\n        this.finishToken(9);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition()\n          });\n        }\n\n        this.state.pos += 2;\n        this.finishToken(4);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(30, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? 43 : 45, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61 && !this.state.inType) {\n      this.finishOp(32, 2);\n    } else if (next === 94 && this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"hack\",\n      topicToken: \"^^\"\n    }])) {\n      this.finishOp(37, 2);\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n\n      if (lookaheadCh === 94) {\n        throw this.unexpected();\n      }\n    } else {\n      this.finishOp(44, 1);\n    }\n  }\n\n  readToken_atSign() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 64 && this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"hack\",\n      topicToken: \"@@\"\n    }])) {\n      this.finishOp(38, 2);\n    } else {\n      this.finishOp(26, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(34, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(30, 2);\n    } else {\n      this.finishOp(53, 1);\n    }\n  }\n\n  readToken_lt() {\n    const {\n      pos\n    } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === 60) {\n      if (this.input.charCodeAt(pos + 2) === 61) {\n        this.finishOp(30, 3);\n        return;\n      }\n\n      this.finishOp(51, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(49, 2);\n      return;\n    }\n\n    this.finishOp(47, 1);\n  }\n\n  readToken_gt() {\n    const {\n      pos\n    } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === 62) {\n      const size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(pos + size) === 61) {\n        this.finishOp(30, size + 1);\n        return;\n      }\n\n      this.finishOp(52, size);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(49, 2);\n      return;\n    }\n\n    this.finishOp(48, 1);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(19);\n      return;\n    }\n\n    this.finishOp(code === 61 ? 29 : 35, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(30, 3);\n      } else {\n        this.finishOp(40, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(18);\n    } else {\n      ++this.state.pos;\n      this.finishToken(17);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(10);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(11);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(13);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(12);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType, {\n              at: this.state.curPosition()\n            });\n          }\n\n          this.state.pos += 2;\n          this.finishToken(2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(0);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(3);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType, {\n              at: this.state.curPosition()\n            });\n          }\n\n          this.state.pos += 2;\n          this.finishToken(6);\n        } else {\n          ++this.state.pos;\n          this.finishToken(5);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(8);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(15, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(14);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        this.readTemplateToken();\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n        this.readToken_lt();\n        return;\n\n      case 62:\n        this.readToken_gt();\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(36, 1);\n        return;\n\n      case 64:\n        this.readToken_atSign();\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n\n    }\n\n    throw this.raise(Errors.InvalidOrUnexpectedToken, {\n      at: this.state.curPosition(),\n      unexpected: String.fromCodePoint(code)\n    });\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let {\n      pos\n    } = this.state;\n\n    for (;; ++pos) {\n      if (pos >= this.length) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1)\n        });\n      }\n\n      const ch = this.input.charCodeAt(pos);\n\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1)\n        });\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === 91) {\n          inClass = true;\n        } else if (ch === 93 && inClass) {\n          inClass = false;\n        } else if (ch === 47 && !inClass) {\n          break;\n        }\n\n        escaped = ch === 92;\n      }\n    }\n\n    const content = this.input.slice(start, pos);\n    ++pos;\n    let mods = \"\";\n\n    const nextPos = () => createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === 118) {\n          this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, {\n              at: nextPos()\n            });\n          }\n        } else if (cp === 117) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, {\n              at: nextPos()\n            });\n          }\n        }\n\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, {\n            at: nextPos()\n          });\n        }\n      } else if (isIdentifierChar(cp) || cp === 92) {\n        this.raise(Errors.MalformedRegExpFlags, {\n          at: nextPos()\n        });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n\n    this.state.pos = pos;\n    this.finishToken(133, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len) {\n    let forceLen = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let allowNumSeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    const {\n      n,\n      pos\n    } = readInt(this.input, this.state.pos, this.state.lineStart, this.state.curLine, radix, len, forceLen, allowNumSeparator, this.errorHandlers_readInt);\n    this.state.pos = pos;\n    return n;\n  }\n\n  readRadixNumber(radix) {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(Errors.InvalidDigit, {\n        at: createPositionWithColumnOffset(startLoc, 2),\n        radix\n      });\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(Errors.InvalidDecimal, {\n        at: startLoc\n      });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition()\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(startLoc.index, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(131, str);\n      return;\n    }\n\n    this.finishToken(130, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, {\n        at: this.state.curPosition()\n      });\n    }\n\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, {\n        at: startLoc\n      });\n\n      if (!this.state.strict) {\n        const underscorePos = integer.indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos)\n          });\n        }\n      }\n\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, {\n          at: startLoc\n        });\n      }\n\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, {\n          at: startLoc\n        });\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, {\n          at: startLoc\n        });\n      }\n\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition()\n      });\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(131, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(132, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(130, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const {\n      code,\n      pos\n    } = readCodePoint(this.input, this.state.pos, this.state.lineStart, this.state.curLine, throwOnInvalid, this.errorHandlers_readCodePoint);\n    this.state.pos = pos;\n    return code;\n  }\n\n  readString(quote) {\n    const {\n      str,\n      pos,\n      curLine,\n      lineStart\n    } = readStringContents(quote === 34 ? \"double\" : \"single\", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string);\n    this.state.pos = pos + 1;\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(129, str);\n  }\n\n  readTemplateContinuation() {\n    if (!this.match(8)) {\n      this.unexpected(null, 8);\n    }\n\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  readTemplateToken() {\n    const opening = this.input[this.state.pos];\n    const {\n      str,\n      containsInvalid,\n      pos,\n      curLine,\n      lineStart\n    } = readStringContents(\"template\", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template);\n    this.state.pos = pos + 1;\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n\n    if (this.input.codePointAt(pos) === 96) {\n      this.finishToken(24, containsInvalid ? null : opening + str + \"`\");\n    } else {\n      this.state.pos++;\n      this.finishToken(25, containsInvalid ? null : opening + str + \"${\");\n    }\n  }\n\n  recordStrictModeErrors(toParseError, _ref43) {\n    let {\n      at\n    } = _ref43;\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, {\n        at\n      });\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  readWord1(firstCode) {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition()\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, {\n              at: escStart\n            });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  readWord(firstCode) {\n    const word = this.readWord1(firstCode);\n    const type = keywords$1.get(word);\n\n    if (type !== undefined) {\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(128, word);\n    }\n  }\n\n  checkKeywordEscapes() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.startLoc,\n        reservedWord: tokenLabelName(type)\n      });\n    }\n  }\n\n  raise(toParseError, raiseProperties) {\n    const {\n      at\n    } = raiseProperties,\n          details = _objectWithoutPropertiesLoose(raiseProperties, _excluded);\n\n    const loc = at instanceof Position ? at : at.loc.start;\n    const error = toParseError({\n      loc,\n      details\n    });\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n    return error;\n  }\n\n  raiseOverwrite(toParseError, raiseProperties) {\n    const {\n      at\n    } = raiseProperties,\n          details = _objectWithoutPropertiesLoose(raiseProperties, _excluded2);\n\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n\n      if (error.loc.index === pos) {\n        return errors[i] = toParseError({\n          loc,\n          details\n        });\n      }\n\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, raiseProperties);\n  }\n\n  updateContext(prevType) {}\n\n  unexpected(loc, type) {\n    throw this.raise(Errors.UnexpectedToken, {\n      expected: type ? tokenLabelName(type) : null,\n      at: loc != null ? loc : this.state.startLoc\n    });\n  }\n\n  expectPlugin(pluginName, loc) {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(Errors.MissingPlugin, {\n      at: loc != null ? loc : this.state.startLoc,\n      missingPlugin: [pluginName]\n    });\n  }\n\n  expectOnePlugin(pluginNames) {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, {\n        at: this.state.startLoc,\n        missingPlugin: pluginNames\n      });\n    }\n  }\n\n  errorBuilder(error) {\n    return (pos, lineStart, curLine) => {\n      this.raise(error, {\n        at: buildPosition(pos, lineStart, curLine)\n      });\n    };\n  }\n\n}\n\nclass Scope {\n  constructor(flags) {\n    this.var = new Set();\n    this.lexical = new Set();\n    this.functions = new Set();\n    this.flags = flags;\n  }\n\n}\n\nclass ScopeHandler {\n  constructor(parser, inModule) {\n    this.parser = void 0;\n    this.scopeStack = [];\n    this.inModule = void 0;\n    this.undefinedExports = new Map();\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        return false;\n      }\n    }\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) || !this.parser.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, loc) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, loc) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, {\n        at: loc,\n        identifierName: name\n      });\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);\n    }\n\n    return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);\n  }\n\n  checkLocalExport(id) {\n    const {\n      name\n    } = id;\n    const topLevelScope = this.scopeStack[0];\n\n    if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  currentThisScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n\n}\n\nclass FlowScope extends Scope {\n  constructor() {\n    super(...arguments);\n    this.declareFunctions = new Set();\n  }\n\n}\n\nclass FlowScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new FlowScope(flags);\n  }\n\n  declareName(name, bindingType, loc) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\n\nclass ClassScopeHandler {\n  constructor(parser) {\n    this.parser = void 0;\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.parser = parser;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n          at: loc,\n          identifierName: name\n        });\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, loc) {\n    const {\n      privateNames,\n      loneAccessors,\n      undefinedPrivateNames\n    } = this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, {\n        at: loc,\n        identifierName: name\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, loc) {\n    let classScope;\n\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n        at: loc,\n        identifierName: name\n      });\n    }\n  }\n\n}\n\nconst kExpression = 0,\n      kMaybeArrowParameterDeclaration = 1,\n      kMaybeAsyncArrowParameterDeclaration = 2,\n      kParameterDeclaration = 3;\n\nclass ExpressionScope {\n  constructor() {\n    let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : kExpression;\n    this.type = void 0;\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.declarationErrors = new Map();\n  }\n\n  recordDeclarationError(ParsingErrorClass, _ref44) {\n    let {\n      at\n    } = _ref44;\n    const index = at.index;\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n\n  clearDeclarationError(index) {\n    this.declarationErrors.delete(index);\n  }\n\n  iterateErrors(iterator) {\n    this.declarationErrors.forEach(iterator);\n  }\n\n}\n\nclass ExpressionScopeHandler {\n  constructor(parser) {\n    this.parser = void 0;\n    this.stack = [new ExpressionScope()];\n    this.parser = parser;\n  }\n\n  enter(scope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  recordParameterInitializerError(toParseError, _ref45) {\n    let {\n      at: node\n    } = _ref45;\n    const origin = {\n      at: node.loc.start\n    };\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        return;\n      }\n\n      scope = stack[--i];\n    }\n\n    this.parser.raise(toParseError, origin);\n  }\n\n  recordArrowParemeterBindingError(error, _ref46) {\n    let {\n      at: node\n    } = _ref46;\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n    const origin = {\n      at: node.loc.start\n    };\n\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  recordAsyncArrowParametersError(_ref47) {\n    let {\n      at\n    } = _ref47;\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, {\n          at\n        });\n      }\n\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(_ref48 => {\n      let [toParseError, loc] = _ref48;\n      this.parser.raise(toParseError, {\n        at: loc\n      });\n      let i = stack.length - 2;\n      let scope = stack[i];\n\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n\n}\n\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\n\nconst PARAM = 0b0000,\n      PARAM_YIELD = 0b0001,\n      PARAM_AWAIT = 0b0010,\n      PARAM_RETURN = 0b0100,\n      PARAM_IN = 0b1000;\n\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n\n}\n\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, value) {\n    let enumerable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, {\n        enumerable,\n        value\n      });\n    }\n  }\n\n  isContextual(token) {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);\n    }\n\n    return false;\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(token) {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  expectContextual(token, toParseError) {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, {\n          at: this.state.startLoc\n        });\n      }\n\n      throw this.unexpected(null, token);\n    }\n  }\n\n  canInsertSemicolon() {\n    return this.match(135) || this.match(8) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEndLoc.index, this.state.start));\n  }\n\n  hasFollowingLineBreak() {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  isLineTerminator() {\n    return this.eat(13) || this.canInsertSemicolon();\n  }\n\n  semicolon() {\n    let allowAsi = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (allowAsi ? this.isLineTerminator() : this.eat(13)) return;\n    this.raise(Errors.MissingSemicolon, {\n      at: this.state.lastTokEndLoc\n    });\n  }\n\n  expect(type, loc) {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  tryParse(fn) {\n    let oldState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.clone();\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn(function () {\n        let node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc\n    } = refExpressionErrors;\n    const hasErrors = !!shorthandAssignLoc || !!doubleProtoLoc || !!optionalParametersLoc || !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, {\n        at: doubleProtoLoc\n      });\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, {\n        at: privateKeyLoc\n      });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  isLiteralPropertyName() {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  isPrivateName(node) {\n    return node.type === \"PrivateName\";\n  }\n\n  getPrivateNameSV(node) {\n    return node.id.name;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node) {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes() {\n    let inModule = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.sourceType === \"module\";\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n    return () => {\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors) {\n    const {\n      privateKeyLoc\n    } = refExpressionErrors;\n\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n\n}\n\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssignLoc = null;\n    this.doubleProtoLoc = null;\n    this.privateKeyLoc = null;\n    this.optionalParametersLoc = null;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser != null && parser.options.ranges) this.range = [pos, 0];\n    if (parser != null && parser.filename) this.loc.filename = parser.filename;\n  }\n\n}\n\nconst NodePrototype = Node.prototype;\n{\n  NodePrototype.__clone = function () {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node) {\n  return cloneIdentifier(node);\n}\n\nfunction cloneIdentifier(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra,\n    name\n  } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n\n  return cloned;\n}\n\nfunction cloneStringLiteral(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra\n  } = node;\n\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n\n  if (node.raw !== undefined) {\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n\n  cloned.value = node.value;\n  return cloned;\n}\n\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, endLoc) {\n    node.type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node) {\n    let endLoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.lastTokEndLoc;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  AssignReservedType: _ref49 => {\n    let {\n      reservedType\n    } = _ref49;\n    return `Cannot overwrite reserved type ${reservedType}.`;\n  },\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: _ref50 => {\n    let {\n      memberName,\n      enumName\n    } = _ref50;\n    return `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`;\n  },\n  EnumDuplicateMemberName: _ref51 => {\n    let {\n      memberName,\n      enumName\n    } = _ref51;\n    return `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`;\n  },\n  EnumInconsistentMemberValues: _ref52 => {\n    let {\n      enumName\n    } = _ref52;\n    return `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`;\n  },\n  EnumInvalidExplicitType: _ref53 => {\n    let {\n      invalidEnumType,\n      enumName\n    } = _ref53;\n    return `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`;\n  },\n  EnumInvalidExplicitTypeUnknownSupplied: _ref54 => {\n    let {\n      enumName\n    } = _ref54;\n    return `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`;\n  },\n  EnumInvalidMemberInitializerPrimaryType: _ref55 => {\n    let {\n      enumName,\n      memberName,\n      explicitType\n    } = _ref55;\n    return `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`;\n  },\n  EnumInvalidMemberInitializerSymbolType: _ref56 => {\n    let {\n      enumName,\n      memberName\n    } = _ref56;\n    return `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`;\n  },\n  EnumInvalidMemberInitializerUnknownType: _ref57 => {\n    let {\n      enumName,\n      memberName\n    } = _ref57;\n    return `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`;\n  },\n  EnumInvalidMemberName: _ref58 => {\n    let {\n      enumName,\n      memberName,\n      suggestion\n    } = _ref58;\n    return `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`;\n  },\n  EnumNumberMemberNotInitialized: _ref59 => {\n    let {\n      enumName,\n      memberName\n    } = _ref59;\n    return `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`;\n  },\n  EnumStringMemberInconsistentlyInitailized: _ref60 => {\n    let {\n      enumName\n    } = _ref60;\n    return `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`;\n  },\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: Object.assign({\n    message: \"A binding pattern parameter cannot be optional in an implementation signature.\"\n  }, {\n    reasonCode: \"OptionalBindingPattern\"\n  }),\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired: \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor: \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst: \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: _ref61 => {\n    let {\n      reservedType\n    } = _ref61;\n    return `Unexpected reserved type ${reservedType}.`;\n  },\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: _ref62 => {\n    let {\n      unsupportedExportKind,\n      suggestion\n    } = _ref62;\n    return `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`;\n  },\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\"\n});\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type) {\n  return tokenIsKeywordOrIdentifier(type) && type !== 97;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\nvar flow = superClass => class FlowParserMixin extends superClass {\n  constructor() {\n    super(...arguments);\n    this.flowPragma = undefined;\n  }\n\n  getScopeHandler() {\n    return FlowScopeHandler;\n  }\n\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n\n  finishToken(type, val) {\n    if (type !== 129 && type !== 13 && type !== 28) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n\n    return super.finishToken(type, val);\n  }\n\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n      if (!matches) ;else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n\n    return super.addComment(comment);\n  }\n\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || 14);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloLoc = this.state.startLoc;\n    this.next();\n    this.expectContextual(107);\n\n    if (this.state.lastTokStart > moduloLoc.index + 1) {\n      this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n        at: moduloLoc\n      });\n    }\n\n    if (this.eat(10)) {\n      node.value = super.parseExpression();\n      this.expect(11);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(14);\n    let type = null;\n    let predicate = null;\n\n    if (this.match(54)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n\n      if (this.match(54)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n\n    return [type, predicate];\n  }\n\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n\n    if (this.match(47)) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n\n    this.expect(10);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    typeNode.this = tmp._this;\n    this.expect(11);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.loc.start);\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n\n  flowParseDeclare(node, insideModule) {\n    if (this.match(80)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(68)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(74)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(123)) {\n      if (this.match(16)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(FlowErrors.NestedDeclareModule, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(126)) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(127)) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(125)) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(82)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n\n    if (this.match(129)) {\n      node.id = super.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(5);\n\n    while (!this.match(8)) {\n      let bodyNode = this.startNode();\n\n      if (this.match(83)) {\n        this.next();\n\n        if (!this.isContextual(126) && !this.match(87)) {\n          this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n\n        super.parseImport(bodyNode);\n      } else {\n        this.expectContextual(121, FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n\n      body.push(bodyNode);\n    }\n\n    this.scope.exit();\n    this.expect(8);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n            at: bodyElement\n          });\n        }\n\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n            at: bodyElement\n          });\n        }\n\n        if (kind === \"ES\") {\n          this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n            at: bodyElement\n          });\n        }\n\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(82);\n\n    if (this.eat(65)) {\n      if (this.match(68) || this.match(80)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(75) || this.isLet() || (this.isContextual(126) || this.isContextual(125)) && !insideModule) {\n        const label = this.state.value;\n        throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {\n          at: this.state.startLoc,\n          unsupportedExportKind: label,\n          suggestion: exportSuggestions[label]\n        });\n      }\n\n      if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(127)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n        node.default = false;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else if (this.match(55) || this.match(5) || this.isContextual(125) || this.isContextual(126) || this.isContextual(127)) {\n        node = this.parseExport(node);\n\n        if (node.type === \"ExportNamedDeclaration\") {\n          node.type = \"ExportDeclaration\";\n          node.default = false;\n          delete node.exportKind;\n        }\n\n        node.type = \"Declare\" + node.type;\n        return node;\n      }\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(108);\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    const finished = this.flowParseTypeAlias(node);\n    finished.type = \"DeclareTypeAlias\";\n    return finished;\n  }\n\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    const finished = this.flowParseOpaqueType(node, true);\n    finished.type = \"DeclareOpaqueType\";\n    return finished;\n  }\n\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n\n  flowParseInterfaceish(node) {\n    let isClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.loc.start);\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.extends = [];\n    node.implements = [];\n    node.mixins = [];\n\n    if (this.eat(81)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(12));\n    }\n\n    if (this.isContextual(114)) {\n      this.next();\n\n      do {\n        node.mixins.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n\n    if (this.isContextual(110)) {\n      this.next();\n\n      do {\n        node.implements.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n        at: this.state.startLoc\n      });\n    }\n  }\n\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, {\n      at: startLoc,\n      reservedType: word\n    });\n  }\n\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.startLoc, declaration);\n    return this.parseIdentifier(liberal);\n  }\n\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.right = this.flowParseTypeInitialiser(29);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(126);\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.supertype = null;\n\n    if (this.match(14)) {\n      node.supertype = this.flowParseTypeInitialiser(14);\n    }\n\n    node.impltype = null;\n\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(29);\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n\n  flowParseTypeParameter() {\n    let requireDefault = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const nodeStartLoc = this.state.startLoc;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n\n    if (this.match(29)) {\n      this.eat(29);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(FlowErrors.MissingTypeParamDefault, {\n          at: nodeStartLoc\n        });\n      }\n    }\n\n    return this.finishNode(node, \"TypeParameter\");\n  }\n\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n\n    if (this.match(47) || this.match(138)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    let defaultRequired = false;\n\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    } while (!this.match(48));\n\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expect(47);\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n\n    while (!this.match(48)) {\n      node.params.push(this.flowParseType());\n\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    }\n\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expect(47);\n\n    while (!this.match(48)) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    }\n\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(125);\n    node.extends = [];\n\n    if (this.eat(81)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n\n  flowParseObjectPropertyKey() {\n    return this.match(130) || this.match(129) ? super.parseExprAtom() : this.parseIdentifier(true);\n  }\n\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n\n    if (this.lookahead().type === 14) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n\n    this.expect(3);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(3);\n    this.expect(3);\n\n    if (this.match(47) || this.match(10)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n    } else {\n      node.method = false;\n\n      if (this.eat(17)) {\n        node.optional = true;\n      }\n\n      node.value = this.flowParseTypeInitialiser();\n    }\n\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n    node.this = null;\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    this.expect(10);\n\n    if (this.match(78)) {\n      node.this = this.flowParseFunctionTypeParam(true);\n      node.this.name = null;\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    while (!this.match(11) && !this.match(21)) {\n      node.params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    if (this.eat(21)) {\n      node.rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    this.expect(11);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n\n  flowParseObjectType(_ref63) {\n    let {\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact\n    } = _ref63;\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n\n    if (allowExact && this.match(6)) {\n      this.expect(6);\n      endDelim = 9;\n      exact = true;\n    } else {\n      this.expect(5);\n      endDelim = 8;\n      exact = false;\n    }\n\n    nodeStart.exact = exact;\n\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStartLoc = null;\n      let inexactStartLoc = null;\n      const node = this.startNode();\n\n      if (allowProto && this.isContextual(115)) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\n          this.next();\n          protoStartLoc = this.state.startLoc;\n          allowStatic = false;\n        }\n      }\n\n      if (allowStatic && this.isContextual(104)) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\n          this.next();\n          isStatic = true;\n        }\n      }\n\n      const variance = this.flowParseVariance();\n\n      if (this.eat(0)) {\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n\n        if (this.eat(0)) {\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(10) || this.match(47)) {\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n\n        if (variance) {\n          this.unexpected(variance.loc.start);\n        }\n\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n\n        if (this.isContextual(98) || this.isContextual(103)) {\n          const lookahead = this.lookahead();\n\n          if (tokenIsLiteralPropertyName(lookahead.type)) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStartLoc = this.state.lastTokStartLoc;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n\n      this.flowObjectTypeSemicolon();\n\n      if (inexactStartLoc && !this.match(8) && !this.match(9)) {\n        this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n          at: inexactStartLoc\n        });\n      }\n    }\n\n    this.expect(endDelim);\n\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n\n  flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(21)) {\n      const isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);\n\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(FlowErrors.InexactInsideNonObject, {\n            at: this.state.lastTokStartLoc\n          });\n        } else if (!allowInexact) {\n          this.raise(FlowErrors.InexactInsideExact, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n\n        if (variance) {\n          this.raise(FlowErrors.InexactVariance, {\n            at: variance\n          });\n        }\n\n        return null;\n      }\n\n      if (!allowSpread) {\n        this.raise(FlowErrors.UnexpectedSpreadType, {\n          at: this.state.lastTokStartLoc\n        });\n      }\n\n      if (protoStartLoc != null) {\n        this.unexpected(protoStartLoc);\n      }\n\n      if (variance) {\n        this.raise(FlowErrors.SpreadVariance, {\n          at: variance\n        });\n      }\n\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStartLoc != null;\n      node.kind = kind;\n      let optional = false;\n\n      if (this.match(47) || this.match(10)) {\n        node.method = true;\n\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n\n        if (variance) {\n          this.unexpected(variance.loc.start);\n        }\n\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n\n        if (!allowSpread && node.key.name === \"constructor\" && node.value.this) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, {\n            at: node.value.this\n          });\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n\n        if (this.eat(17)) {\n          optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n    if (property.value.this) {\n      this.raise(property.kind === \"get\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, {\n        at: property.value.this\n      });\n    }\n\n    if (length !== paramCount) {\n      this.raise(property.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity, {\n        at: property\n      });\n    }\n\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(Errors.BadSetterRestParameter, {\n        at: property\n      });\n    }\n  }\n\n  flowObjectTypeSemicolon() {\n    if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {\n      this.unexpected();\n    }\n  }\n\n  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n\n    while (this.eat(16)) {\n      const node2 = this.startNodeAt(startPos, startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n\n    return node;\n  }\n\n  flowParseGenericType(startPos, startLoc, id) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(87);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(0);\n\n    while (this.state.pos < this.length && !this.match(3)) {\n      node.types.push(this.flowParseType());\n      if (this.match(3)) break;\n      this.expect(12);\n    }\n\n    this.expect(3);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n\n  flowParseFunctionTypeParam(first) {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n    const isThis = this.state.type === 78;\n\n    if (lh.type === 14 || lh.type === 17) {\n      if (isThis && !first) {\n        this.raise(FlowErrors.ThisParamMustBeFirst, {\n          at: node\n        });\n      }\n\n      name = this.parseIdentifier(isThis);\n\n      if (this.eat(17)) {\n        optional = true;\n\n        if (isThis) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, {\n            at: node\n          });\n        }\n      }\n\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.start, type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  flowParseFunctionTypeParams() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let rest = null;\n    let _this = null;\n\n    if (this.match(78)) {\n      _this = this.flowParseFunctionTypeParam(true);\n      _this.name = null;\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    while (!this.match(11) && !this.match(21)) {\n      params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    if (this.eat(21)) {\n      rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    return {\n      params,\n      rest,\n      _this\n    };\n  }\n\n  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n\n      case \"symbol\":\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startPos, startLoc, id);\n    }\n  }\n\n  flowParsePrimaryType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n    switch (this.state.type) {\n      case 5:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n\n      case 6:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n\n      case 0:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n\n      case 47:\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n        this.expect(10);\n        tmp = this.flowParseFunctionTypeParams();\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(11);\n        this.expect(19);\n        node.returnType = this.flowParseType();\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case 10:\n        this.next();\n\n        if (!this.match(11) && !this.match(21)) {\n          if (tokenIsIdentifier(this.state.type) || this.match(78)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== 17 && token !== 14;\n          } else {\n            isGroupedType = true;\n          }\n        }\n\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {\n            this.expect(11);\n            return type;\n          } else {\n            this.eat(12);\n          }\n        }\n\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(11);\n        this.expect(19);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case 129:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n      case 85:\n      case 86:\n        node.value = this.match(85);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n      case 53:\n        if (this.state.value === \"-\") {\n          this.next();\n\n          if (this.match(130)) {\n            return this.parseLiteralAtNode(-this.state.value, \"NumberLiteralTypeAnnotation\", node);\n          }\n\n          if (this.match(131)) {\n            return this.parseLiteralAtNode(-this.state.value, \"BigIntLiteralTypeAnnotation\", node);\n          }\n\n          throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n            at: this.state.startLoc\n          });\n        }\n\n        throw this.unexpected();\n\n      case 130:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n      case 131:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n      case 88:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n\n      case 84:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n      case 78:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n\n      case 55:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n      case 87:\n        return this.flowParseTypeofType();\n\n      default:\n        if (tokenIsKeyword(this.state.type)) {\n          const label = tokenLabelName(this.state.type);\n          this.next();\n          return super.createIdentifier(node, label);\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (this.isContextual(125)) {\n            return this.flowParseInterfaceType();\n          }\n\n          return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n        }\n\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParsePostfixType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n    let seenOptionalIndexedAccess = false;\n\n    while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const optional = this.eat(18);\n      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n      this.expect(0);\n\n      if (!optional && this.match(3)) {\n        node.elementType = type;\n        this.next();\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      } else {\n        node.objectType = type;\n        node.indexType = this.flowParseType();\n        this.expect(3);\n\n        if (seenOptionalIndexedAccess) {\n          node.optional = optional;\n          type = this.finishNode(node, \"OptionalIndexedAccessType\");\n        } else {\n          type = this.finishNode(node, \"IndexedAccessType\");\n        }\n      }\n    }\n\n    return type;\n  }\n\n  flowParsePrefixType() {\n    const node = this.startNode();\n\n    if (this.eat(17)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n\n    if (!this.state.noAnonFunctionType && this.eat(19)) {\n      const node = this.startNodeAt(param.start, param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.this = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    return param;\n  }\n\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(45);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n\n    while (this.eat(45)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(43);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n\n    while (this.eat(43)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === 128 && this.state.value === \"_\") {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startPos, startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n    if (this.match(14)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n\n    return ident;\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  flowParseVariance() {\n    let variance = null;\n\n    if (this.match(53)) {\n      variance = this.startNode();\n\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n\n      this.next();\n      return this.finishNode(variance, \"Variance\");\n    }\n\n    return variance;\n  }\n\n  parseFunctionBody(node, allowExpressionBody) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (allowExpressionBody) {\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n    }\n\n    return super.parseFunctionBody(node, false, isMethod);\n  }\n\n  parseFunctionBodyAndFinish(node, type) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (this.match(14)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n\n    return super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.state.strict && this.isContextual(125)) {\n      const lookahead = this.lookahead();\n\n      if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      }\n    } else if (this.shouldParseEnums() && this.isContextual(122)) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    const stmt = super.parseStatement(context, topLevel);\n\n    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n      this.flowPragma = null;\n    }\n\n    return stmt;\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (tokenIsIdentifier(this.state.type)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n\n    return super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 122) {\n      return !this.state.containsEsc;\n    }\n\n    return super.shouldParseExportDeclaration();\n  }\n\n  isExportDefaultSpecifier() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 122) {\n      return this.state.containsEsc;\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(122)) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (!this.match(17)) return expr;\n\n    if (this.state.maybeInArrowParameters) {\n      const nextCh = this.lookaheadCharCode();\n\n      if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {\n        this.setOptionalParametersError(refExpressionErrors);\n        return expr;\n      }\n    }\n\n    this.expect(17);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startPos, startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n\n      if (failed && valid.length > 1) {\n        this.raise(FlowErrors.AmbiguousConditionalArrow, {\n          at: state.startLoc\n        });\n      }\n\n      if (failed && valid.length === 1) {\n        this.state = state;\n        noArrowAt.push(valid[0].start);\n        this.state.noArrowAt = noArrowAt;\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(14);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssignAllowIn();\n    const failed = !this.match(14);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n\n    while (stack.length !== 0) {\n      const node = stack.pop();\n\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n\n  finishArrowValidation(node) {\n    var _node$extra;\n\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingCommaLoc, false);\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n\n    return result;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(17)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(14)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n\n    super.assertModuleNodeAllowed(node);\n  }\n\n  parseExport(node) {\n    const decl = super.parseExport(node);\n\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n      decl.exportKind = decl.exportKind || \"value\";\n    }\n\n    return decl;\n  }\n\n  parseExportDeclaration(node) {\n    if (this.isContextual(126)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n\n      if (this.match(5)) {\n        node.specifiers = this.parseExportSpecifiers(true);\n        super.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(127)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(125)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(122)) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n\n  eatExportStar(node) {\n    if (super.eatExportStar(node)) return true;\n\n    if (this.isContextual(126) && this.lookahead().type === 55) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    const {\n      startLoc\n    } = this.state;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(startLoc);\n    }\n\n    return hasNamespace;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n\n  parseClassMember(classBody, member, state) {\n    const {\n      startLoc\n    } = this.state;\n\n    if (this.isContextual(121)) {\n      if (super.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      member.declare = true;\n    }\n\n    super.parseClassMember(classBody, member, state);\n\n    if (member.declare) {\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\" && member.type !== \"PropertyDefinition\") {\n        this.raise(FlowErrors.DeclareClassElement, {\n          at: startLoc\n        });\n      } else if (member.value) {\n        this.raise(FlowErrors.DeclareClassFieldInitializer, {\n          at: member.value\n        });\n      }\n    }\n  }\n\n  isIterator(word) {\n    return word === \"iterator\" || word === \"asyncIterator\";\n  }\n\n  readIterator() {\n    const word = super.readWord1();\n    const fullWord = \"@@\" + word;\n\n    if (!this.isIterator(word) || !this.state.inType) {\n      this.raise(Errors.InvalidIdentifier, {\n        at: this.state.curPosition(),\n        identifierName: fullWord\n      });\n    }\n\n    this.finishToken(128, fullWord);\n  }\n\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 123 && next === 124) {\n      return this.finishOp(6, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(code === 62 ? 48 : 47, 1);\n    } else if (this.state.inType && code === 63) {\n      if (next === 46) {\n        return this.finishOp(18, 2);\n      }\n\n      return this.finishOp(17, 1);\n    } else if (isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))) {\n      this.state.pos += 2;\n      return this.readIterator();\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  isAssignable(node, isBinding) {\n    if (node.type === \"TypeCastExpression\") {\n      return this.isAssignable(node.expression, isBinding);\n    } else {\n      return super.isAssignable(node, isBinding);\n    }\n  }\n\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (!isLHS && node.type === \"AssignmentExpression\" && node.left.type === \"TypeCastExpression\") {\n      node.left = this.typeCastToParameter(node.left);\n    }\n\n    super.toAssignable(node, isLHS);\n  }\n\n  toAssignableList(exprList, trailingCommaLoc, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      var _expr$extra;\n\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(FlowErrors.TypeCastInPattern, {\n          at: expr.typeAnnotation\n        });\n      }\n    }\n\n    return exprList;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n\n    return node;\n  }\n\n  isValidLVal(type, isParenthesized, binding) {\n    return type === \"TypeCastExpression\" || super.isValidLVal(type, isParenthesized, binding);\n  }\n\n  parseClassProperty(node) {\n    if (this.match(14)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (this.match(14)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassPrivateProperty(node);\n  }\n\n  isClassMethod() {\n    return this.match(47) || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(14) || super.isClassProperty();\n  }\n\n  isNonstaticConstructor(method) {\n    return !this.match(14) && super.isNonstaticConstructor(method);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.loc.start);\n    }\n\n    delete method.variance;\n\n    if (this.match(47)) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n\n    if (method.params && isConstructor) {\n      const params = method.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(FlowErrors.ThisParamBannedInConstructor, {\n          at: method\n        });\n      }\n    } else if (method.type === \"MethodDefinition\" && isConstructor && method.value.params) {\n      const params = method.value.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(FlowErrors.ThisParamBannedInConstructor, {\n          at: method\n        });\n      }\n    }\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.loc.start);\n    }\n\n    delete method.variance;\n\n    if (this.match(47)) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.match(47)) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    if (this.isContextual(110)) {\n      this.next();\n      const implemented = node.implements = [];\n\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n\n        if (this.match(47)) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(12));\n    }\n  }\n\n  checkGetterSetterParams(method) {\n    super.checkGetterSetterParams(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length > 0) {\n      const param = params[0];\n\n      if (this.isThisParam(param) && method.kind === \"get\") {\n        this.raise(FlowErrors.GetterMayNotHaveThisParam, {\n          at: param\n        });\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.SetterMayNotHaveThisParam, {\n          at: param\n        });\n      }\n    }\n  }\n\n  parsePropertyNamePrefixOperator(node) {\n    node.variance = this.flowParseVariance();\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.loc.start);\n    }\n\n    delete prop.variance;\n    let typeParameters;\n\n    if (this.match(47) && !isAccessor) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(10)) this.unexpected();\n    }\n\n    const result = super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n    if (typeParameters) {\n      (result.value || result).typeParameters = typeParameters;\n    }\n\n    return result;\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(17)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(FlowErrors.PatternIsOptional, {\n          at: param\n        });\n      }\n\n      if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamMayNotBeOptional, {\n          at: param\n        });\n      }\n\n      param.optional = true;\n    }\n\n    if (this.match(14)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    } else if (this.isThisParam(param)) {\n      this.raise(FlowErrors.ThisParamAnnotationRequired, {\n        at: param\n      });\n    }\n\n    if (this.match(29) && this.isThisParam(param)) {\n      this.raise(FlowErrors.ThisParamNoDefault, {\n        at: param\n      });\n    }\n\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(FlowErrors.TypeBeforeInitializer, {\n        at: node.typeAnnotation\n      });\n    }\n\n    return node;\n  }\n\n  shouldParseDefaultImport(node) {\n    if (!hasTypeImportKind(node)) {\n      return super.shouldParseDefaultImport(node);\n    }\n\n    return isMaybeDefaultImport(this.state.type);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    node.importKind = \"value\";\n    let kind = null;\n\n    if (this.match(87)) {\n      kind = \"typeof\";\n    } else if (this.isContextual(126)) {\n      kind = \"type\";\n    }\n\n    if (kind) {\n      const lh = this.lookahead();\n      const {\n        type\n      } = lh;\n\n      if (kind === \"type\" && type === 55) {\n        this.unexpected(null, lh.type);\n      }\n\n      if (isMaybeDefaultImport(type) || type === 5 || type === 55) {\n        this.next();\n        node.importKind = kind;\n      }\n    }\n\n    return super.maybeParseDefaultImportSpecifier(node);\n  }\n\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\n    const firstIdent = specifier.imported;\n    let specifierTypeKind = null;\n\n    if (firstIdent.type === \"Identifier\") {\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n    }\n\n    let isBinding = false;\n\n    if (this.isContextual(93) && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n\n      if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = cloneIdentifier(as_ident);\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else {\n      if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n      } else {\n        if (importedIsString) {\n          throw this.raise(Errors.ImportBindingIsString, {\n            at: specifier,\n            importName: firstIdent.value\n          });\n        }\n\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n      }\n\n      if (this.eatContextual(93)) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = cloneIdentifier(specifier.imported);\n      }\n    }\n\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n    if (isInTypeOnlyImport && specifierIsTypeImport) {\n      this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n        at: specifier\n      });\n    }\n\n    if (isInTypeOnlyImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.loc.start, true);\n    }\n\n    if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true);\n    }\n\n    return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 78:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const kind = node.kind;\n\n    if (kind !== \"get\" && kind !== \"set\" && this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (this.match(14)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(14)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(14) || super.shouldParseAsyncArrow();\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    var _jsx;\n\n    let state = null;\n    let jsx;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(138) || this.match(47))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const currentContext = context[context.length - 1];\n\n      if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n        context.pop();\n      }\n    }\n\n    if ((_jsx = jsx) != null && _jsx.error || this.match(47)) {\n      var _jsx2, _jsx3;\n\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(abort => {\n        var _arrowExpression$extr;\n\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n          this.resetStartLocationFromNode(result, typeParameters);\n          return result;\n        });\n        if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();\n        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n        if (expr.type !== \"ArrowFunctionExpression\") abort();\n        expr.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(expr, typeParameters);\n        return arrowExpression;\n      }, state);\n      let arrowExpression = null;\n\n      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n        if (!arrow.error && !arrow.aborted) {\n          if (arrow.node.async) {\n            this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, {\n              at: typeParameters\n            });\n          }\n\n          return arrow.node;\n        }\n\n        arrowExpression = arrow.node;\n      }\n\n      if ((_jsx2 = jsx) != null && _jsx2.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n\n      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n        at: typeParameters\n      });\n    }\n\n    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n  }\n\n  parseArrow(node) {\n    if (this.match(14)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(19)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n\n    return super.parseArrow(node);\n  }\n\n  shouldParseArrow(params) {\n    return this.match(14) || super.shouldParseArrow(params);\n  }\n\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    let strictModeChanged = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n\n    for (let i = 0; i < node.params.length; i++) {\n      if (this.isThisParam(node.params[i]) && i > 0) {\n        this.raise(FlowErrors.ThisParamMustBeFirst, {\n          at: node.params[i]\n        });\n      }\n    }\n\n    return super.checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = super.parseCallExpressionArguments(11, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.match(47)) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n\n      throw arrow.error || result.error;\n    }\n\n    return super.parseSubscripts(base, startPos, startLoc, noCalls);\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n    if (this.match(18) && this.isLookaheadToken_lt()) {\n      subscriptState.optionalChainMember = true;\n\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(10);\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.match(47)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(10);\n        node.arguments = super.parseCallExpressionArguments(11, false);\n\n        if (subscriptState.optionalChainMember) {\n          node.optional = false;\n        }\n\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n  }\n\n  parseNewCallee(node) {\n    super.parseNewCallee(node);\n    let targs = null;\n\n    if (this.shouldParseTypes() && this.match(47)) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n\n    node.typeArguments = targs;\n  }\n\n  parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.parseFunctionParams(node);\n    if (!this.parseArrow(node)) return;\n    return super.parseArrowExpression(node, undefined, true);\n  }\n\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n\n    super.readToken_mult_modulo(code);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 124 && next === 125) {\n      this.finishOp(9, 2);\n      return;\n    }\n\n    super.readToken_pipe_amp(code);\n  }\n\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n\n    if (this.state.hasFlowComment) {\n      this.raise(FlowErrors.UnterminatedFlowComment, {\n        at: this.state.curPosition()\n      });\n    }\n\n    return fileNode;\n  }\n\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        throw this.raise(FlowErrors.NestedFlowComment, {\n          at: this.state.startLoc\n        });\n      }\n\n      this.hasFlowCommentCompletion();\n      const commentSkip = this.skipFlowComment();\n\n      if (commentSkip) {\n        this.state.pos += commentSkip;\n        this.state.hasFlowComment = true;\n      }\n\n      return;\n    }\n\n    if (this.state.hasFlowComment) {\n      const end = this.input.indexOf(\"*-/\", this.state.pos + 2);\n\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition()\n        });\n      }\n\n      this.state.pos = end + 2 + 3;\n      return;\n    }\n\n    return super.skipBlockComment();\n  }\n\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n\n    return false;\n  }\n\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n\n    if (end === -1) {\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition()\n      });\n    }\n  }\n\n  flowEnumErrorBooleanMemberNotInitialized(loc, _ref64) {\n    let {\n      enumName,\n      memberName\n    } = _ref64;\n    this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {\n      at: loc,\n      memberName,\n      enumName\n    });\n  }\n\n  flowEnumErrorInvalidMemberInitializer(loc, enumContext) {\n    return this.raise(!enumContext.explicitType ? FlowErrors.EnumInvalidMemberInitializerUnknownType : enumContext.explicitType === \"symbol\" ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerPrimaryType, Object.assign({\n      at: loc\n    }, enumContext));\n  }\n\n  flowEnumErrorNumberMemberNotInitialized(loc, _ref65) {\n    let {\n      enumName,\n      memberName\n    } = _ref65;\n    this.raise(FlowErrors.EnumNumberMemberNotInitialized, {\n      at: loc,\n      enumName,\n      memberName\n    });\n  }\n\n  flowEnumErrorStringMemberInconsistentlyInitailized(node, _ref66) {\n    let {\n      enumName\n    } = _ref66;\n    this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {\n      at: node,\n      enumName\n    });\n  }\n\n  flowEnumMemberInit() {\n    const startLoc = this.state.startLoc;\n\n    const endOfInit = () => this.match(12) || this.match(8);\n\n    switch (this.state.type) {\n      case 130:\n        {\n          const literal = this.parseNumericLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            loc: startLoc\n          };\n        }\n\n      case 129:\n        {\n          const literal = this.parseStringLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            loc: startLoc\n          };\n        }\n\n      case 85:\n      case 86:\n        {\n          const literal = this.parseBooleanLiteral(this.match(85));\n\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            loc: startLoc\n          };\n        }\n\n      default:\n        return {\n          type: \"invalid\",\n          loc: startLoc\n        };\n    }\n  }\n\n  flowEnumMemberRaw() {\n    const loc = this.state.startLoc;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(29) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      loc\n    };\n    return {\n      id,\n      init\n    };\n  }\n\n  flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n\n    if (explicitType === null) {\n      return;\n    }\n\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(loc, context);\n    }\n  }\n\n  flowEnumMembers(_ref67) {\n    let {\n      enumName,\n      explicitType\n    } = _ref67;\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n    let hasUnknownMembers = false;\n\n    while (!this.match(8)) {\n      if (this.eat(21)) {\n        hasUnknownMembers = true;\n        break;\n      }\n\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n\n      if (memberName === \"\") {\n        continue;\n      }\n\n      if (/^[a-z]/.test(memberName)) {\n        this.raise(FlowErrors.EnumInvalidMemberName, {\n          at: id,\n          memberName,\n          suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n          enumName\n        });\n      }\n\n      if (seenNames.has(memberName)) {\n        this.raise(FlowErrors.EnumDuplicateMemberName, {\n          at: id,\n          memberName,\n          enumName\n        });\n      }\n\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context);\n                break;\n\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n\n      if (!this.match(8)) {\n        this.expect(12);\n      }\n    }\n\n    return {\n      members,\n      hasUnknownMembers\n    };\n  }\n\n  flowEnumStringMembers(initializedMembers, defaultedMembers, _ref68) {\n    let {\n      enumName\n    } = _ref68;\n\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (const member of initializedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n          enumName\n        });\n      }\n\n      return defaultedMembers;\n    } else {\n      for (const member of defaultedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n          enumName\n        });\n      }\n\n      return initializedMembers;\n    }\n  }\n\n  flowEnumParseExplicitType(_ref69) {\n    let {\n      enumName\n    } = _ref69;\n    if (!this.eatContextual(101)) return null;\n\n    if (!tokenIsIdentifier(this.state.type)) {\n      throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {\n        at: this.state.startLoc,\n        enumName\n      });\n    }\n\n    const {\n      value\n    } = this.state;\n    this.next();\n\n    if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n      this.raise(FlowErrors.EnumInvalidExplicitType, {\n        at: this.state.startLoc,\n        enumName,\n        invalidEnumType: value\n      });\n    }\n\n    return value;\n  }\n\n  flowEnumBody(node, id) {\n    const enumName = id.name;\n    const nameLoc = id.loc.start;\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(5);\n    const {\n      members,\n      hasUnknownMembers\n    } = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n    node.hasUnknownMembers = hasUnknownMembers;\n\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumBooleanBody\");\n\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumNumberBody\");\n\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(8);\n        return this.finishNode(node, \"EnumStringBody\");\n\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumSymbolBody\");\n\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(8);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(8);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.booleanMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.numberMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, {\n              at: nameLoc,\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), id);\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n\n  isLookaheadToken_lt() {\n    const next = this.nextTokenStart();\n\n    if (this.input.charCodeAt(next) === 60) {\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== 60 && afterNext !== 61;\n    }\n\n    return false;\n  }\n\n  maybeUnwrapTypeCastExpression(node) {\n    return node.type === \"TypeCastExpression\" ? node.expression : node;\n  }\n\n};\n\nconst entities = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: _ref70 => {\n    let {\n      openingTagName\n    } = _ref70;\n    return `Expected corresponding JSX closing tag for <${openingTagName}>.`;\n  },\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression: \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  UnexpectedToken: _ref71 => {\n    let {\n      unexpected,\n      HTMLEntity\n    } = _ref71;\n    return `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`;\n  },\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n});\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = superClass => class JSXParserMixin extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(JsxErrors.UnterminatedJsxContent, {\n          at: this.state.startLoc\n        });\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.canStartJSXElement) {\n              ++this.state.pos;\n              return this.finishToken(138);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(137, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        case 62:\n        case 125:\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc\n        });\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(129, out);\n  }\n\n  jsxReadEntity() {\n    const startPos = ++this.state.pos;\n\n    if (this.codePointAtPos(this.state.pos) === 35) {\n      ++this.state.pos;\n      let radix = 10;\n\n      if (this.codePointAtPos(this.state.pos) === 120) {\n        radix = 16;\n        ++this.state.pos;\n      }\n\n      const codePoint = this.readInt(radix, undefined, false, \"bail\");\n\n      if (codePoint !== null && this.codePointAtPos(this.state.pos) === 59) {\n        ++this.state.pos;\n        return String.fromCodePoint(codePoint);\n      }\n    } else {\n      let count = 0;\n      let semi = false;\n\n      while (count++ < 10 && this.state.pos < this.length && !(semi = this.codePointAtPos(this.state.pos) == 59)) {\n        ++this.state.pos;\n      }\n\n      if (semi) {\n        const desc = this.input.slice(startPos, this.state.pos);\n        const entity = entities[desc];\n        ++this.state.pos;\n\n        if (entity) {\n          return entity;\n        }\n      }\n    }\n\n    this.state.pos = startPos;\n    return \"&\";\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(136, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(136)) {\n      node.name = this.state.value;\n    } else if (tokenIsKeyword(this.state.type)) {\n      node.name = tokenLabelName(this.state.type);\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(14)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(16)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case 5:\n        node = this.startNode();\n        this.setContext(types.brace);\n        this.next();\n        node = this.jsxParseExpressionContainer(node, types.j_oTag);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(JsxErrors.AttributeIsEmpty, {\n            at: node\n          });\n        }\n\n        return node;\n\n      case 138:\n      case 129:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(JsxErrors.UnsupportedJsxValue, {\n          at: this.state.startLoc\n        });\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEndLoc.index, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.setContext(types.j_oTag);\n    this.state.canStartJSXElement = true;\n    this.expect(8);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node, previousContext) {\n    if (this.match(8)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      const expression = this.parseExpression();\n      node.expression = expression;\n    }\n\n    this.setContext(previousContext);\n    this.state.canStartJSXElement = true;\n    this.expect(8);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.match(5)) {\n      this.setContext(types.brace);\n      this.next();\n      this.expect(21);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.setContext(types.j_oTag);\n      this.state.canStartJSXElement = true;\n      this.expect(8);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(29) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.eat(139)) {\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(56) && !this.match(139)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(56);\n    this.expect(139);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.eat(139)) {\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(139);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case 138:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(56)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case 137:\n            children.push(this.parseExprAtom());\n            break;\n\n          case 5:\n            {\n              const node = this.startNode();\n              this.setContext(types.brace);\n              this.next();\n\n              if (this.match(21)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node, types.j_expr));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement) && closingElement !== null) {\n        this.raise(JsxErrors.MissingClosingTagFragment, {\n          at: closingElement\n        });\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(JsxErrors.MissingClosingTagElement, {\n          at: closingElement,\n          openingTagName: getQualifiedJSXName(openingElement.name)\n        });\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(JsxErrors.MissingClosingTagElement, {\n            at: closingElement,\n            openingTagName: getQualifiedJSXName(openingElement.name)\n          });\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.match(47)) {\n      throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n        at: this.state.startLoc\n      });\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  setContext(newContext) {\n    const {\n      context\n    } = this.state;\n    context[context.length - 1] = newContext;\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(137)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(138)) {\n      return this.jsxParseElement();\n    } else if (this.match(47) && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.replaceToken(138);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  skipSpace() {\n    const curContext = this.curContext();\n    if (!curContext.preserveSpace) super.skipSpace();\n  }\n\n  getTokenFromCode(code) {\n    const context = this.curContext();\n\n    if (context === types.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types.j_oTag || context === types.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(139);\n      }\n\n      if ((code === 34 || code === 39) && context === types.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(138);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    const {\n      context,\n      type\n    } = this.state;\n\n    if (type === 56 && prevType === 138) {\n      context.splice(-2, 2, types.j_cTag);\n      this.state.canStartJSXElement = false;\n    } else if (type === 138) {\n      context.push(types.j_oTag);\n    } else if (type === 139) {\n      const out = context[context.length - 1];\n\n      if (out === types.j_oTag && prevType === 56 || out === types.j_cTag) {\n        context.pop();\n        this.state.canStartJSXElement = context[context.length - 1] === types.j_expr;\n      } else {\n        this.setContext(types.j_expr);\n        this.state.canStartJSXElement = true;\n      }\n    } else {\n      this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n    }\n  }\n\n};\n\nclass TypeScriptScope extends Scope {\n  constructor() {\n    super(...arguments);\n    this.types = new Set();\n    this.enums = new Set();\n    this.constEnums = new Set();\n    this.classes = new Set();\n    this.exportOnlyBindings = new Set();\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, loc) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.add(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n\n  checkLocalExport(id) {\n    const topLevelScope = this.scopeStack[0];\n    const {\n      name\n    } = id;\n\n    if (!topLevelScope.types.has(name) && !topLevelScope.exportOnlyBindings.has(name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nconst getOwn$1 = (object, key) => Object.hasOwnProperty.call(object, key) && object[key];\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: _ref72 => {\n    let {\n      methodName\n    } = _ref72;\n    return `Method '${methodName}' cannot have an implementation because it is marked abstract.`;\n  },\n  AbstractPropertyHasInitializer: _ref73 => {\n    let {\n      propertyName\n    } = _ref73;\n    return `Property '${propertyName}' cannot have an initializer because it is marked abstract.`;\n  },\n  AccesorCannotDeclareThisParameter: \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  CannotFindName: _ref74 => {\n    let {\n      name\n    } = _ref74;\n    return `Cannot find name '${name}'.`;\n  },\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: _ref75 => {\n    let {\n      kind\n    } = _ref75;\n    return `'declare' is not allowed in ${kind}ters.`;\n  },\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier: _ref76 => {\n    let {\n      modifier\n    } = _ref76;\n    return `Accessibility modifier already seen.`;\n  },\n  DuplicateModifier: _ref77 => {\n    let {\n      modifier\n    } = _ref77;\n    return `Duplicate modifier: '${modifier}'.`;\n  },\n  EmptyHeritageClauseType: _ref78 => {\n    let {\n      token\n    } = _ref78;\n    return `'${token}' list cannot be empty.`;\n  },\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare: \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  IncompatibleModifiers: _ref79 => {\n    let {\n      modifiers\n    } = _ref79;\n    return `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`;\n  },\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: _ref80 => {\n    let {\n      modifier\n    } = _ref80;\n    return `Index signatures cannot have an accessibility modifier ('${modifier}').`;\n  },\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride: \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext: \"Initializers are not allowed in ambient contexts.\",\n  InvalidModifierOnTypeMember: _ref81 => {\n    let {\n      modifier\n    } = _ref81;\n    return `'${modifier}' modifier cannot appear on a type member.`;\n  },\n  InvalidModifierOnTypeParameter: _ref82 => {\n    let {\n      modifier\n    } = _ref82;\n    return `'${modifier}' modifier cannot appear on a type parameter.`;\n  },\n  InvalidModifierOnTypeParameterPositions: _ref83 => {\n    let {\n      modifier\n    } = _ref83;\n    return `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`;\n  },\n  InvalidModifiersOrder: _ref84 => {\n    let {\n      orderedModifiers\n    } = _ref84;\n    return `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`;\n  },\n  InvalidPropertyAccessAfterInstantiationExpression: \"Invalid property access after an instantiation expression. \" + \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName: \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod: \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer: \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass: \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: _ref85 => {\n    let {\n      modifier\n    } = _ref85;\n    return `Private elements cannot have an accessibility modifier ('${modifier}').`;\n  },\n  ReadonlyForMethodSignature: \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam: \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion: \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  SetAccesorCannotHaveOptionalParameter: \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter: \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType: \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: _ref86 => {\n    let {\n      typeParameterName\n    } = _ref86;\n    return `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`;\n  },\n  StaticBlockCannotHaveModifier: \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed: \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports: \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports: \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: _ref87 => {\n    let {\n      type\n    } = _ref87;\n    return `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`;\n  }\n});\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier) {\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\n}\n\nfunction tsIsVarianceAnnotations(modifier) {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\nvar typescript = superClass => class TypeScriptParserMixin extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  tsTokenCanFollowModifier() {\n    return (this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(134) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return this.tsTokenCanFollowModifier();\n  }\n\n  tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {\n    if (!tokenIsIdentifier(this.state.type) && this.state.type !== 58) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1) {\n      if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n        return undefined;\n      }\n\n      if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n        return modifier;\n      }\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(_ref88) {\n    let {\n      modified,\n      allowedModifiers,\n      disallowedModifiers,\n      stopOnStartOfClassStaticBlock,\n      errorTemplate = TSErrors.InvalidModifierOnTypeMember\n    } = _ref88;\n\n    const enforceOrder = (loc, modifier, before, after) => {\n      if (modifier === before && modified[after]) {\n        this.raise(TSErrors.InvalidModifiersOrder, {\n          at: loc,\n          orderedModifiers: [before, after]\n        });\n      }\n    };\n\n    const incompatible = (loc, modifier, mod1, mod2) => {\n      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\n        this.raise(TSErrors.IncompatibleModifiers, {\n          at: loc,\n          modifiers: [mod1, mod2]\n        });\n      }\n    };\n\n    for (;;) {\n      const {\n        startLoc\n      } = this.state;\n      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);\n      if (!modifier) break;\n\n      if (tsIsAccessModifier(modifier)) {\n        if (modified.accessibility) {\n          this.raise(TSErrors.DuplicateAccessibilityModifier, {\n            at: startLoc,\n            modifier\n          });\n        } else {\n          enforceOrder(startLoc, modifier, modifier, \"override\");\n          enforceOrder(startLoc, modifier, modifier, \"static\");\n          enforceOrder(startLoc, modifier, modifier, \"readonly\");\n          modified.accessibility = modifier;\n        }\n      } else if (tsIsVarianceAnnotations(modifier)) {\n        if (modified[modifier]) {\n          this.raise(TSErrors.DuplicateModifier, {\n            at: startLoc,\n            modifier\n          });\n        }\n\n        modified[modifier] = true;\n        enforceOrder(startLoc, modifier, \"in\", \"out\");\n      } else {\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(TSErrors.DuplicateModifier, {\n            at: startLoc,\n            modifier\n          });\n        } else {\n          enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n          enforceOrder(startLoc, modifier, \"static\", \"override\");\n          enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n          enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n          incompatible(startLoc, modifier, \"declare\", \"override\");\n          incompatible(startLoc, modifier, \"static\", \"abstract\");\n        }\n\n        modified[modifier] = true;\n      }\n\n      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\n        this.raise(errorTemplate, {\n          at: startLoc,\n          modifier\n        });\n      }\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(8);\n\n      case \"HeritageClauseElement\":\n        return this.match(5);\n\n      case \"TupleElementTypes\":\n        return this.match(3);\n\n      case \"TypeParametersOrArguments\":\n        return this.match(48);\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {\n    const result = [];\n    let trailingCommaPos = -1;\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      trailingCommaPos = -1;\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(12)) {\n        trailingCommaPos = this.state.lastTokStart;\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(12);\n      }\n\n      return undefined;\n    }\n\n    if (refTrailingCommaPos) {\n      refTrailingCommaPos.value = trailingCommaPos;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(0);\n      } else {\n        this.expect(47);\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);\n\n    if (bracket) {\n      this.expect(3);\n    } else {\n      this.expect(48);\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(83);\n    this.expect(10);\n\n    if (!this.match(129)) {\n      this.raise(TSErrors.UnsupportedImportTypeArgument, {\n        at: this.state.startLoc\n      });\n    }\n\n    node.argument = super.parseExprAtom();\n    this.expect(11);\n\n    if (this.eat(16)) {\n      node.qualifier = this.tsParseEntityName();\n    }\n\n    if (this.match(47)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName() {\n    let allowReservedWords = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let entity = this.parseIdentifier(allowReservedWords);\n\n    while (this.eat(16)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName();\n\n    if (!this.hasPrecedingLineBreak() && this.match(47)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(87);\n\n    if (this.match(83)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName();\n    }\n\n    if (!this.hasPrecedingLineBreak() && this.match(47)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseInOutModifiers(node) {\n    this.tsParseModifiers({\n      modified: node,\n      allowedModifiers: [\"in\", \"out\"],\n      disallowedModifiers: [\"public\", \"private\", \"protected\", \"readonly\", \"declare\", \"abstract\", \"override\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter\n    });\n  }\n\n  tsParseNoneModifiers(node) {\n    this.tsParseModifiers({\n      modified: node,\n      allowedModifiers: [],\n      disallowedModifiers: [\"in\", \"out\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions\n    });\n  }\n\n  tsParseTypeParameter() {\n    let parseModifiers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.tsParseNoneModifiers.bind(this);\n    const node = this.startNode();\n    parseModifiers(node);\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsEatThenParseType(81);\n    node.default = this.tsEatThenParseType(29);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters(parseModifiers) {\n    if (this.match(47)) {\n      return this.tsParseTypeParameters(parseModifiers);\n    }\n  }\n\n  tsParseTypeParameters(parseModifiers) {\n    const node = this.startNode();\n\n    if (this.match(47) || this.match(138)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    const refTrailingCommaPos = {\n      value: -1\n    };\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this, parseModifiers), false, true, refTrailingCommaPos);\n\n    if (node.params.length === 0) {\n      this.raise(TSErrors.EmptyTypeParameters, {\n        at: node\n      });\n    }\n\n    if (refTrailingCommaPos.value !== -1) {\n      this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n    }\n\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type !== 75) return null;\n    this.next();\n    const typeReference = this.tsParseTypeReference();\n\n    if (typeReference.typeParameters) {\n      this.raise(TSErrors.CannotFindName, {\n        at: typeReference.typeName,\n        name: \"const\"\n      });\n    }\n\n    return typeReference;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === 19;\n    const paramsKey = \"parameters\";\n    const returnTypeKey = \"typeAnnotation\";\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(10);\n    signature[paramsKey] = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return super.parseBindingList(11, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(TSErrors.UnsupportedSignatureParameterKind, {\n          at: pattern,\n          type: pattern.type\n        });\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(12) && !this.isLineTerminator()) {\n      this.expect(13);\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(14, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n\n    if (tokenIsIdentifier(this.state.type)) {\n      this.next();\n      return this.match(14);\n    }\n\n    return false;\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(0);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(3);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(17)) node.optional = true;\n    const nodeAny = node;\n\n    if (this.match(10) || this.match(47)) {\n      if (readonly) {\n        this.raise(TSErrors.ReadonlyForMethodSignature, {\n          at: node\n        });\n      }\n\n      const method = nodeAny;\n\n      if (method.kind && this.match(47)) {\n        this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n          at: this.state.curPosition()\n        });\n      }\n\n      this.tsFillSignature(14, method);\n      this.tsParseTypeMemberSemicolon();\n      const paramsKey = \"parameters\";\n      const returnTypeKey = \"typeAnnotation\";\n\n      if (method.kind === \"get\") {\n        if (method[paramsKey].length > 0) {\n          this.raise(Errors.BadGetterArity, {\n            at: this.state.curPosition()\n          });\n\n          if (this.isThisParam(method[paramsKey][0])) {\n            this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n              at: this.state.curPosition()\n            });\n          }\n        }\n      } else if (method.kind === \"set\") {\n        if (method[paramsKey].length !== 1) {\n          this.raise(Errors.BadSetterArity, {\n            at: this.state.curPosition()\n          });\n        } else {\n          const firstParameter = method[paramsKey][0];\n\n          if (this.isThisParam(firstParameter)) {\n            this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n              at: this.state.curPosition()\n            });\n          }\n\n          if (firstParameter.type === \"Identifier\" && firstParameter.optional) {\n            this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n              at: this.state.curPosition()\n            });\n          }\n\n          if (firstParameter.type === \"RestElement\") {\n            this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n              at: this.state.curPosition()\n            });\n          }\n        }\n\n        if (method[returnTypeKey]) {\n          this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n            at: method[returnTypeKey]\n          });\n        }\n      } else {\n        method.kind = \"method\";\n      }\n\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(10) || this.match(47)) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(77)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(10) || this.match(47)) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    this.tsParseModifiers({\n      modified: node,\n      allowedModifiers: [\"readonly\"],\n      disallowedModifiers: [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\", \"override\"]\n    });\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      return idx;\n    }\n\n    super.parsePropertyName(node);\n\n    if (!node.computed && node.key.type === \"Identifier\" && (node.key.name === \"get\" || node.key.name === \"set\") && this.tsTokenCanFollowModifier()) {\n      node.kind = node.key.name;\n      super.parsePropertyName(node);\n    }\n\n    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(5);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(8);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(53)) {\n      return this.isContextual(118);\n    }\n\n    if (this.isContextual(118)) {\n      this.next();\n    }\n\n    if (!this.match(0)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(58);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsExpectThenParseType(58);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(5);\n\n    if (this.match(53)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(118);\n    } else if (this.eatContextual(118)) {\n      node.readonly = true;\n    }\n\n    this.expect(0);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(93) ? this.tsParseType() : null;\n    this.expect(3);\n\n    if (this.match(53)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(17);\n    } else if (this.eat(17)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(8);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n\n      const {\n        type\n      } = elementNode;\n\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(TSErrors.OptionalTypeBeforeRequired, {\n          at: elementNode\n        });\n      }\n\n      seenOptionalElement || (seenOptionalElement = type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\");\n      let checkType = type;\n\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        checkType = elementNode.type;\n      }\n\n      const isLabeled = checkType === \"TSNamedTupleMember\";\n      (_labeledElements = labeledElements) != null ? _labeledElements : labeledElements = isLabeled;\n\n      if (labeledElements !== isLabeled) {\n        this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n          at: elementNode\n        });\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    const {\n      start: startPos,\n      startLoc\n    } = this.state;\n    const rest = this.eat(21);\n    let type = this.tsParseType();\n    const optional = this.eat(17);\n    const labeled = this.eat(14);\n\n    if (labeled) {\n      const labeledNode = this.startNodeAtNode(type);\n      labeledNode.optional = optional;\n\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n        labeledNode.label = type.typeName;\n      } else {\n        this.raise(TSErrors.InvalidTupleMemberLabel, {\n          at: type\n        });\n        labeledNode.label = type;\n      }\n\n      labeledNode.elementType = this.tsParseType();\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    if (rest) {\n      const restNode = this.startNodeAt(startPos, startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(10);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(11);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type, abstract) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      node.abstract = !!abstract;\n      if (abstract) this.next();\n      this.next();\n    }\n\n    this.tsInAllowConditionalTypesContext(() => this.tsFillSignature(19, node));\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case 130:\n        case 131:\n        case 129:\n        case 85:\n        case 86:\n          return super.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = super.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(113) && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case 129:\n      case 130:\n      case 131:\n      case 85:\n      case 86:\n        return this.tsParseLiteralTypeNode();\n\n      case 53:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n\n          if (nextToken.type !== 130 && nextToken.type !== 131) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case 78:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case 87:\n        return this.tsParseTypeQuery();\n\n      case 83:\n        return this.tsParseImportType();\n\n      case 5:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case 0:\n        return this.tsParseTupleType();\n\n      case 10:\n        return this.tsParseParenthesizedType();\n\n      case 25:\n      case 24:\n        return this.tsParseTemplateLiteralType();\n\n      default:\n        {\n          const {\n            type\n          } = this.state;\n\n          if (tokenIsIdentifier(type) || type === 88 || type === 84) {\n            const nodeType = type === 88 ? \"TSVoidKeyword\" : type === 84 ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n            if (nodeType !== undefined && this.lookaheadCharCode() !== 46) {\n              const node = this.startNode();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n\n            return this.tsParseTypeReference();\n          }\n        }\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(0)) {\n      if (this.match(3)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(3);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(3);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator() {\n    const node = this.startNode();\n    const operator = this.state.value;\n    this.next();\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(TSErrors.UnexpectedReadonly, {\n          at: node\n        });\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(112);\n    const typeParameter = this.startNode();\n    typeParameter.name = this.tsParseTypeParameterName();\n    typeParameter.constraint = this.tsTryParse(() => this.tsParseConstraintForInferType());\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseConstraintForInferType() {\n    if (this.eat(81)) {\n      const constraint = this.tsInDisallowConditionalTypesContext(() => this.tsParseType());\n\n      if (this.state.inDisallowConditionalTypesContext || !this.match(17)) {\n        return constraint;\n      }\n    }\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n    return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(112) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(() => this.tsParseArrayTypeOrHigher());\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    const node = this.startNode();\n    const hasLeadingOperator = this.eat(operator);\n    const types = [];\n\n    do {\n      types.push(parseConstituentType());\n    } while (this.eat(operator));\n\n    if (types.length === 1 && !hasLeadingOperator) {\n      return types[0];\n    }\n\n    node.types = types;\n    return this.finishNode(node, kind);\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), 45);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), 43);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.match(47)) {\n      return true;\n    }\n\n    return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (tokenIsIdentifier(this.state.type) || this.match(78)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(5)) {\n      const {\n        errors\n      } = this.state;\n      const previousErrorCount = errors.length;\n\n      try {\n        this.parseObjectLike(8, true);\n        return errors.length === previousErrorCount;\n      } catch (_unused) {\n        return false;\n      }\n    }\n\n    if (this.match(0)) {\n      this.next();\n      const {\n        errors\n      } = this.state;\n      const previousErrorCount = errors.length;\n\n      try {\n        super.parseBindingList(3, 93, true);\n        return errors.length === previousErrorCount;\n      } catch (_unused2) {\n        return false;\n      }\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(11) || this.match(21)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) {\n        return true;\n      }\n\n      if (this.match(11)) {\n        this.next();\n\n        if (this.match(19)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const node = this.startNode();\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(78)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          node.typeAnnotation = null;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          this.resetStartLocationFromNode(thisTypePredicate, node);\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        node.typeAnnotation = null;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(14) ? this.tsParseTypeOrTypePredicateAnnotation(14) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(14) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(14);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(113) && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (this.state.type !== 106) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!tokenIsIdentifier(this.state.type) && !this.match(78)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.lastTokStartLoc,\n        reservedWord: \"asserts\"\n      });\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation() {\n    let eatColon = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.startNode();\n    this.tsInType(() => {\n      if (eatColon) this.expect(14);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsInDisallowConditionalTypesContext(() => this.tsParseNonConditionalType());\n    this.expect(17);\n    node.trueType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());\n    this.expect(14);\n    node.falseType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  isAbstractConstructorSignature() {\n    return this.isContextual(120) && this.lookahead().type === 77;\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(77)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    } else if (this.isAbstractConstructorSignature()) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\", true);\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n      this.raise(TSErrors.ReservedTypeAssertion, {\n        at: this.state.startLoc\n      });\n    }\n\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expect(48);\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(token) {\n    const originalStartLoc = this.state.startLoc;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", () => {\n      const node = this.startNode();\n      node.expression = this.tsParseEntityName();\n\n      if (this.match(47)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    });\n\n    if (!delimitedList.length) {\n      this.raise(TSErrors.EmptyHeritageClauseType, {\n        at: originalStartLoc,\n        token\n      });\n    }\n\n    return delimitedList;\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    let properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (this.hasFollowingLineBreak()) return null;\n    this.expectContextual(125);\n    if (properties.declare) node.declare = true;\n\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_TS_INTERFACE);\n    } else {\n      node.id = null;\n      this.raise(TSErrors.MissingInterfaceName, {\n        at: this.state.startLoc\n      });\n    }\n\n    node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers.bind(this));\n\n    if (this.eat(81)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkIdentifier(node.id, BIND_TS_TYPE);\n    node.typeAnnotation = this.tsInType(() => {\n      node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers.bind(this));\n      this.expect(29);\n\n      if (this.isContextual(111) && this.lookahead().type !== 16) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsInDisallowConditionalTypesContext(cb) {\n    const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;\n    this.state.inDisallowConditionalTypesContext = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;\n    }\n  }\n\n  tsInAllowConditionalTypesContext(cb) {\n    const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;\n    this.state.inDisallowConditionalTypesContext = false;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(129) ? super.parseStringLiteral(this.state.value) : this.parseIdentifier(true);\n\n    if (this.eat(29)) {\n      node.initializer = super.parseMaybeAssignAllowIn();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node) {\n    let properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (properties.const) node.const = true;\n    if (properties.declare) node.declare = true;\n    this.expectContextual(122);\n    node.id = this.parseIdentifier();\n    this.checkIdentifier(node.id, node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n    this.expect(5);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(8);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(5);\n    super.parseBlockOrModuleBlockBody(node.body = [], undefined, true, 8);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node) {\n    let nested = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkIdentifier(node.id, BIND_TS_NAMESPACE);\n    }\n\n    if (this.eat(16)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(109)) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(129)) {\n      node.id = super.parseStringLiteral(this.state.value);\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(5)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkIdentifier(node.id, BIND_LEXICAL);\n    this.expect(29);\n    const moduleReference = this.tsParseModuleReference();\n\n    if (node.importKind === \"type\" && moduleReference.type !== \"TSExternalModuleReference\") {\n      this.raise(TSErrors.ImportAliasHasImportType, {\n        at: moduleReference\n      });\n    }\n\n    node.moduleReference = moduleReference;\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(116) && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(116);\n    this.expect(10);\n\n    if (!this.match(129)) {\n      throw this.unexpected();\n    }\n\n    node.expression = super.parseExprAtom();\n    this.expect(11);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(99)) {\n      starttype = 74;\n      kind = \"let\";\n    }\n\n    return this.tsInAmbientContext(() => {\n      if (starttype === 68) {\n        nany.declare = true;\n        return super.parseFunctionStatement(nany, false, true);\n      }\n\n      if (starttype === 80) {\n        nany.declare = true;\n        return this.parseClass(nany, true, false);\n      }\n\n      if (starttype === 122) {\n        return this.tsParseEnumDeclaration(nany, {\n          declare: true\n        });\n      }\n\n      if (starttype === 109) {\n        return this.tsParseAmbientExternalModuleDeclaration(nany);\n      }\n\n      if (starttype === 75 || starttype === 74) {\n        if (!this.match(75) || !this.isLookaheadContextual(\"enum\")) {\n          nany.declare = true;\n          return this.parseVarStatement(nany, kind || this.state.value, true);\n        }\n\n        this.expect(75);\n        return this.tsParseEnumDeclaration(nany, {\n          const: true,\n          declare: true\n        });\n      }\n\n      if (starttype === 125) {\n        const result = this.tsParseInterfaceDeclaration(nany, {\n          declare: true\n        });\n        if (result) return result;\n      }\n\n      if (tokenIsIdentifier(starttype)) {\n        return this.tsParseDeclaration(nany, this.state.value, true);\n      }\n    });\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(5)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type))) {\n          return this.tsParseAbstractDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (this.tsCheckLineTerminator(next)) {\n          if (this.match(129)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminator(next) {\n    if (next) {\n      if (this.hasFollowingLineBreak()) return false;\n      this.next();\n      return true;\n    }\n\n    return !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.match(47)) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(19);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return super.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArgumentsInExpression() {\n    if (this.reScan_lt() !== 47) {\n      return undefined;\n    }\n\n    return this.tsParseTypeArguments();\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expect(47);\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n\n    if (node.params.length === 0) {\n      this.raise(TSErrors.EmptyTypeArguments, {\n        at: node\n      });\n    }\n\n    this.expect(48);\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    return tokenIsTSDeclarationStart(this.state.type);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n    let override = false;\n\n    if (allowModifiers !== undefined) {\n      const modified = {};\n      this.tsParseModifiers({\n        modified,\n        allowedModifiers: [\"public\", \"private\", \"protected\", \"override\", \"readonly\"]\n      });\n      accessibility = modified.accessibility;\n      override = modified.override;\n      readonly = modified.readonly;\n\n      if (allowModifiers === false && (accessibility || readonly || override)) {\n        this.raise(TSErrors.UnexpectedParameterModifier, {\n          at: startLoc\n        });\n      }\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly || override) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n      if (override) pp.override = override;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(TSErrors.UnsupportedParameterPropertyKind, {\n          at: pp\n        });\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  isSimpleParameter(node) {\n    return node.type === \"TSParameterProperty\" && super.isSimpleParameter(node.parameter) || super.isSimpleParameter(node);\n  }\n\n  parseFunctionBodyAndFinish(node, type) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (this.match(14)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" || type === \"ClassPrivateMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(5) && this.isLineTerminator()) {\n      return this.finishNode(node, bodilessType);\n    }\n\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n      this.raise(TSErrors.DeclareFunctionHasImplementation, {\n        at: node\n      });\n\n      if (node.declare) {\n        return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n      }\n    }\n\n    return super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkIdentifier(node.id, BIND_TS_AMBIENT);\n    } else {\n      super.registerFunctionStatementId(node);\n    }\n  }\n\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(TSErrors.UnexpectedTypeAnnotation, {\n          at: node.typeAnnotation\n        });\n      }\n    });\n  }\n\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n\n    if (node.type === \"ArrayExpression\") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(35)) {\n      this.state.canStartJSXElement = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    let isOptionalCall = false;\n\n    if (this.match(18) && this.lookaheadCharCode() === 60) {\n      if (noCalls) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = isOptionalCall = true;\n      this.next();\n    }\n\n    if (this.match(47) || this.match(51)) {\n      let missingParenErrorLoc;\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n        if (!typeArguments) return;\n\n        if (isOptionalCall && !this.match(10)) {\n          missingParenErrorLoc = this.state.curPosition();\n          return;\n        }\n\n        if (tokenIsTemplate(this.state.type)) {\n          const result = super.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n          result.typeParameters = typeArguments;\n          return result;\n        }\n\n        if (!noCalls && this.eat(10)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n          node.arguments = this.parseCallExpressionArguments(11, false);\n          this.tsCheckForInvalidTypeCasts(node.arguments);\n          node.typeParameters = typeArguments;\n\n          if (state.optionalChainMember) {\n            node.optional = isOptionalCall;\n          }\n\n          return this.finishCallExpression(node, state.optionalChainMember);\n        }\n\n        const tokenType = this.state.type;\n\n        if (tokenType === 48 || tokenType !== 10 && tokenCanStartExpression(tokenType) && !this.hasPrecedingLineBreak()) {\n          return;\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.expression = base;\n        node.typeParameters = typeArguments;\n        return this.finishNode(node, \"TSInstantiationExpression\");\n      });\n\n      if (missingParenErrorLoc) {\n        this.unexpected(missingParenErrorLoc, 10);\n      }\n\n      if (result) {\n        if (result.type === \"TSInstantiationExpression\" && (this.match(16) || this.match(18) && this.lookaheadCharCode() !== 40)) {\n          this.raise(TSErrors.InvalidPropertyAccessAfterInstantiationExpression, {\n            at: this.state.startLoc\n          });\n        }\n\n        return result;\n      }\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewCallee(node) {\n    var _callee$extra;\n\n    super.parseNewCallee(node);\n    const {\n      callee\n    } = node;\n\n    if (callee.type === \"TSInstantiationExpression\" && !((_callee$extra = callee.extra) != null && _callee$extra.parenthesized)) {\n      node.typeParameters = callee.typeParameters;\n      node.callee = callee.expression;\n    }\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(93)) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (!this.state.isAmbientContext) {\n      super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n    }\n  }\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    node.importKind = \"value\";\n\n    if (tokenIsIdentifier(this.state.type) || this.match(55) || this.match(5)) {\n      let ahead = this.lookahead();\n\n      if (this.isContextual(126) && ahead.type !== 12 && ahead.type !== 97 && ahead.type !== 29) {\n        node.importKind = \"type\";\n        this.next();\n        ahead = this.lookahead();\n      }\n\n      if (tokenIsIdentifier(this.state.type) && ahead.type === 29) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n        at: importNode\n      });\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(83)) {\n      this.next();\n\n      if (this.isContextual(126) && this.lookaheadCharCode() !== 61) {\n        node.importKind = \"type\";\n        this.next();\n      } else {\n        node.importKind = \"value\";\n      }\n\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(29)) {\n      const assign = node;\n      assign.expression = super.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(93)) {\n      const decl = node;\n      this.expectContextual(124);\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(126) && this.lookahead().type === 5) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(120) && this.lookahead().type === 80;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      cls.abstract = true;\n      return this.parseClass(cls, true, true);\n    }\n\n    if (this.match(125)) {\n      const result = this.tsParseInterfaceDeclaration(this.startNode());\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseVarStatement(node, kind) {\n    let allowMissingInitializer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const {\n      isAmbientContext\n    } = this.state;\n    const declaration = super.parseVarStatement(node, kind, allowMissingInitializer || isAmbientContext);\n    if (!isAmbientContext) return declaration;\n\n    for (const {\n      id,\n      init\n    } of declaration.declarations) {\n      if (!init) continue;\n\n      if (kind !== \"const\" || !!id.typeAnnotation) {\n        this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {\n          at: init\n        });\n      } else if (init.type !== \"StringLiteral\" && init.type !== \"BooleanLiteral\" && init.type !== \"NumericLiteral\" && init.type !== \"BigIntLiteral\" && (init.type !== \"TemplateLiteral\" || init.expressions.length > 0) && !isPossiblyLiteralEnum(init)) {\n        this.raise(TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference, {\n          at: init\n        });\n      }\n    }\n\n    return declaration;\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.match(75) && this.isLookaheadContextual(\"enum\")) {\n      const node = this.startNode();\n      this.expect(75);\n      return this.tsParseEnumDeclaration(node, {\n        const: true\n      });\n    }\n\n    if (this.isContextual(122)) {\n      return this.tsParseEnumDeclaration(this.startNode());\n    }\n\n    if (this.isContextual(125)) {\n      const result = this.tsParseInterfaceDeclaration(this.startNode());\n      if (result) return result;\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  tsHasSomeModifiers(member, modifiers) {\n    return modifiers.some(modifier => {\n      if (tsIsAccessModifier(modifier)) {\n        return member.accessibility === modifier;\n      }\n\n      return !!member[modifier];\n    });\n  }\n\n  tsIsStartOfStaticBlocks() {\n    return this.isContextual(104) && this.lookaheadCharCode() === 123;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const modifiers = [\"declare\", \"private\", \"public\", \"protected\", \"override\", \"abstract\", \"readonly\", \"static\"];\n    this.tsParseModifiers({\n      modified: member,\n      allowedModifiers: modifiers,\n      disallowedModifiers: [\"in\", \"out\"],\n      stopOnStartOfClassStaticBlock: true,\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions\n    });\n\n    const callParseClassMemberWithIsStatic = () => {\n      if (this.tsIsStartOfStaticBlocks()) {\n        this.next();\n        this.next();\n\n        if (this.tsHasSomeModifiers(member, modifiers)) {\n          this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n            at: this.state.curPosition()\n          });\n        }\n\n        super.parseClassStaticBlock(classBody, member);\n      } else {\n        this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);\n      }\n    };\n\n    if (member.declare) {\n      this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n    } else {\n      callParseClassMemberWithIsStatic();\n    }\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(TSErrors.IndexSignatureHasAbstract, {\n          at: member\n        });\n      }\n\n      if (member.accessibility) {\n        this.raise(TSErrors.IndexSignatureHasAccessibility, {\n          at: member,\n          modifier: member.accessibility\n        });\n      }\n\n      if (member.declare) {\n        this.raise(TSErrors.IndexSignatureHasDeclare, {\n          at: member\n        });\n      }\n\n      if (member.override) {\n        this.raise(TSErrors.IndexSignatureHasOverride, {\n          at: member\n        });\n      }\n\n      return;\n    }\n\n    if (!this.state.inAbstractClass && member.abstract) {\n      this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n        at: member\n      });\n    }\n\n    if (member.override) {\n      if (!state.hadSuperClass) {\n        this.raise(TSErrors.OverrideNotInSubClass, {\n          at: member\n        });\n      }\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(17);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(10)) {\n      this.raise(TSErrors.ClassMethodHasReadonly, {\n        at: methodOrProp\n      });\n    }\n\n    if (methodOrProp.declare && this.match(10)) {\n      this.raise(TSErrors.ClassMethodHasDeclare, {\n        at: methodOrProp\n      });\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (!this.state.maybeInArrowParameters || !this.match(17)) {\n      return super.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n    if (!result.node) {\n      if (result.error) {\n        super.setOptionalParametersError(refExpressionErrors, result.error);\n      }\n\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(17)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(14)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    if (!this.state.isAmbientContext && this.isContextual(121)) {\n      return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(121);\n\n    if (isDeclare && (this.isContextual(121) || !this.shouldParseExportDeclaration())) {\n      throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n        at: this.state.startLoc\n      });\n    }\n\n    const isIdentifier = tokenIsIdentifier(this.state.type);\n    const declaration = isIdentifier && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(node);\n    if (!declaration) return null;\n\n    if (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare) {\n      node.exportKind = \"type\";\n    }\n\n    if (isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId, bindingType) {\n    if ((!isStatement || optionalId) && this.isContextual(110)) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers.bind(this));\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(35)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (this.state.isAmbientContext && !(node.readonly && !node.typeAnnotation) && this.match(29)) {\n      this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n        at: this.state.startLoc\n      });\n    }\n\n    if (node.abstract && this.match(29)) {\n      const {\n        key\n      } = node;\n      this.raise(TSErrors.AbstractPropertyHasInitializer, {\n        at: this.state.startLoc,\n        propertyName: key.type === \"Identifier\" && !node.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`\n      });\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(TSErrors.PrivateElementHasAbstract, {\n        at: node\n      });\n    }\n\n    if (node.accessibility) {\n      this.raise(TSErrors.PrivateElementHasAccessibility, {\n        at: node,\n        modifier: node.accessibility\n      });\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n\n    if (typeParameters && isConstructor) {\n      this.raise(TSErrors.ConstructorHasTypeParameters, {\n        at: typeParameters\n      });\n    }\n\n    const {\n      declare = false,\n      kind\n    } = method;\n\n    if (declare && (kind === \"get\" || kind === \"set\")) {\n      this.raise(TSErrors.DeclareAccessor, {\n        at: method,\n        kind\n      });\n    }\n\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  declareClassPrivateMethodInScope(node, kind) {\n    if (node.type === \"TSDeclareMethod\") return;\n    if (node.type === \"MethodDefinition\" && !node.value.body) return;\n    super.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && (this.match(47) || this.match(51))) {\n      node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n    }\n\n    if (this.eatContextual(110)) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n    return super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && !this.hasPrecedingLineBreak() && this.eat(35)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(14)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(138) || this.match(47))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const currentContext = context[context.length - 1];\n\n      if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n        context.pop();\n      }\n    }\n\n    if (!((_jsx = jsx) != null && _jsx.error) && !this.match(47)) {\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    if (!state || state === this.state) state = this.state.clone();\n    let typeParameters;\n    const arrow = this.tryParse(abort => {\n      var _expr$extra, _typeParameters;\n\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n        abort();\n      }\n\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n\n    if (!arrow.error && !arrow.aborted) {\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n      return arrow.node;\n    }\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if ((_jsx2 = jsx) != null && _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n      return arrow.node;\n    }\n\n    if ((_typeCast = typeCast) != null && _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if ((_typeCast2 = typeCast) != null && _typeCast2.thrown) throw typeCast.error;\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n  }\n\n  reportReservedArrowTypeParam(node) {\n    var _node$extra;\n\n    if (node.params.length === 1 && !((_node$extra = node.extra) != null && _node$extra.trailingComma) && this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n      this.raise(TSErrors.ReservedArrowTypeParam, {\n        at: node\n      });\n    }\n  }\n\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    if (!this.hasPlugin(\"jsx\") && this.match(47)) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(14)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n        if (this.canInsertSemicolon() || !this.match(19)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(17)) {\n      if (param.type !== \"Identifier\" && !this.state.isAmbientContext && !this.state.inType) {\n        this.raise(TSErrors.PatternIsOptional, {\n          at: param\n        });\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return this.isAssignable(node.expression, isBinding);\n\n      case \"TSParameterProperty\":\n        return true;\n\n      default:\n        return super.isAssignable(node, isBinding);\n    }\n  }\n\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.toAssignableParenthesizedExpression(node, isLHS);\n        break;\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        if (isLHS) {\n          this.expressionScope.recordArrowParemeterBindingError(TSErrors.UnexpectedTypeCastInParameter, {\n            at: node\n          });\n        } else {\n          this.raise(TSErrors.UnexpectedTypeCastInParameter, {\n            at: node\n          });\n        }\n\n        this.toAssignable(node.expression, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n          node.left = this.typeCastToParameter(node.left);\n        }\n\n      default:\n        super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableParenthesizedExpression(node, isLHS) {\n    switch (node.expression.type) {\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n      case \"ParenthesizedExpression\":\n        this.toAssignable(node.expression, isLHS);\n        break;\n\n      default:\n        super.toAssignable(node, isLHS);\n    }\n  }\n\n  checkToRestConversion(node, allowPattern) {\n    switch (node.type) {\n      case \"TSAsExpression\":\n      case \"TSTypeAssertion\":\n      case \"TSNonNullExpression\":\n        this.checkToRestConversion(node.expression, false);\n        break;\n\n      default:\n        super.checkToRestConversion(node, allowPattern);\n    }\n  }\n\n  isValidLVal(type, isUnparenthesizedInAssign, binding) {\n    return getOwn$1({\n      TSTypeCastExpression: true,\n      TSParameterProperty: \"parameter\",\n      TSNonNullExpression: \"expression\",\n      TSAsExpression: (binding !== BIND_NONE || !isUnparenthesizedInAssign) && [\"expression\", true],\n      TSTypeAssertion: (binding !== BIND_NONE || !isUnparenthesizedInAssign) && [\"expression\", true]\n    }, type) || super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 78:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.match(47) || this.match(51)) {\n      const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n      if (this.match(10)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(null, 10);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {\n      this.next();\n      return false;\n    } else {\n      return super.checkCommaAfterRest(close);\n    }\n  }\n\n  isClassMethod() {\n    return this.match(47) || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(35) || this.match(14) || super.isClassProperty();\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(TSErrors.TypeAnnotationAfterAssign, {\n        at: node.typeAnnotation\n      });\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType) {\n      if (code === 62) {\n        return this.finishOp(48, 1);\n      }\n\n      if (code === 60) {\n        return this.finishOp(47, 1);\n      }\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  reScan_lt_gt() {\n    const {\n      type\n    } = this.state;\n\n    if (type === 47) {\n      this.state.pos -= 1;\n      this.readToken_lt();\n    } else if (type === 48) {\n      this.state.pos -= 1;\n      this.readToken_gt();\n    }\n  }\n\n  reScan_lt() {\n    const {\n      type\n    } = this.state;\n\n    if (type === 51) {\n      this.state.pos -= 2;\n      this.finishOp(47, 1);\n      return 47;\n    }\n\n    return type;\n  }\n\n  toAssignableList(exprList, trailingCommaLoc, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if ((expr == null ? void 0 : expr.type) === \"TSTypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  shouldParseArrow(params) {\n    if (this.match(14)) {\n      return params.every(expr => this.isAssignable(expr, true));\n    }\n\n    return super.shouldParseArrow(params);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(14) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.match(47) || this.match(51)) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && this.isThisParam(firstParam);\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n\n    return param;\n  }\n\n  tsInAmbientContext(cb) {\n    const oldIsAmbientContext = this.state.isAmbientContext;\n    this.state.isAmbientContext = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.isAmbientContext = oldIsAmbientContext;\n    }\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const oldInAbstractClass = this.state.inAbstractClass;\n    this.state.inAbstractClass = !!node.abstract;\n\n    try {\n      return super.parseClass(node, isStatement, optionalId);\n    } finally {\n      this.state.inAbstractClass = oldInAbstractClass;\n    }\n  }\n\n  tsParseAbstractDeclaration(node) {\n    if (this.match(80)) {\n      node.abstract = true;\n      return this.parseClass(node, true, false);\n    } else if (this.isContextual(125)) {\n      if (!this.hasFollowingLineBreak()) {\n        node.abstract = true;\n        this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n          at: node\n        });\n        return this.tsParseInterfaceDeclaration(node);\n      }\n    } else {\n      this.unexpected(null, 80);\n    }\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope) {\n    const method = super.parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n\n    if (method.abstract) {\n      const hasBody = this.hasPlugin(\"estree\") ? !!method.value.body : !!method.body;\n\n      if (hasBody) {\n        const {\n          key\n        } = method;\n        this.raise(TSErrors.AbstractMethodHasImplementation, {\n          at: method,\n          methodName: key.type === \"Identifier\" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`\n        });\n      }\n    }\n\n    return method;\n  }\n\n  tsParseTypeParameterName() {\n    const typeName = this.parseIdentifier();\n    return typeName.name;\n  }\n\n  shouldParseAsAmbientContext() {\n    return !!this.getPluginOption(\"typescript\", \"dts\");\n  }\n\n  parse() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.parse();\n  }\n\n  getExpression() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.getExpression();\n  }\n\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n    if (!isString && isMaybeTypeOnly) {\n      this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport);\n      return this.finishNode(node, \"ExportSpecifier\");\n    }\n\n    node.exportKind = \"value\";\n    return super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly);\n  }\n\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\n    if (!importedIsString && isMaybeTypeOnly) {\n      this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);\n      return this.finishNode(specifier, \"ImportSpecifier\");\n    }\n\n    specifier.importKind = \"value\";\n    return super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly);\n  }\n\n  parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {\n    const leftOfAsKey = isImport ? \"imported\" : \"local\";\n    const rightOfAsKey = isImport ? \"local\" : \"exported\";\n    let leftOfAs = node[leftOfAsKey];\n    let rightOfAs;\n    let hasTypeSpecifier = false;\n    let canParseAsKeyword = true;\n    const loc = leftOfAs.loc.start;\n\n    if (this.isContextual(93)) {\n      const firstAs = this.parseIdentifier();\n\n      if (this.isContextual(93)) {\n        const secondAs = this.parseIdentifier();\n\n        if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n          rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n          canParseAsKeyword = false;\n        } else {\n          rightOfAs = secondAs;\n          canParseAsKeyword = false;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        canParseAsKeyword = false;\n        rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n      } else {\n        hasTypeSpecifier = true;\n        leftOfAs = firstAs;\n      }\n    } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n      hasTypeSpecifier = true;\n\n      if (isImport) {\n        leftOfAs = this.parseIdentifier(true);\n\n        if (!this.isContextual(93)) {\n          this.checkReservedWord(leftOfAs.name, leftOfAs.loc.start, true, true);\n        }\n      } else {\n        leftOfAs = this.parseModuleExportName();\n      }\n    }\n\n    if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n      this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, {\n        at: loc\n      });\n    }\n\n    node[leftOfAsKey] = leftOfAs;\n    node[rightOfAsKey] = rightOfAs;\n    const kindKey = isImport ? \"importKind\" : \"exportKind\";\n    node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n    if (canParseAsKeyword && this.eatContextual(93)) {\n      node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n    }\n\n    if (!node[rightOfAsKey]) {\n      node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n    }\n\n    if (isImport) {\n      this.checkIdentifier(node[rightOfAsKey], BIND_LEXICAL);\n    }\n  }\n\n};\n\nfunction isPossiblyLiteralEnum(expression) {\n  if (expression.type !== \"MemberExpression\") return false;\n  const {\n    computed,\n    property\n  } = expression;\n\n  if (computed && property.type !== \"StringLiteral\" && (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\nfunction isUncomputedMemberExpressionChain(expression) {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\") return false;\n  if (expression.computed) return false;\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\"\n});\n\nvar placeholders = superClass => class PlaceholdersParserMixin extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(140)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace();\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace();\n      this.expect(140);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(140, 2);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(refExpressionErrors);\n  }\n\n  parseIdentifier(liberal) {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (word !== undefined) {\n      super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n    }\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n  }\n\n  isValidLVal(type, isParenthesized, binding) {\n    return type === \"Placeholder\" || super.isValidLVal(type, isParenthesized, binding);\n  }\n\n  toAssignable(node, isLHS) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n    } else {\n      super.toAssignable(node, isLHS);\n    }\n  }\n\n  isLet(context) {\n    if (super.isLet(context)) {\n      return true;\n    }\n\n    if (!this.isContextual(99)) {\n      return false;\n    }\n\n    if (context) return false;\n    const nextToken = this.lookahead();\n\n    if (nextToken.type === 140) {\n      return true;\n    }\n\n    return false;\n  }\n\n  verifyBreakContinue(node, isBreak) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(node, isBreak);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    if (this.match(14)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = super.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse) {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse);\n  }\n\n  parseFunctionId(requireId) {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(81) || this.match(140) || this.match(5)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n          at: this.state.startLoc\n        });\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    super.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || super.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(node);\n\n    if (!this.isContextual(97) && !this.match(12)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(65)) {\n      const next = this.nextTokenStart();\n\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(tokenLabelName(140), this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(node);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers != null && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(node);\n    node.specifiers = [];\n\n    if (!this.isContextual(97) && !this.match(12)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    node.specifiers.push(this.finishNode(specifier, \"ImportDefaultSpecifier\"));\n\n    if (this.eat(12)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(97);\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource();\n  }\n\n  assertNoSpace() {\n    if (this.state.start > this.state.lastTokEndLoc.index) {\n      this.raise(PlaceholderErrors.UnexpectedSpace, {\n        at: this.state.lastTokEndLoc\n      });\n    }\n  }\n\n};\n\nvar v8intrinsic = superClass => class V8IntrinsicMixin extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(54)) {\n      const v8IntrinsicStartLoc = this.state.startLoc;\n      const node = this.startNode();\n      this.next();\n\n      if (tokenIsIdentifier(this.state.type)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(10)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStartLoc);\n    }\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    return this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors);\n  }\n\n};\n\nfunction hasPlugin(plugins, expectedConfig) {\n  const [expectedName, expectedOptions] = typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n  const expectedKeys = Object.keys(expectedOptions);\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n\n      if (pluginName !== expectedName) {\n        return false;\n      }\n\n      for (const key of expectedKeys) {\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  });\n}\n\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(`\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`);\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\"recordAndTuple\", {\n      syntaxType: \"hash\"\n    }]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\"Cannot combine placeholders plugin and Hack-style pipes.\");\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\"Cannot combine v8intrinsic plugin and Hack-style pipes.\");\n      }\n\n      const topicToken = getPluginOption(plugins, \"pipelineOperator\", \"topicToken\");\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n        throw new Error(`\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`);\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n      }\n\n      const moduleAttributesVersionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n      }\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"asyncDoExpressions\") && !hasPlugin(plugins, \"doExpressions\")) {\n    const error = new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\n\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startColumn: 0,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false,\n  attachComment: true\n};\n\nfunction getOptions(opts) {\n  const options = {};\n\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nconst getOwn = (object, key) => Object.hasOwnProperty.call(object, key) && object[key];\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParemeterBindingError(Errors.InvalidParenthesizedAssignment, {\n            at: node\n          });\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          this.raise(Errors.InvalidParenthesizedAssignment, {\n            at: node\n          });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, {\n          at: node\n        });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (isLast && prop.type === \"RestElement\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingCommaLoc) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc\n            });\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        {\n          const {\n            key,\n            value\n          } = node;\n\n          if (this.isPrivateName(key)) {\n            this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);\n          }\n\n          this.toAssignable(value, isLHS);\n          break;\n        }\n\n      case \"SpreadElement\":\n        {\n          throw new Error(\"Internal @babel/parser error (this is a bug, please report it).\" + \" SpreadElement should be converted by .toAssignable's caller.\");\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingCommaLoc, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, {\n            at: node.left.loc.end\n          });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(prop.kind === \"get\" || prop.kind === \"set\" ? Errors.PatternHasAccessor : Errors.PatternHasMethod, {\n        at: prop.key\n      });\n    } else if (prop.type === \"SpreadElement\") {\n      prop.type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, {\n          at: prop\n        });\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaLoc, isLHS) {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      if (elt.type === \"SpreadElement\") {\n        elt.type = \"RestElement\";\n        const arg = elt.argument;\n        this.checkToRestConversion(arg, true);\n        this.toAssignable(arg, isLHS);\n      } else {\n        this.toAssignable(elt, isLHS);\n      }\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, {\n            at: elt\n          });\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, {\n            at: trailingCommaLoc\n          });\n        }\n      }\n    }\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type !== \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(element => element === null || this.isAssignable(element));\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 0:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(3, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case 5:\n        return this.parseObjectLike(8, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n      }\n\n      if (allowEmpty && this.match(12)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(21)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n\n        if (this.match(26) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc\n          });\n        }\n\n        while (this.match(26)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseBindingRestProperty(prop) {\n    this.next();\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(125);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  parseBindingProperty() {\n    const prop = this.startNode();\n    const {\n      type,\n      start: startPos,\n      startLoc\n    } = this.state;\n\n    if (type === 21) {\n      return this.parseBindingRestProperty(prop);\n    } else if (type === 134) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n\n    prop.method = false;\n    return this.parseObjPropValue(prop, startPos, startLoc, false, false, true, false);\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    var _startLoc, _startPos, _left;\n\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(29)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  isValidLVal(type, isUnparenthesizedInAssign, binding) {\n    return getOwn({\n      AssignmentPattern: \"left\",\n      RestElement: \"argument\",\n      ObjectProperty: \"value\",\n      ParenthesizedExpression: \"expression\",\n      ArrayPattern: \"elements\",\n      ObjectPattern: \"properties\"\n    }, type);\n  }\n\n  checkLVal(expression, _ref89) {\n    let {\n      in: ancestor,\n      binding = BIND_NONE,\n      checkClashes = false,\n      strictModeChanged = false,\n      allowingSloppyLetBinding = !(binding & BIND_SCOPE_LEXICAL),\n      hasParenthesizedAncestor = false\n    } = _ref89;\n\n    var _expression$extra;\n\n    const type = expression.type;\n    if (this.isObjectMethod(expression)) return;\n\n    if (type === \"MemberExpression\") {\n      if (binding !== BIND_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, {\n          at: expression\n        });\n      }\n\n      return;\n    }\n\n    if (expression.type === \"Identifier\") {\n      this.checkIdentifier(expression, binding, strictModeChanged, allowingSloppyLetBinding);\n      const {\n        name\n      } = expression;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, {\n            at: expression\n          });\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(expression.type, !(hasParenthesizedAncestor || (_expression$extra = expression.extra) != null && _expression$extra.parenthesized) && ancestor.type === \"AssignmentExpression\", binding);\n    if (validity === true) return;\n\n    if (validity === false) {\n      const ParseErrorClass = binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n      this.raise(ParseErrorClass, {\n        at: expression,\n        ancestor: ancestor.type === \"UpdateExpression\" ? {\n          type: \"UpdateExpression\",\n          prefix: ancestor.prefix\n        } : {\n          type: ancestor.type\n        }\n      });\n      return;\n    }\n\n    const [key, isParenthesizedExpression] = Array.isArray(validity) ? validity : [validity, type === \"ParenthesizedExpression\"];\n    const nextAncestor = expression.type === \"ArrayPattern\" || expression.type === \"ObjectPattern\" || expression.type === \"ParenthesizedExpression\" ? expression : ancestor;\n\n    for (const child of [].concat(expression[key])) {\n      if (child) {\n        this.checkLVal(child, {\n          in: nextAncestor,\n          binding,\n          checkClashes,\n          allowingSloppyLetBinding,\n          strictModeChanged,\n          hasParenthesizedAncestor: isParenthesizedExpression\n        });\n      }\n    }\n  }\n\n  checkIdentifier(at, bindingType) {\n    let strictModeChanged = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let allowLetBinding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !(bindingType & BIND_SCOPE_LEXICAL);\n\n    if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(at.name, this.inModule) : isStrictBindOnlyReservedWord(at.name))) {\n      if (bindingType === BIND_NONE) {\n        this.raise(Errors.StrictEvalArguments, {\n          at,\n          referenceName: at.name\n        });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, {\n          at,\n          bindingName: at.name\n        });\n      }\n    }\n\n    if (!allowLetBinding && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, {\n        at\n      });\n    }\n\n    if (!(bindingType & BIND_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier, binding) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node, allowPattern) {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, {\n          at: node\n        });\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (!this.match(12)) {\n      return false;\n    }\n\n    this.raise(this.lookaheadCharCode() === close ? Errors.RestTrailingComma : Errors.ElementAfterRest, {\n      at: this.state.startLoc\n    });\n    return true;\n  }\n\n}\n\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, {\n          at: key\n        });\n        return;\n      }\n\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, {\n            at: key\n          });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n\n  getExpression() {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(135)) {\n      this.unexpected();\n    }\n\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n\n    return expr;\n  }\n\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  parseExpressionBase(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n\n    if (this.match(12)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(12)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n\n  setOptionalParametersError(refExpressionErrors, resultError) {\n    var _resultError$loc;\n\n    refExpressionErrors.optionalParametersLoc = (_resultError$loc = resultError == null ? void 0 : resultError.loc) != null ? _resultError$loc : this.state.startLoc;\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(105)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    const {\n      type\n    } = this.state;\n\n    if (type === 10 || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(29)) {\n        this.toAssignable(left, true);\n        node.left = left;\n\n        if (refExpressionErrors.doubleProtoLoc != null && refExpressionErrors.doubleProtoLoc.index >= startPos) {\n          refExpressionErrors.doubleProtoLoc = null;\n        }\n\n        if (refExpressionErrors.shorthandAssignLoc != null && refExpressionErrors.shorthandAssignLoc.index >= startPos) {\n          refExpressionErrors.shorthandAssignLoc = null;\n        }\n\n        if (refExpressionErrors.privateKeyLoc != null && refExpressionErrors.privateKeyLoc.index >= startPos) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null;\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, {\n        in: this.finishNode(node, \"AssignmentExpression\")\n      });\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (this.eat(17)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(14);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(refExpressionErrors) {\n    return this.match(134) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  parseExprOps(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (this.isPrivateName(left)) {\n      const value = this.getPrivateNameSV(left);\n\n      if (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) {\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: left,\n          identifierName: value\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(58))) {\n      let prec = tokenOperatorPrecedence(op);\n\n      if (prec > minPrec) {\n        if (op === 39) {\n          this.expectPlugin(\"pipelineOperator\");\n\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n        const logical = op === 41 || op === 42;\n        const coalesce = op === 40;\n\n        if (coalesce) {\n          prec = tokenOperatorPrecedence(42);\n        }\n\n        this.next();\n\n        if (op === 39 && this.hasPlugin([\"pipelineOperator\", {\n          proposal: \"minimal\"\n        }])) {\n          if (this.state.type === 96 && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === 41 || nextOp === 42) || logical && nextOp === 40) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc\n          });\n        }\n\n        return this.parseExprOp(finishedNode, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case 39:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(105)) {\n                throw this.raise(Errors.PipeBodyIsTighter, {\n                  at: this.state.startLoc\n                });\n              }\n\n              return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);\n  }\n\n  parseHackPipeBody() {\n    var _body$extra;\n\n    const {\n      startLoc\n    } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(body.type);\n\n    if (requiredParentheses && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {\n      this.raise(Errors.PipeUnparenthesizedBody, {\n        at: startLoc,\n        type: body.type\n      });\n    }\n\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipeTopicUnused, {\n        at: startLoc\n      });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(node) {\n    if (this.match(57)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        at: node.argument\n      });\n    }\n  }\n\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(96);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n\n    const update = this.match(34);\n    const node = this.startNode();\n\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(72)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      const isDelete = this.match(89);\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, {\n            at: node\n          });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, {\n            at: node\n          });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node);\n        }\n\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const {\n        type\n      } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54);\n\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, {\n          at: startLoc\n        });\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      const updateExpressionNode = node;\n      this.checkLVal(updateExpressionNode.argument, {\n        in: this.finishNode(updateExpressionNode, \"UpdateExpression\")\n      });\n      return node;\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, {\n        in: expr = this.finishNode(node, \"UpdateExpression\")\n      });\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const {\n      type\n    } = this.state;\n\n    if (!noCalls && type === 15) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === 18) {\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(10)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n    } else {\n      const computed = this.eat(0);\n\n      if (computed || optional || this.eat(16)) {\n        return this.parseMember(base, startPos, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  parseMember(base, startPos, startLoc, state, computed, optional) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(3);\n    } else if (this.match(134)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, {\n          at: startLoc\n        });\n      }\n\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  parseBind(base, startPos, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    this.next();\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n  }\n\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    const node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n    const {\n      maybeAsyncArrow,\n      optionalChainMember\n    } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(11);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(11, base.type === \"Import\", base.type !== \"Super\", node, refExpressionErrors);\n    }\n\n    let finishedNode = this.finishCallExpression(node, optionalChainMember);\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), finishedNode);\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n\n      this.toReferencedArguments(finishedNode);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return finishedNode;\n  }\n\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, {\n        at: startLoc\n      });\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEndLoc.index === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, {\n          at: node,\n          maxArgumentCount: this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? 2 : 1\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, {\n              at: arg\n            });\n          }\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc\n            });\n          }\n\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(19) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(19);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingCommaLoc);\n\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    let node;\n    const {\n      type\n    } = this.state;\n\n    switch (type) {\n      case 79:\n        return this.parseSuper();\n\n      case 83:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(16)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(10)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case 78:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case 90:\n        {\n          return this.parseDo(this.startNode(), false);\n        }\n\n      case 56:\n      case 31:\n        {\n          this.readRegexp();\n          return this.parseRegExpLiteral(this.state.value);\n        }\n\n      case 130:\n        return this.parseNumericLiteral(this.state.value);\n\n      case 131:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case 132:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case 129:\n        return this.parseStringLiteral(this.state.value);\n\n      case 84:\n        return this.parseNullLiteral();\n\n      case 85:\n        return this.parseBooleanLiteral(true);\n\n      case 86:\n        return this.parseBooleanLiteral(false);\n\n      case 10:\n        {\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          return this.parseParenAndDistinguishExpression(canBeArrow);\n        }\n\n      case 2:\n      case 1:\n        {\n          return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);\n        }\n\n      case 0:\n        {\n          return this.parseArrayLike(3, true, false, refExpressionErrors);\n        }\n\n      case 6:\n      case 7:\n        {\n          return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);\n        }\n\n      case 5:\n        {\n          return this.parseObjectLike(8, false, false, refExpressionErrors);\n        }\n\n      case 68:\n        return this.parseFunctionOrFunctionSent();\n\n      case 26:\n        this.parseDecorators();\n\n      case 80:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case 77:\n        return this.parseNewOrNewTarget();\n\n      case 25:\n      case 24:\n        return this.parseTemplate(false);\n\n      case 15:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(Errors.UnsupportedBind, {\n              at: callee\n            });\n          }\n        }\n\n      case 134:\n        {\n          this.raise(Errors.PrivateInExpectedIn, {\n            at: this.state.startLoc,\n            identifierName: this.state.value\n          });\n          return this.parsePrivateName();\n        }\n\n      case 33:\n        {\n          return this.parseTopicReferenceThenEqualsSign(54, \"%\");\n        }\n\n      case 32:\n        {\n          return this.parseTopicReferenceThenEqualsSign(44, \"^\");\n        }\n\n      case 37:\n      case 38:\n        {\n          return this.parseTopicReference(\"hack\");\n        }\n\n      case 44:\n      case 54:\n      case 27:\n        {\n          const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n          if (pipeProposal) {\n            return this.parseTopicReference(pipeProposal);\n          } else {\n            throw this.unexpected();\n          }\n        }\n\n      case 47:\n        {\n          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n          if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n            this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n            break;\n          } else {\n            throw this.unexpected();\n          }\n        }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (this.isContextual(123) && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {\n            return this.parseModuleExpression();\n          }\n\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            const {\n              type\n            } = this.state;\n\n            if (type === 68) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n            } else if (tokenIsIdentifier(type)) {\n              if (this.lookaheadCharCode() === 61) {\n                return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));\n              } else {\n                return id;\n              }\n            } else if (type === 90) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (canBeArrow && this.match(19) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n\n    }\n  }\n\n  parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      this.state.pos--;\n      this.state.end--;\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  parseTopicReference(pipeProposal) {\n    const node = this.startNode();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n    this.next();\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  finishTopicReference(node, startLoc, pipeProposal, tokenType) {\n    if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {\n      const nodeType = pipeProposal === \"smart\" ? \"PipelinePrimaryTopicReference\" : \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(pipeProposal === \"smart\" ? Errors.PrimaryTopicNotAllowed : Errors.PipeTopicUnbound, {\n          at: startLoc\n        });\n      }\n\n      this.registerTopicReference();\n      return this.finishNode(node, nodeType);\n    } else {\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, {\n        at: startLoc,\n        token: tokenLabelName(tokenType)\n      });\n    }\n  }\n\n  testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {\n    switch (pipeProposal) {\n      case \"hack\":\n        {\n          return this.hasPlugin([\"pipelineOperator\", {\n            topicToken: tokenLabelName(tokenType)\n          }]);\n        }\n\n      case \"smart\":\n        return tokenType === 27;\n\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, {\n          at: startLoc\n        });\n    }\n  }\n\n  parseAsyncArrowUnaryFunction(node) {\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition()\n      });\n    }\n\n    this.expect(19);\n    return this.parseArrowExpression(node, params, true);\n  }\n\n  parseDo(node, isAsync) {\n    this.expectPlugin(\"doExpressions\");\n\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n\n    node.async = isAsync;\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    if (isAsync) {\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(Errors.SuperNotAllowed, {\n        at: node\n      });\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(Errors.UnexpectedSuper, {\n        at: node\n      });\n    }\n\n    if (!this.match(10) && !this.match(0) && !this.match(16)) {\n      this.raise(Errors.UnsupportedSuper, {\n        at: node\n      });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName() {\n    const node = this.startNode();\n    const id = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart, this.state.start + 1));\n    const name = this.state.value;\n    this.next();\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.prodParam.hasYield && this.match(16)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n\n      if (this.match(102)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, {\n        at: node.property,\n        target: meta.name,\n        onlyValidPropertyName: propertyName\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n\n    if (this.isContextual(100)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, {\n          at: id\n        });\n      }\n\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode(value, type, node) {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseLiteral(value, type) {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value) {\n    return this.parseLiteral(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value) {\n    return this.parseLiteral(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value) {\n    return this.parseLiteral(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value) {\n    return this.parseLiteral(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value) {\n    const node = this.parseLiteral(value.value, \"RegExpLiteral\");\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(11)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12, refExpressionErrors.optionalParametersLoc === null ? null : refExpressionErrors.optionalParametersLoc);\n\n        if (this.match(11)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(21)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n\n        if (!this.checkCommaAfterRest(41)) {\n          break;\n        }\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(11);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(startPos, startLoc, val);\n  }\n\n  wrapParenthesis(startPos, startLoc, expression) {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startPos);\n      this.takeSurroundingComments(expression, startPos, this.state.lastTokEndLoc.index);\n      return expression;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n\n  shouldParseArrow(params) {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(19)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(16)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(Errors.UnexpectedNewTarget, {\n          at: metaProp\n        });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  parseNew(node) {\n    this.parseNewCallee(node);\n\n    if (this.eat(10)) {\n      const args = this.parseExprList(11);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(node) {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, {\n        at: node.callee\n      });\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.lastTokEndLoc\n      });\n    } else if (this.eat(18)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.startLoc\n      });\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const {\n      start,\n      startLoc,\n      end,\n      value\n    } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt(elemStart, createPositionWithColumnOffset(startLoc, 1));\n\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          at: createPositionWithColumnOffset(startLoc, 2)\n        });\n      }\n    }\n\n    const isTail = this.match(24);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset)\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(finishedNode, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset));\n    return finishedNode;\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n\n      let prop;\n\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n        this.raise(Errors.InvalidRecordProperty, {\n          at: prop\n        });\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node) {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));\n  }\n\n  parsePropertyDefinition(refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(26)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc\n        });\n      }\n\n      while (this.match(26)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(21)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(55);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(55);\n        this.parsePropertyName(prop);\n      }\n\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n\n        if (this.match(55)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, {\n            at: this.state.curPosition(),\n            kind: keyName\n          });\n          this.next();\n        }\n\n        this.parsePropertyName(prop);\n      }\n    }\n\n    return this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n\n  checkGetterSetterParams(method) {\n    var _params;\n\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity, {\n        at: method\n      });\n    }\n\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(Errors.BadSetterRestParameter, {\n        at: method\n      });\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      const finishedProp = this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n\n    if (isAsync || isGenerator || this.match(10)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(14)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n      } else if (this.match(29)) {\n        const shorthandAssignLoc = this.state.startLoc;\n\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc\n          });\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop, refExpressionErrors) {\n    if (this.eat(0)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(3);\n    } else {\n      const {\n        type,\n        value\n      } = this.state;\n      let key;\n\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case 130:\n            key = this.parseNumericLiteral(value);\n            break;\n\n          case 129:\n            key = this.parseStringLiteral(value);\n            break;\n\n          case 131:\n            key = this.parseBigIntLiteral(value);\n            break;\n\n          case 132:\n            key = this.parseDecimalLiteral(value);\n            break;\n\n          case 134:\n            {\n              const privateKeyLoc = this.state.startLoc;\n\n              if (refExpressionErrors != null) {\n                if (refExpressionErrors.privateKeyLoc === null) {\n                  refExpressionErrors.privateKeyLoc = privateKeyLoc;\n                }\n              } else {\n                this.raise(Errors.UnexpectedPrivateField, {\n                  at: privateKeyLoc\n                });\n              }\n\n              key = this.parsePrivateName();\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      prop.key = key;\n\n      if (type !== 134) {\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n    let inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return finishedNode;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaLoc) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n\n    if (!this.match(5) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaLoc) {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params;\n  }\n\n  parseFunctionBodyAndFinish(node, type) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const isExpression = allowExpression && !this.match(5);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          this.raise(Errors.IllegalLanguageModeDirective, {\n            at: (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.loc.end : node\n          });\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node) {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    let strictModeChanged = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    const checkClashes = !allowDuplicates && new Set();\n    const formalParameters = {\n      type: \"FormalParameters\"\n    };\n\n    for (const param of node.params) {\n      this.checkLVal(param, {\n        in: formalParameters,\n        binding: BIND_VAR,\n        checkClashes,\n        strictModeChanged\n      });\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {\n    let elt;\n\n    if (this.match(12)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, {\n          at: this.state.curPosition(),\n          unexpected: \",\"\n        });\n      }\n\n      elt = null;\n    } else if (this.match(21)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(17)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc\n        });\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n    const {\n      startLoc,\n      type\n    } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      if (tokenIsKeyword) {\n        this.replaceToken(128);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (word.length > 10) {\n      return;\n    }\n\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, {\n          at: startLoc\n        });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, {\n          at: startLoc\n        });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError({\n        at: startLoc\n      });\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, {\n          at: startLoc\n        });\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, {\n        at: startLoc,\n        keyword: word\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, {\n        at: startLoc,\n        reservedWord: word\n      });\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.prodParam.hasAwait) return true;\n\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n\n    return false;\n  }\n\n  parseAwait(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter, {\n      at: node\n    });\n\n    if (this.eat(55)) {\n      this.raise(Errors.ObsoleteAwaitStar, {\n        at: node\n      });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait() {\n    if (this.hasPrecedingLineBreak()) return true;\n    const {\n      type\n    } = this.state;\n    return type === 53 || type === 10 || type === 0 || tokenIsTemplate(type) || type === 133 || type === 56 || this.hasPlugin(\"v8intrinsic\") && type === 54;\n  }\n\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter, {\n      at: node\n    });\n    this.next();\n    let delegating = false;\n    let argument = null;\n\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(55);\n\n      switch (this.state.type) {\n        case 13:\n        case 135:\n        case 8:\n        case 11:\n        case 3:\n        case 9:\n        case 14:\n        case 12:\n          if (!delegating) break;\n\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartLoc) {\n    if (this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"smart\"\n    }])) {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt(startPos, startLoc);\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt(startPos, startLoc);\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc) {\n    if (this.match(19)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, {\n        at: this.state.startLoc\n      });\n    }\n\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, {\n        at: startLoc\n      });\n    }\n  }\n\n  withTopicBindingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSmartMixTopicForbiddingContext(callback) {\n    if (this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"smart\"\n    }])) {\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        maxNumOfResolvableTopics: 0,\n        maxTopicIndex: null\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n  parseModuleExpression() {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode();\n    this.next();\n    this.eat(5);\n    const revertScopes = this.initializeScopes(true);\n    this.enterInitialScopes();\n    const program = this.startNode();\n\n    try {\n      node.body = this.parseProgram(program, 8, \"module\");\n    } finally {\n      revertScopes();\n    }\n\n    this.eat(8);\n    return this.finishNode(node, \"ModuleExpression\");\n  }\n\n  parsePropertyNamePrefixOperator(prop) {}\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\nfunction babel7CompatTokens(tokens, input) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const {\n      type\n    } = token;\n\n    if (typeof type === \"number\") {\n      {\n        if (type === 134) {\n          const {\n            loc,\n            start,\n            value,\n            end\n          } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(i, 1, new Token({\n            type: getExportedToken(27),\n            value: \"#\",\n            start: start,\n            end: hashEndPos,\n            startLoc: loc.start,\n            endLoc: hashEndLoc\n          }), new Token({\n            type: getExportedToken(128),\n            value: value,\n            start: hashEndPos,\n            end: end,\n            startLoc: hashEndLoc,\n            endLoc: loc.end\n          }));\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const {\n            loc,\n            start,\n            value,\n            end\n          } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n\n          if (input.charCodeAt(start) === 96) {\n            startToken = new Token({\n              type: getExportedToken(22),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc\n            });\n          } else {\n            startToken = new Token({\n              type: getExportedToken(8),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc\n            });\n          }\n\n          let templateValue, templateElementEnd, templateElementEndLoc, endToken;\n\n          if (type === 24) {\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              type: getExportedToken(22),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end\n            });\n          } else {\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              type: getExportedToken(23),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end\n            });\n          }\n\n          tokens.splice(i, 1, startToken, new Token({\n            type: getExportedToken(20),\n            value: templateValue,\n            start: backquoteEnd,\n            end: templateElementEnd,\n            startLoc: backquoteEndLoc,\n            endLoc: templateElementEndLoc\n          }), endToken);\n          i += 2;\n          continue;\n        }\n      }\n      token.type = getExportedToken(type);\n    }\n  }\n\n  return tokens;\n}\n\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(program) {\n    let end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 135;\n    let sourceType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.options.sourceType;\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, {\n          at,\n          localName\n        });\n      }\n    }\n\n    return this.finishNode(program, \"Program\");\n  }\n\n  stmtToDirective(stmt) {\n    const directive = stmt;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n    directiveLiteral.type = \"DirectiveLiteral\";\n    return directive;\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(28)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(99)) {\n      return false;\n    }\n\n    return this.isLetKeyword(context);\n  }\n\n  isLetKeyword(context) {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n\n    if (nextCh === 92 || nextCh === 91) {\n      return true;\n    }\n\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n\n      if (keywordRelationalOperator.test(this.input)) {\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n\n        if (!isIdentifierChar(endCh) && endCh !== 92) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(26)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = 74;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case 60:\n        return this.parseBreakContinueStatement(node, true);\n\n      case 63:\n        return this.parseBreakContinueStatement(node, false);\n\n      case 64:\n        return this.parseDebuggerStatement(node);\n\n      case 90:\n        return this.parseDoStatement(node);\n\n      case 91:\n        return this.parseForStatement(node);\n\n      case 68:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(Errors.StrictFunction, {\n              at: this.state.startLoc\n            });\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(Errors.SloppyFunction, {\n              at: this.state.startLoc\n            });\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case 80:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case 69:\n        return this.parseIfStatement(node);\n\n      case 70:\n        return this.parseReturnStatement(node);\n\n      case 71:\n        return this.parseSwitchStatement(node);\n\n      case 72:\n        return this.parseThrowStatement(node);\n\n      case 73:\n        return this.parseTryStatement(node);\n\n      case 75:\n      case 74:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc\n          });\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case 92:\n        return this.parseWhileStatement(node);\n\n      case 76:\n        return this.parseWithStatement(node);\n\n      case 5:\n        return this.parseBlock();\n\n      case 13:\n        return this.parseEmptyStatement(node);\n\n      case 83:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n        }\n\n      case 82:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(Errors.UnexpectedImportExport, {\n              at: this.state.startLoc\n            });\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === 83) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(result);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n                at: this.state.startLoc\n              });\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (tokenIsIdentifier(starttype) && expr.type === \"Identifier\" && this.eat(14)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, {\n        at: node\n      });\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(80);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(26)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(82)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(Errors.DecoratorExportClass, {\n          at: this.state.startLoc\n        });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc\n      });\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.match(10)) {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        this.next();\n        expr = this.parseExpression();\n        this.expect(11);\n        expr = this.wrapParenthesis(startPos, startLoc, expr);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(16)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(10)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, isBreak) {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, isBreak) {\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, {\n        at: node,\n        type\n      });\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(10);\n    const val = this.parseExpression();\n    this.expect(11);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(92);\n    node.test = this.parseHeaderExpression();\n    this.eat(13);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(96)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(10);\n\n    if (this.match(13)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(99);\n    const isLet = startsWithLet && this.isLetKeyword();\n\n    if (this.match(74) || this.match(75) || isLet) {\n      const initNode = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(initNode, true, kind);\n      const init = this.finishNode(initNode, \"VariableDeclaration\");\n\n      if ((this.match(58) || this.isContextual(101)) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const startsWithAsync = this.isContextual(95);\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(101);\n\n    if (isForOf) {\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, {\n          at: init\n        });\n      }\n\n      if (awaitAt === null && startsWithAsync && init.type === \"Identifier\") {\n        this.raise(Errors.ForOfAsync, {\n          at: init\n        });\n      }\n    }\n\n    if (isForOf || this.match(58)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, {\n        in: {\n          type\n        }\n      });\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(66) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, {\n        at: this.state.startLoc\n      });\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(5);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(8);) {\n      if (this.match(61) || this.match(65)) {\n        const isCase = this.match(61);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc\n            });\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(14);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, {\n        at: this.state.lastTokEndLoc\n      });\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, {\n      in: {\n        type: \"CatchClause\"\n      },\n      binding: BIND_LEXICAL,\n      allowingSloppyLetBinding: true\n    });\n    return param;\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(62)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(10)) {\n        this.expect(10);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(11);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(67) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, {\n        at: node\n      });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    let allowMissingInitializer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, {\n        at: this.state.startLoc\n      });\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, {\n          at: expr,\n          labelName: maybeName\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type) ? \"loop\" : this.match(71) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock() {\n    let allowDirectives = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let createNewLexicalScope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let afterBlockParse = arguments.length > 2 ? arguments[2] : undefined;\n    const node = this.startNode();\n\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n\n    this.expect(5);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n\n        parsedNonDirective = true;\n        this.state.strictErrors.clear();\n      }\n\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.semicolon(false);\n    node.test = this.match(13) ? null : this.parseExpression();\n    this.semicolon(false);\n    node.update = this.match(11) ? null : this.parseExpression();\n    this.expect(11);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(58);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(Errors.ForInOfLoopInitializer, {\n        at: init,\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\"\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, {\n        at: init,\n        ancestor: {\n          type: \"ForStatement\"\n        }\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(11);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    let allowMissingInitializer = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const declarations = node.declarations = [];\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(29) ? null : isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(58) || this.isContextual(101)))) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"destructuring\"\n          });\n        } else if (kind === \"const\" && !(this.match(58) || this.isContextual(101))) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"const\"\n          });\n        }\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(12)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, {\n      in: {\n        type: \"VariableDeclarator\"\n      },\n      binding: kind === \"var\" ? BIND_VAR : BIND_LEXICAL\n    });\n  }\n\n  parseFunction(node) {\n    let statement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FUNC_NO_FLAGS;\n    let isAsync = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(55) && isHangingStatement) {\n      this.raise(Errors.GeneratorInSingleStatementContext, {\n        at: this.state.startLoc\n      });\n    }\n\n    node.generator = this.eat(55);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, false);\n    this.withSmartMixTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    this.expect(10);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(11, 41, false, allowModifiers);\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.loc.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(29) || this.match(13) || this.match(8);\n  }\n\n  isClassMethod() {\n    return this.match(10);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(hadSuperClass, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false,\n      hadSuperClass\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(5);\n    this.withSmartMixTopicForbiddingContext(() => {\n      while (!this.match(8)) {\n        if (this.eat(13)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc\n            });\n          }\n\n          continue;\n        }\n\n        if (this.match(26)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(Errors.DecoratorConstructor, {\n            at: member\n          });\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, {\n        at: this.state.startLoc\n      });\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(104);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      if (this.eat(5)) {\n        this.parseClassStaticBlock(classBody, member);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const accessorProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(55)) {\n      method.kind = \"method\";\n      const isPrivateName = this.match(134);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          at: publicMethod.key\n        });\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const isContextual = tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(134);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, {\n            at: key\n          });\n        }\n\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, {\n            at: key\n          });\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isContextual && key.name === \"async\" && !this.isLineTerminator()) {\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(55);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      const isPrivate = this.match(134);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, {\n            at: publicMethod.key\n          });\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isContextual && (key.name === \"get\" || key.name === \"set\") && !(this.match(55) && this.isLineTerminator())) {\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      const isPrivate = this.match(134);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, {\n            at: publicMethod.key\n          });\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (isContextual && key.name === \"accessor\" && !this.isLineTerminator()) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n      const isPrivate = this.match(134);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassElementName(member) {\n    const {\n      type,\n      value\n    } = this.state;\n\n    if ((type === 128 || type === 129) && member.static && value === \"prototype\") {\n      this.raise(Errors.StaticPrototype, {\n        at: this.state.startLoc\n      });\n    }\n\n    if (type === 134) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc\n        });\n      }\n\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(classBody, member) {\n    var _member$decorators;\n\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, 8);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\n      this.raise(Errors.DecoratorStaticBlock, {\n        at: member\n      });\n    }\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(Errors.ConstructorClassField, {\n        at: prop.key\n      });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.loc.start);\n  }\n\n  pushClassAccessorProperty(classBody, prop, isPrivate) {\n    if (!isPrivate && !prop.computed) {\n      const key = prop.key;\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        this.raise(Errors.ConstructorClassField, {\n          at: key\n        });\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.loc.start);\n    }\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(node, kind) {\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  parseInitializer(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    let bindingType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : BIND_CLASS;\n\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, {\n          at: this.state.startLoc\n        });\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(81) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(12);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, 5);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(65)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, 5);\n  }\n\n  eatExportStar(node) {\n    return this.eat(55);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(93)) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(5)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n      node.source = null;\n      node.declaration = null;\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(95)) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(68) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    }\n\n    if (this.match(80)) {\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(26)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(Errors.DecoratorBeforeExport, {\n          at: this.state.startLoc\n        });\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(75) || this.match(74) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsIdentifier(type)) {\n      if (type === 95 && !this.state.containsEsc || type === 99) {\n        return false;\n      }\n\n      if ((type === 126 || type === 125) && !this.state.containsEsc) {\n        const {\n          type: nextType\n        } = this.lookahead();\n\n        if (tokenIsIdentifier(nextType) && nextType !== 97 || nextType === 5) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(65)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n\n    if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) {\n      return true;\n    }\n\n    if (this.match(65) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n\n    return false;\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(97)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n\n      if (assertions) {\n        node.assertions = assertions;\n        this.checkJSONModuleImport(node);\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n\n    if (type === 26) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          throw this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return type === 74 || type === 75 || type === 68 || type === 80 || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n\n          const declaration = node.declaration;\n\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              at: declaration\n            });\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (const specifier of node.specifiers) {\n          const {\n            exported\n          } = specifier;\n          const exportName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, {\n                at: specifier,\n                localName: local.value,\n                exportName\n              });\n            } else {\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      throw this.raise(Errors.UnsupportedDecoratorExport, {\n        at: node\n      });\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, exportName) {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, {\n          at: node\n        });\n      } else {\n        this.raise(Errors.DuplicateExport, {\n          at: node,\n          exportName\n        });\n      }\n    }\n\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  parseExportSpecifiers(isInTypeExport) {\n    const nodes = [];\n    let first = true;\n    this.expect(5);\n\n    while (!this.eat(8)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.eat(8)) break;\n      }\n\n      const isMaybeTypeOnly = this.isContextual(126);\n      const isString = this.match(129);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n    if (this.eatContextual(93)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n\n    return this.finishNode(node, \"ExportSpecifier\");\n  }\n\n  parseModuleExportName() {\n    if (this.match(129)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, {\n          at: result,\n          surrogateCharCode: surrogate[0].charCodeAt(0)\n        });\n      }\n\n      return result;\n    }\n\n    return this.parseIdentifier(true);\n  }\n\n  isJSONModuleImport(node) {\n    if (node.assertions != null) {\n      return node.assertions.some(_ref90 => {\n        let {\n          key,\n          value\n        } = _ref90;\n        return value.value === \"json\" && (key.type === \"Identifier\" ? key.name === \"type\" : key.value === \"type\");\n      });\n    }\n\n    return false;\n  }\n\n  checkJSONModuleImport(node) {\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      const {\n        specifiers\n      } = node;\n\n      if (node.specifiers != null) {\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\" ? imported.name !== \"default\" : imported.value !== \"default\";\n          }\n        });\n\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(Errors.ImportJSONBindingNotDefault, {\n            at: nonDefaultNamedSpecifier.loc.start\n          });\n        }\n      }\n    }\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(129)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(12);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(97);\n    }\n\n    node.source = this.parseImportSource();\n    const assertions = this.maybeParseImportAssertions();\n\n    if (assertions) {\n      node.assertions = assertions;\n    } else {\n      const attributes = this.maybeParseModuleAttributes();\n\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.checkJSONModuleImport(node);\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(129)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type) {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier(specifier, type) {\n    this.checkLVal(specifier.local, {\n      in: specifier,\n      binding: BIND_LEXICAL\n    });\n    return this.finishNode(specifier, type);\n  }\n\n  parseAssertEntries() {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(8)) {\n        break;\n      }\n\n      const node = this.startNode();\n      const keyName = this.state.value;\n\n      if (attrNames.has(keyName)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: this.state.startLoc,\n          key: keyName\n        });\n      }\n\n      attrNames.add(keyName);\n\n      if (this.match(129)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n\n      this.expect(14);\n\n      if (!this.match(129)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc\n        });\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(12));\n\n    return attrs;\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(76) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n\n    const attrs = [];\n    const attributes = new Set();\n\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, {\n          at: node.key\n        });\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: node.key,\n          key: node.key.name\n        });\n      }\n\n      attributes.add(node.key.name);\n      this.expect(14);\n\n      if (!this.match(129)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc\n        });\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(12));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    if (this.isContextual(94) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n\n    this.eat(5);\n    const attrs = this.parseAssertEntries();\n    this.eat(8);\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(55)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(93);\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(5);\n\n    while (!this.eat(8)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(14)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc\n          });\n        }\n\n        this.expect(12);\n        if (this.eat(8)) break;\n      }\n\n      const specifier = this.startNode();\n      const importedIsString = this.match(129);\n      const isMaybeTypeOnly = this.isContextual(126);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node.importKind === \"type\" || node.importKind === \"typeof\", isMaybeTypeOnly);\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\n    if (this.eatContextual(93)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, {\n          at: specifier,\n          importName: imported.value\n        });\n      }\n\n      this.checkReservedWord(imported.name, specifier.loc.start, true, true);\n\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n\n    return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n  }\n\n  isThisParam(param) {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n\n  return tokenTypes;\n}\n\nconst tokTypes = generateExportedTokenTypes(tt);\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options != null && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = tokTypes;","map":{"version":3,"mappings":"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","names":["Position","constructor","line","col","index","column","SourceLocation","start","end","filename","identifierName","createPositionWithColumnOffset","position","columnOffset","ParseErrorCode","SyntaxError","SourceTypeModuleError","reflect","keys","last","length","get","reduce","object","key","set","value","item","i","instantiate","properties","descriptors","Object","map","filter","descriptor","enumerable","split","instance","defineProperty","configurable","assign","ImportMetaOutsideModule","message","code","ImportOutsideModule","NodeDescriptions","ArrayPattern","AssignmentExpression","AssignmentPattern","ArrowFunctionExpression","ConditionalExpression","CatchClause","ForOfStatement","ForInStatement","ForStatement","FormalParameters","Identifier","ImportSpecifier","ImportDefaultSpecifier","ImportNamespaceSpecifier","ObjectPattern","ParenthesizedExpression","RestElement","UpdateExpression","true","false","VariableDeclarator","YieldExpression","toNodeDescription","type","prefix","String","AccessorIsGenerator","kind","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","exportName","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","localName","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","importName","ImportCallArgumentTrailingComma","ImportCallArity","maxArgumentCount","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportJSONBindingNotDefault","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","radix","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","reservedWord","InvalidIdentifier","InvalidLhs","ancestor","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","unexpected","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","labelName","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingPlugin","missingPlugin","name","JSON","stringify","join","MissingOneOfPlugins","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","surrogateCharCode","toString","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","keyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","expected","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","target","onlyValidPropertyName","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","StrictDelete","StrictEvalArguments","referenceName","StrictEvalArgumentsBinding","bindingName","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","UnparenthesizedPipeBodyDescriptions","Set","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","token","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","toParseErrorConstructor","_ref","toMessage","loc","details","clone","overrides","pos","ParseErrorEnum","argument","syntaxPlugin","Array","isArray","parseErrorTemplates","ParseErrorConstructors","reasonCode","template","_ref2","rest","Errors","ModuleErrors","StandardErrors","StrictModeErrors","PipelineOperatorErrors","toUnenumerable","toESTreeLocation","node","superClass","ESTreeParserMixin","parse","file","options","tokens","parseRegExpLiteral","pattern","flags","regex","RegExp","e","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","_unused","bigint","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","extra","expressionValue","raw","finishNodeAt","slice","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","params","isValidDirective","parenthesized","parseBlockBody","allowDirectives","topLevel","afterBlockParse","directiveStatements","directives","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","push","parsePrivateName","getPluginOption","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","computed","finishNode","parseClassProperty","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startPos","startLoc","refExpressionErrors","isValidLVal","isUnparenthesizedInAssign","binding","isAssignable","isBinding","toAssignable","isLHS","classScope","usePrivateName","toAssignableObjectExpressionProp","isLast","raise","at","finishCallExpression","unfinished","optional","callee","source","arguments","hasPlugin","attributes","toReferencedArguments","parseExport","exported","specifiers","parseSubscript","base","noCalls","state","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","endLoc","resetStartLocation","resetEndLocation","lastTokEndLoc","TokContext","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","beforeExpr","startsExpr","isLoop","isAssign","postfix","ExportedTokenType","label","conf","rightAssociative","binop","updateContext","keywords","Map","createKeyword","createToken","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","_options$binop","createKeywordLike","_options$binop2","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_from","_get","_let","_meta","_of","_sent","_set","_static","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","context","pop","tc","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","next2","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","pluginConfig","plugins","pluginName","pluginOptions","actualOptions","plugin","setTrailingComments","comments","trailingComments","undefined","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","CommentsParser","addComment","comment","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","input","charCodeAt","finalizeRemainingComments","resetPreviousNodeTrailingComments","takeSurroundingComments","lineBreak","lineBreakG","isNewLine","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","State","curLine","lineStart","errors","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","inDisallowConditionalTypesContext","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","lastTokStartLoc","lastTokStart","ct","canStartJSXElement","containsEsc","strictErrors","tokensLength","init","strictMode","sourceType","startLine","startColumn","curPosition","skipArrays","val","isDigit","forbiddenNumericSeparatorSiblings","decBinOct","hex","isAllowedNumericSeparatorSibling","bin","ch","oct","dec","readStringContents","initialPos","initialLineStart","initialCurLine","out","containsInvalid","chunkStart","unterminated","isStringEnd","escaped","readEscapedChar","str","inTemplate","throwOnInvalid","res","readHexChar","readCodePoint","fromCodePoint","strictNumericEscape","match","octalStr","octal","parseInt","len","forceLen","n","readInt","invalidEscapeSequence","allowNumSeparator","forbiddenSiblings","isAllowedSibling","invalid","total","Infinity","prev","numericSeparatorInEscapeSequence","Number","isNaN","unexpectedNumericSeparator","_isDigit","invalidDigit","indexOf","invalidCodePoint","buildPosition","VALID_REGEX_FLAGS","Token","Tokenizer","isLookahead","errorHandlers_readInt","errorRecovery","errorBuilder","errorHandlers_readCodePoint","errorHandlers_readStringContents_string","recordStrictModeErrors","errorHandlers_readStringContents_template","pushToken","checkKeywordEscapes","nextToken","eat","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lastIndex","lookaheadCharCode","codePointAtPos","cp","trail","setStrict","forEach","toParseError","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","skipLineComment","startSkip","spaceStart","loop","attachComment","commentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","proposal","topicToken","lookaheadCh","codePointAt","readToken_atSign","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","readTemplateToken","readRadixNumber","readString","readWord","readRegexp","inClass","content","mods","char","includes","isBigInt","replace","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","underscorePos","parseFloat","quote","readTemplateContinuation","opening","firstCode","escStart","identifierCheck","esc","keywordTypes","raiseProperties","error","raiseOverwrite","expectOnePlugin","pluginNames","some","Scope","var","lexical","functions","ScopeHandler","parser","scopeStack","undefinedExports","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","redefined","accessor","oldStatic","newStatic","oldKind","newKind","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","declarationErrors","recordDeclarationError","ParsingErrorClass","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","origin","recordArrowParemeterBindingError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","Node","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","reservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","memberName","enumName","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","invalidEnumType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","explicitType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","suggestion","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","unsupportedExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","FlowParserMixin","flowPragma","shouldParseTypes","shouldParseEnums","matches","exec","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloLoc","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","exportKind","flowParseTypeAnnotation","finished","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","toAssignableList","_node$extra","trailingCommaLoc","checkParams","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","left","exprList","toReferencedList","isParenthesizedExpr","_expr$extra","parseArrayLike","close","canBePattern","isTuple","isParenthesized","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","local","finishImportSpecifier","maybeParseDefaultImportSpecifier","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","currentContext","abort","arrowExpression","_arrowExpression$extr","maybeUnwrapTypeCastExpression","async","_jsx2","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","strictModeChanged","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewCallee","targs","parseArrowExpression","parseTopLevel","program","fileNode","skipFlowComment","hasFlowCommentCompletion","commentSkip","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","flowEnumErrorInvalidMemberInitializer","enumContext","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","toUpperCase","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","__proto__","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","openingTagName","MissingClosingTagFragment","UnexpectedSequenceExpression","HTMLEntity","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","JSXParserMixin","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","codePoint","count","desc","entity","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","getOwn","hasOwnProperty","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","methodName","AbstractPropertyHasInitializer","propertyName","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","CannotFindName","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","modifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","modifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InitializerNotAllowedInAmbientContext","InvalidModifierOnTypeMember","InvalidModifierOnTypeParameter","InvalidModifierOnTypeParameterPositions","InvalidModifiersOrder","orderedModifiers","InvalidPropertyAccessAfterInstantiationExpression","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","SingleTypeParameterWithoutTrailingComma","typeParameterName","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","tsIsVarianceAnnotations","TypeScriptParserMixin","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","bind","tsParseModifiers","modified","disallowedModifiers","errorTemplate","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","element","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseInOutModifiers","tsParseNoneModifiers","tsParseTypeParameter","parseModifiers","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","typeReference","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","parsePropertyName","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","checkType","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsInAllowConditionalTypesContext","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","tsParseConstraintForInferType","tsInDisallowConditionalTypesContext","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","previousErrorCount","parseObjectLike","_unused2","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","originalStartLoc","delimitedList","tsParseInterfaceDeclaration","checkIdentifier","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","oldInDisallowConditionalTypesContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","reScan_lt","tsIsDeclarationStart","parseAssignableListItem","decorators","override","elt","pp","parameter","isSimpleParameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","tokenType","_callee$extra","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","allowMissingInitializer","declarations","expressions","isPossiblyLiteralEnum","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","isIdentifier","parseClassPropertyAnnotation","definite","declareClassPrivateMethodInScope","typeCast","_jsx","reportReservedArrowTypeParam","_typeCast","trailingComma","sawUnary","toAssignableParenthesizedExpression","checkToRestConversion","allowPattern","TSTypeCastExpression","TSParameterProperty","TSNonNullExpression","TSAsExpression","TSTypeAssertion","parseMaybeDecoratorArguments","checkCommaAfterRest","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","parseModuleExportName","kindKey","isUncomputedMemberExpressionChain","PlaceholderErrors","ClassNameIsRequired","UnexpectedSpace","PlaceholdersParserMixin","parsePlaceholder","assertNoSpace","finishPlaceholder","isFinished","verifyBreakContinue","isBreak","parseBlock","createNewLexicalScope","parseFunctionId","requireId","takeDecorators","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","checkExport","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","V8IntrinsicMixin","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","identifier","expectedConfig","expectedName","expectedOptions","expectedKeys","expectedOptionsIsEmpty","p","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","proposalList","tupleSyntaxIsHash","syntaxType","tokenList","moduleAttributesVersionPluginOption","missingPlugins","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","unwrapParenthesizedExpression","LValParser","_node$extra2","_node$extra3","arg","toReferencedListDeep","parseSpread","parseRestBinding","closeCharCode","allowEmpty","elts","parseDecorator","parseBindingRestProperty","parseBindingProperty","_left","ObjectProperty","checkLVal","in","checkClashes","allowingSloppyLetBinding","hasParenthesizedAncestor","validity","ParseErrorClass","isParenthesizedExpression","nextAncestor","child","allowLetBinding","declareNameFromIdentifier","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","parseMaybeAssignDisallowIn","resultError","_resultError$loc","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","finishedNode","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","requiredParentheses","_body$extra","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","updateExpressionNode","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","_call$extra","parseSuper","parseImportMetaProperty","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","parseModuleExpression","parseFunction","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","meta","parseMetaProperty","innerStartPos","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartPos","spreadNodeStartLoc","innerEndLoc","arrowNode","wrapParenthesis","parenExpression","metaProp","parseNew","args","parseExprList","parseTemplateElement","isTagged","elemStart","elem","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","finishedProp","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","formalParameters","reservedTest","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","interpreter","parseInterpreterDirective","stmtToDirective","isLetKeyword","endCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","initNode","parseVar","parseForIn","startsWithAsync","isForOf","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","block","handler","clause","finalizer","statementStart","parsedNonDirective","isForIn","await","isFor","statement","isHangingStatement","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","_member$decorators","parseClassAccessorProperty","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAssertions","checkJSONModuleImport","checkNames","isDefault","isFrom","_declaration$extra","nodes","surrogate","isJSONModuleImport","nonDefaultNamedSpecifier","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importSpecifier","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/util/location.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/parse-error/credentials.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/parse-error/module-errors.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/parse-error/to-node-description.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/parse-error/standard-errors.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/parse-error/strict-mode-errors.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/parse-error/pipeline-operator-errors.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/parse-error.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/plugins/estree.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/tokenizer/context.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/tokenizer/types.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/babel-helper-validator-identifier/src/identifier.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/babel-helper-validator-identifier/src/keyword.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/util/identifier.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/util/scopeflags.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/parser/base.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/parser/comments.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/util/whitespace.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/tokenizer/state.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/babel-helper-string-parser/src/index.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/tokenizer/index.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/util/scope.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/plugins/flow/scope.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/util/class-scope.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/util/expression-scope.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/util/production-parameter.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/parser/util.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/parser/node.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/plugins/flow/index.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/plugins/jsx/xhtml.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/plugins/jsx/index.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/plugins/typescript/scope.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/plugins/typescript/index.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/plugins/placeholders.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/plugins/v8intrinsic.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/plugin-utils.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/options.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/parser/lval.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/parser/expression.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/parser/statement.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/parser/index.ts","/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/parser/src/index.ts"],"sourcesContent":["export type Pos = {\n  start: number;\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: string | undefined | null;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n *\n * @export\n * @param {Position} position\n * @param {number} columnOffset\n * @returns {Position}\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n","export const enum ParseErrorCode {\n  SyntaxError = \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError = \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n}\n\nexport type SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\nexport type ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\nexport type ParseErrorCredentials<ErrorDetails> = {\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  toMessage: ToMessage<ErrorDetails>;\n};\n\nconst reflect = (keys: string[], last = keys.length - 1) => ({\n  get(this: unknown): unknown {\n    return keys.reduce(\n      (object, key) =>\n        // @ts-expect-error key should index object\n        object[key],\n      this,\n    );\n  },\n  set(this: unknown, value: unknown) {\n    keys.reduce(\n      // @ts-expect-error key should index item\n      (item, key, i) => (i === last ? (item[key] = value) : item[key]),\n      this,\n    );\n  },\n});\n\nconst instantiate = <T>(\n  constructor: new () => T,\n  properties: any,\n  descriptors: any,\n) =>\n  Object.keys(descriptors)\n    .map(key => [key, descriptors[key]])\n    .filter(([, descriptor]) => !!descriptor)\n    .map(([key, descriptor]) => [\n      key,\n      typeof descriptor === \"function\"\n        ? { value: descriptor, enumerable: false }\n        : typeof descriptor.reflect === \"string\"\n        ? { ...descriptor, ...reflect(descriptor.reflect.split(\".\")) }\n        : descriptor,\n    ])\n    .reduce(\n      (instance, [key, descriptor]) =>\n        Object.defineProperty(instance, key, {\n          configurable: true,\n          ...descriptor,\n        }),\n      Object.assign(new constructor(), properties),\n    );\n\nexport { instantiate };\n","import { ParseErrorCode } from \"../parse-error\";\n\nexport default {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError,\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError,\n  },\n};\n","const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = keyof Omit<\n  typeof NodeDescriptions,\n  \"UpdateExpression\"\n>;\n\ntype NodeWithDescription =\n  | {\n      type: \"UpdateExpression\";\n      prefix: boolean;\n    }\n  | {\n      type: NodeTypesWithDescriptions;\n    };\n\n// @ts-expect-error prefix is specified only when type is UpdateExpression\n// eslint-disable-next-line no-confusing-arrow\nconst toNodeDescription = ({ type, prefix }: NodeWithDescription) =>\n  type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[String(prefix) as \"true\" | \"false\"]\n    : NodeDescriptions[type];\n\nexport default toNodeDescription;\n","import toNodeDescription from \"./to-node-description\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\"; prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"ImportSpecifier\"\n        | \"ImportNamespaceSpecifier\"\n        | \"ImportDefaultSpecifier\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\";\n    };\n\nexport default {\n  AccessorIsGenerator: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass:\n    \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock:\n    \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter:\n    \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext:\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n  BadSetterRestParameter:\n    \"A 'set' accesor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind,\n  }: {\n    kind: \"const\" | \"destructuring\";\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({ exportName }: { exportName: string }) =>\n    `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName,\n  }: {\n    localName: string;\n    exportName: string;\n  }) =>\n    `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'.\",\n\n  ForInOfLoopInitializer: ({\n    type,\n  }: {\n    type: \"ForInStatement\" | \"ForOfStatement\";\n  }) =>\n    `'${\n      type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n    }' loop variable declaration may not have an initializer.`,\n\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block.\",\n\n  IllegalBreakContinue: ({\n    type,\n  }: {\n    type: \"BreakStatement\" | \"ContinueStatement\";\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: ({ importName }: { importName: string }) =>\n    `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArgumentTrailingComma:\n    \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: ({ maxArgumentCount }: { maxArgumentCount: 1 | 2 }) =>\n    `\\`import()\\` requires exactly ${\n      maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"\n    }.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault:\n    \"A JSON module can only be imported with `default`.\",\n  IncompatibleRegExpUVFlags:\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({ radix }: { radix: number }) =>\n    `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({ identifierName }: { identifierName: string }) =>\n    `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent:\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({ unexpected }: { unexpected: string }) =>\n    `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName,\n  }: {\n    identifierName: string;\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({ labelName }: { labelName: string }) =>\n    `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding:\n    \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({ missingPlugin }: { missingPlugin: [string] }) =>\n    `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also, seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: ({ missingPlugin }: { missingPlugin: string[] }) =>\n    `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({ key }: { key: string }) =>\n    `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode,\n  }: {\n    surrogateCharCode: number;\n  }) =>\n    `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n      16,\n    )}'.`,\n  ModuleExportUndefined: ({ localName }: { localName: string }) =>\n    `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar:\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor:\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({ identifierName }: { identifierName: string }) =>\n    `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed:\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({ keyword }: { keyword: string }) =>\n    `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget:\n    \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected,\n  }: {\n    expected?: string | null;\n    unexpected?: string | null;\n  }) =>\n    `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n      expected ? `, expected \"${expected}\"` : \"\"\n    }`,\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport:\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName,\n  }: {\n    target: string;\n    onlyValidPropertyName: string;\n  }) =>\n    `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper:\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  VarRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Identifier '${identifierName}' has already been declared.`,\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0.\",\n};\n","export default {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: ({ referenceName }: { referenceName: string }) =>\n    `Assigning to '${referenceName}' in strict mode.`,\n\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: ({ bindingName }: { bindingName: string }) =>\n    `Binding '${bindingName}' in strict mode.`,\n\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n\n  StrictWith: \"'with' in strict mode.\",\n};\n","import toNodeDescription from \"./to-node-description\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n] as const);\n\ntype GetSetMemberType<T extends Set<any>> = T extends Set<infer M>\n  ? M\n  : unknown;\n\ntype UnparanthesizedPipeBodyTypes = GetSetMemberType<\n  typeof UnparenthesizedPipeBodyDescriptions\n>;\n\nexport default {\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter:\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound:\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({ token }: { token: string }) =>\n    `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused:\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({ type }: { type: UnparanthesizedPipeBodyTypes }) =>\n    `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type,\n    })}; please wrap it in parentheses.`,\n\n  // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n  // are retained for backwards compatibility\n  // with the deprecated smart-mix pipe operator proposal plugin.\n  // They are subject to removal in a future major version.\n  PipelineBodyNoArrow:\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression:\n    \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression:\n    \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused:\n    \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed:\n    \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n};\n","import { Position } from \"./util/location\";\nimport {\n  instantiate,\n  ParseErrorCode,\n  type ParseErrorCredentials,\n  type ToMessage,\n  type SyntaxPlugin,\n} from \"./parse-error/credentials\";\nimport type { Undone } from \"./parser/node\";\nimport type { Node } from \"./types\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  missingPlugin?: string | string[];\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  // pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = (a: {\n  loc: Position;\n  details: ErrorDetails;\n}) => ParseError<ErrorDetails>;\n\nfunction toParseErrorConstructor<ErrorDetails>({\n  toMessage,\n  ...properties\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  type ConstructorArgument = {\n    loc: Position;\n    details: ErrorDetails;\n  };\n\n  return function constructor({ loc, details }: ConstructorArgument) {\n    return instantiate(\n      SyntaxError,\n      { ...properties, loc },\n      {\n        clone(\n          overrides: {\n            loc?: Position;\n            details?: ErrorDetails;\n          } = {},\n        ) {\n          const loc = (overrides.loc || {}) as Partial<Position>;\n          return constructor({\n            loc: new Position(\n              \"line\" in loc ? loc.line : this.loc.line,\n              \"column\" in loc ? loc.column : this.loc.column,\n              \"index\" in loc ? loc.index : this.loc.index,\n            ),\n            details: { ...this.details, ...overrides.details },\n          });\n        },\n        details: { value: details, enumerable: false },\n        message: {\n          get(this: ConstructorArgument): string {\n            return `${toMessage(this.details)} (${this.loc.line}:${\n              this.loc.column\n            })`;\n          },\n          set(value: string) {\n            Object.defineProperty(this, \"message\", { value });\n          },\n        },\n        pos: { reflect: \"loc.index\", enumerable: true },\n        missingPlugin: \"missingPlugin\" in details && {\n          reflect: \"details.missingPlugin\",\n          enumerable: true,\n        },\n      },\n    ) as ParseError<ErrorDetails>;\n  };\n}\n\ntype ParseErrorTemplate =\n  | string\n  | ToMessage<any>\n  | { message: string | ToMessage<any> };\n\ntype ParseErrorTemplates = { [reasonCode: string]: ParseErrorTemplate };\n\n// This is the templated form of `ParseErrorEnum`.\n//\n// Note: We could factor out the return type calculation into something like\n// `ParseErrorConstructor<T extends ParseErrorTemplates>`, and then we could\n// reuse it in the non-templated form of `ParseErrorEnum`, but TypeScript\n// doesn't seem to drill down that far when showing you the computed type of\n// an object in an editor, so we'll leave it inlined for now.\nexport function ParseErrorEnum(a: TemplateStringsArray): <\n  T extends ParseErrorTemplates,\n>(\n  parseErrorTemplates: T,\n) => {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n      ? Parameters<T[K]>[0]\n      : {}\n  >;\n};\n\nexport function ParseErrorEnum<T extends ParseErrorTemplates>(\n  parseErrorTemplates: T,\n  syntaxPlugin?: SyntaxPlugin,\n): {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n      ? Parameters<T[K]>[0]\n      : {}\n  >;\n};\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either:\n//\n// 1. a static error message,\n// 2. `toMessage` functions that define additional necessary `details` needed by\n//    the `ParseError`, or\n// 3. Objects that contain a `message` of one of the above and overridden `code`\n//    and/or `reasonCode`:\n//\n// ParseErrorEnum `optionalSyntaxPlugin` ({\n//   ErrorWithStaticMessage: \"message\",\n//   ErrorWithDynamicMessage: ({ type } : { type: string }) => `${type}`),\n//   ErrorWithOverriddenCodeAndOrReasonCode: {\n//     message: ({ type }: { type: string }) => `${type}`),\n//     code: ParseErrorCode.SourceTypeModuleError,\n//     ...(BABEL_8_BREAKING ? { } : { reasonCode: \"CustomErrorReasonCode\" })\n//   }\n// });\n//\nexport function ParseErrorEnum(\n  argument: TemplateStringsArray | ParseErrorTemplates,\n  syntaxPlugin?: SyntaxPlugin,\n) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return (parseErrorTemplates: ParseErrorTemplates) =>\n      ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n\n  const ParseErrorConstructors = {} as Record<\n    string,\n    ParseErrorConstructor<unknown>\n  >;\n\n  for (const reasonCode of Object.keys(argument)) {\n    const template = (argument as ParseErrorTemplates)[reasonCode];\n    const { message, ...rest } =\n      typeof template === \"string\"\n        ? { message: () => template }\n        : typeof template === \"function\"\n        ? { message: template }\n        : template;\n    const toMessage = typeof message === \"string\" ? () => message : message;\n\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: ParseErrorCode.SyntaxError,\n      reasonCode,\n      toMessage,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...rest,\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nexport type RaiseProperties<ErrorDetails> = {\n  at: Position | Undone<Node>;\n} & ErrorDetails;\n\nimport ModuleErrors from \"./parse-error/module-errors\";\nimport StandardErrors from \"./parse-error/standard-errors\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors\";\n\nexport * from \"./parse-error/credentials\";\n","import { type TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport * as N from \"../types\";\nimport type { Node as NodeType, NodeBase, File } from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parse-error\";\nimport type { Undone } from \"../parser/node\";\nimport type { BindingTypes } from \"../util/scopeflags\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object: any, key: string) =>\n  defineProperty(object, key, { enumerable: false, value: object[key] });\n\nfunction toESTreeLocation(node: any) {\n  node.loc.start && toUnenumerable(node.loc.start, \"index\");\n  node.loc.end && toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: typeof Parser) =>\n  class ESTreeParserMixin extends superClass implements Parser {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseRegExpLiteral({ pattern, flags }): N.EstreeRegExpLiteral {\n      let regex: RegExp | null = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt: BigInt | null;\n      try {\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal: null = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T extends N.Node>(value: any) {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt<N.ExpressionStatement>(\n        directive.start,\n        directive.loc.start,\n      );\n      const expression = this.startNodeAt<N.EstreeLiteral>(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.extra.expressionValue;\n      // @ts-expect-error TS2339: Property 'raw' does not exist on type 'Undone '.\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.loc.end,\n      );\n      // @ts-expect-error N.Directive.value is not defined\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(\n        stmt,\n        \"ExpressionStatement\",\n        directive.loc.end,\n      ) as N.ExpressionStatement;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync?: boolean | null,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        // @ts-expect-error plugin typings\n        this.checkDeclaration((node as unknown as N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return (method as any as N.EstreeProperty | N.EstreeMethodDefinition)\n        .value.params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: boolean | undefined | null,\n      topLevel: boolean,\n      end: TokenType,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): void {\n      super.parseBlockBody(\n        node,\n        allowDirectives,\n        topLevel,\n        end,\n        afterBlockParse,\n      );\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      // @ts-expect-error estree plugin typings\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // @ts-expect-error\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = node as any;\n      delete node.id;\n      // @ts-expect-error mutate AST types\n      node.name = name;\n      // @ts-expect-error mutate AST types\n      node.type = \"PrivateIdentifier\";\n      return node as unknown as N.EstreePrivateIdentifier;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node);\n        }\n      }\n      return node.name;\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseLiteral<T extends N.Literal>(value: any, type: T[\"type\"]): T {\n      const node = super.parseLiteral<T>(value, type);\n      // @ts-expect-error mutating AST types\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseMethod<\n      T extends N.ClassPrivateMethod | N.ObjectMethod | N.ClassMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope: boolean = false,\n    ): N.EstreeMethodDefinition {\n      let funcNode = this.startNode<N.MethodLike>();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        // @ts-expect-error todo(flow->ts)\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error mutate AST types\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // @ts-expect-error\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        node.computed = false;\n      }\n      return this.finishNode(\n        // @ts-expect-error cast methods to estree types\n        node as Undone<N.EstreeMethodDefinition>,\n        \"MethodDefinition\",\n      );\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = super.parseClassProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = super.parseClassPrivateProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): N.ObjectMethod | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) as any;\n\n      if (node) {\n        node.type = \"Property\";\n        if ((node as any as N.ClassMethod).kind === \"method\") {\n          node.kind = \"init\";\n        }\n        node.shorthand = false;\n      }\n\n      return node as any;\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: number | undefined | null,\n      startLoc: Position | undefined | null,\n      isPattern: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectProperty | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ) as any;\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return node as any;\n    }\n\n    isValidLVal(\n      type: string,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingTypes,\n    ) {\n      return type === \"Property\"\n        ? \"value\"\n        : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(\n      prop: N.Node,\n      isLast: boolean,\n      isLHS: boolean,\n    ) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(Errors.PatternHasAccessor, { at: prop.key });\n      } else if (prop.method) {\n        this.raise(Errors.PatternHasMethod, { at: prop.key });\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n      }\n    }\n\n    finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n      unfinished: Undone<T>,\n      optional: boolean,\n    ): T {\n      const node = super.finishCallExpression(unfinished, optional);\n\n      if (node.callee.type === \"Import\") {\n        (node as N.Node as N.EstreeImportExpression).type = \"ImportExpression\";\n        (node as N.Node as N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          (node as N.Node as N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // arguments isn't optional in the type definition\n        delete node.arguments;\n        // callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(unfinished: Undone<N.AnyExport>) {\n      const node = super.parseExport(unfinished);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          // @ts-expect-error mutating AST types\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            // @ts-expect-error mutating AST types\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            // @ts-expect-error mutating AST types\n            node.type = \"ExportAllDeclaration\";\n            // @ts-expect-error mutating AST types\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n          break;\n      }\n\n      return node as N.AnyExport;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        state,\n      );\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    // @ts-expect-error override interfaces\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n\n    finishNodeAt<T extends NodeType>(\n      node: Undone<T>,\n      type: T[\"type\"],\n      endLoc: Position,\n    ): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetStartLocation(node: N.Node, start: number, startLoc: Position) {\n      super.resetStartLocation(node, start, startLoc);\n      toESTreeLocation(node);\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n","// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext;\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","import { types as tc, type TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string;\n  beforeExpr?: boolean;\n  startsExpr?: boolean;\n  rightAssociative?: boolean;\n  isLoop?: boolean;\n  isAssign?: boolean;\n  prefix?: boolean;\n  postfix?: boolean;\n  binop?: number | null;\n};\n\n// Internally the tokenizer stores token as a number\nexport type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: string | undefined | null;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: number | undefined | null;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext:\n    | ((context: Array<TokContext>) => void)\n    | undefined\n    | null;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport type InternalTokenTypes = {\n  [name: string]: TokenType;\n};\n\nexport const tt: InternalTokenTypes = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n};\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2637,96,16,1070,4050,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,46,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,482,44,11,6,17,0,322,29,19,43,1269,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4152,8,221,3,5761,15,7472,3104,541,1507,4938];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,357,0,62,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b100000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","import type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\nimport type { PluginConfig } from \"../typings\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<any>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: string | undefined | null;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(\n        pluginOptions,\n      ) as (keyof typeof pluginOptions)[]) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    return this.plugins.get(plugin)?.[name];\n  }\n}\n","/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport type { Undone } from \"./node\";\n\n/**\n * A whitespace token containing comments\n * @typedef CommentWhitespace\n * @type {object}\n * @property {number} start - the start of the whitespace token.\n * @property {number} end - the end of the whitespace token.\n * @property {Array<Comment>} comments - the containing comments\n * @property {Node | null} leadingNode - the immediately preceding AST node of the whitespace token\n * @property {Node | null} trailingNode - the immediately following AST node of the whitespace token\n * @property {Node | null} containingNode - the innermost AST node containing the whitespace\n *                                         with minimal size (|end - start|)\n */\nexport type CommentWhitespace = {\n  start: number;\n  end: number;\n  comments: Array<Comment>;\n  leadingNode: Node | null;\n  trailingNode: Node | null;\n  containingNode: Node | null;\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Undone<Node>} node\n * @param {Array<Comment>} comments\n */\nfunction setTrailingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Undone<Node>} node\n * @param {Array<Comment>} comments\n */\nfunction setLeadingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Undone<Node>} node\n * @param {Array<Comment>} comments\n */\nexport function setInnerComments(\n  node: Undone<Node>,\n  comments?: Array<Comment>,\n) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n *\n * @param {Undone<Node>} node\n * @param {Array<Node>} elements\n * @param {Array<Comment>} comments\n */\nfunction adjustInnerComments(\n  node: Undone<Node>,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\n/** @class CommentsParser */\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   *\n   * @param {Node} node\n   * @returns {void}\n   * @memberof CommentsParser\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   *\n   * @memberof CommentsParser\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   *\n   * @memberof CommentsParser\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing */\n  // async /* 1 */ function f() {}\n  /*\n   * the comment whitespace \"* 1 *\" has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark \"* 1 *\" as\n   * inner comments. So \"* 1 *\" should be detached from the Identifier node.\n   *\n   * @param {N.Node} node the last finished AST node _before_ current token\n   * @returns\n   * @memberof CommentsParser\n   */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   *\n   * @param {Node} node\n   * @param {number} start\n   * @param {number} end\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","import * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","import type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { tt, type TokenType } from \"./types\";\nimport { Errors, type ParseError } from \"../parse-error\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number;\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0;\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n        ? true\n        : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n  inDisallowConditionalTypesContext: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: \"loop\" | \"switch\" | undefined | null;\n    name?: string | null;\n    statementStart?: number;\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  canStartJSXElement: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this) as (keyof State)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // @ts-expect-error\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number;\n  value: any;\n  type: TokenType;\n  start: number;\n  end: number;\n  context: TokContext[];\n  startLoc: Position;\n  lastTokEndLoc: Position;\n  curLine: number;\n  lineStart: number;\n  curPosition: () => Position;\n  /* Used only in readToken_mult_modulo */\n  inType: boolean;\n};\n","import * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let containsInvalid = false;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      let escaped;\n      ({\n        ch: escaped,\n        pos,\n        lineStart,\n        curLine,\n      } = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      ));\n      if (escaped === null) {\n        containsInvalid = true;\n      } else {\n        out += escaped;\n      }\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return { pos, str: out, containsInvalid, lineStart, curLine };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = input.slice(startPos, pos + 2).match(/^[0-7]+/)!;\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n      ? isAllowedNumericSeparatorSibling.dec\n      : radix === 8\n      ? isAllowedNumericSeparatorSibling.oct\n      : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n","/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport CommentsParser, { type CommentWhitespace } from \"../parser/comments\";\nimport * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types\";\nimport { type TokContext } from \"./context\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n  type RaiseProperties,\n} from \"../parse-error\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState, DeferredStrictError } from \"./state\";\n\nimport {\n  readInt,\n  readCodePoint,\n  readStringContents,\n  type IntErrorHandlers,\n  type CodePointErrorHandlers,\n  type StringContentsErrorHandlers,\n} from \"@babel/helper-string-parser\";\n\nimport type { Plugin } from \"../typings\";\n\nfunction buildPosition(pos: number, lineStart: number, curLine: number) {\n  return new Position(curLine, pos - lineStart, pos);\n}\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  // This is only valid when using the regexpUnicodeSets plugin\n  charCodes.lowercaseV,\n]);\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default abstract class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   *\n   * @param {TokenType} type\n   * @returns {boolean}\n   * @memberof Tokenizer\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   *\n   * @param {State} state\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   *\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // For performance we use a simplified tokenizer state structure\n    // @ts-expect-error\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, { at }),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  skipBlockComment(): N.CommentBlock | undefined {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment: N.CommentBlock = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | undefined {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment: N.CommentLine = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment();\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === charCodes.dash && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === charCodes.lessThan && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace: CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val?: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    // @ts-expect-error\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          { at: this.state.curPosition() },\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        throw this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(Errors.InvalidOrUnexpectedToken, {\n      at: this.state.curPosition(),\n      unexpected: String.fromCodePoint(code),\n    });\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      // @ts-expect-error VALID_REGEX_FLAGS.has should accept expanded type: number\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, { at: nextPos() });\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, { at: nextPos() });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen: boolean = false,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const { n, pos } = readInt(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      radix,\n      len,\n      forceLen,\n      allowNumSeparator,\n      this.errorHandlers_readInt,\n    );\n    this.state.pos = pos;\n    return n;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(Errors.InvalidDigit, {\n        // Numeric literals can't have newlines, so this is safe to do.\n        at: createPositionWithColumnOffset(startLoc, 2),\n        radix,\n      });\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, { at: startLoc });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(startLoc.index, this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, { at: this.state.curPosition() });\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, { at: startLoc });\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos),\n          });\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, { at: startLoc });\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, { at: startLoc });\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, { at: startLoc });\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const { code, pos } = readCodePoint(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      throwOnInvalid,\n      this.errorHandlers_readCodePoint,\n    );\n    this.state.pos = pos;\n    return code;\n  }\n\n  readString(quote: number): void {\n    const { str, pos, curLine, lineStart } = readStringContents(\n      quote === charCodes.quotationMark ? \"double\" : \"single\",\n      this.input,\n      this.state.pos + 1, // skip the quote\n      this.state.lineStart,\n      this.state.curLine,\n      this.errorHandlers_readStringContents_string,\n    );\n    this.state.pos = pos + 1; // skip the quote\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(tt.string, str);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    const opening = this.input[this.state.pos];\n    const { str, containsInvalid, pos, curLine, lineStart } =\n      readStringContents(\n        \"template\",\n        this.input,\n        this.state.pos + 1, // skip '`' or `}`\n        this.state.lineStart,\n        this.state.curLine,\n        this.errorHandlers_readStringContents_template,\n      );\n    this.state.pos = pos + 1; // skip '`' or `$`\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n\n    if (this.input.codePointAt(pos) === charCodes.graveAccent) {\n      this.finishToken(\n        tt.templateTail,\n        containsInvalid ? null : opening + str + \"`\",\n      );\n    } else {\n      this.state.pos++; // skip '{'\n      this.finishToken(\n        tt.templateNonTail,\n        containsInvalid ? null : opening + str + \"${\",\n      );\n    }\n  }\n\n  recordStrictModeErrors(\n    toParseError: DeferredStrictError,\n    { at }: { at: Position },\n  ) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, { at });\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode?: number): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition(),\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, { at: escStart });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode?: number): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.startLoc,\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   *\n   * @param {Class<ParseError<ErrorDetails>>>} ParseErrorClass\n   * @param {RaiseProperties<ErrorDetails>} raiseProperties\n   * @returns {(ParseError<ErrorDetails> | empty)}\n   * @memberof Tokenizer\n   */\n  raise<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    // @ts-expect-error: refine details typing\n    const error = toParseError({ loc, details });\n\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   *\n   * @param {Class<ParseError<ErrorDetails>>>} ParseErrorClass\n   * @param {RaiseProperties<ErrorDetails>} raiseProperties\n   * @returns {(ParseError<ErrorDetails> | empty)}\n   * @memberof Tokenizer\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> | never {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        // @ts-expect-error: refine details typing\n        return (errors[i] = toParseError({ loc, details }));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, raiseProperties);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(Errors.UnexpectedToken, {\n      expected: type ? tokenLabelName(type) : null,\n      at: loc != null ? loc : this.state.startLoc,\n    });\n  }\n\n  expectPlugin(pluginName: Plugin, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(Errors.MissingPlugin, {\n      at: loc != null ? loc : this.state.startLoc,\n      missingPlugin: [pluginName],\n    });\n  }\n\n  expectOnePlugin(pluginNames: Plugin[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, {\n        at: this.state.startLoc,\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n\n  errorBuilder(error: ParseErrorConstructor<{}>) {\n    return (pos: number, lineStart: number, curLine: number) => {\n      this.raise(error, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    };\n  }\n\n  errorHandlers_readInt: IntErrorHandlers = {\n    invalidDigit: (pos, lineStart, curLine, radix) => {\n      if (!this.options.errorRecovery) return false;\n\n      this.raise(Errors.InvalidDigit, {\n        at: buildPosition(pos, lineStart, curLine),\n        radix,\n      });\n      // Continue parsing the number as if there was no invalid digit.\n      return true;\n    },\n    numericSeparatorInEscapeSequence: this.errorBuilder(\n      Errors.NumericSeparatorInEscapeSequence,\n    ),\n    unexpectedNumericSeparator: this.errorBuilder(\n      Errors.UnexpectedNumericSeparator,\n    ),\n  };\n\n  errorHandlers_readCodePoint: CodePointErrorHandlers = {\n    ...this.errorHandlers_readInt,\n    invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n    invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint),\n  };\n\n  errorHandlers_readStringContents_string: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: (pos, lineStart, curLine) => {\n      this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    },\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(Errors.UnterminatedString, {\n        // Report the error at the string quote\n        at: buildPosition(pos - 1, lineStart, curLine),\n      });\n    },\n  };\n\n  errorHandlers_readStringContents_template: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(Errors.UnterminatedTemplate, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    },\n  };\n}\n","import {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport { Position } from \"./location\";\nimport * as N from \"../types\";\nimport { Errors } from \"../parse-error\";\nimport Tokenizer from \"../tokenizer\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope extends Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n\n  enter(flags: ScopeFlags) {\n    /*:: +createScope: (flags: ScopeFlags) => IScope; */\n    // @ts-expect-error This method will be overwritten by subclasses\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n","import { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","import {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport { Position } from \"./location\";\nimport { Errors } from \"../parse-error\";\nimport Tokenizer from \"../tokenizer\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n}\n","import { Errors, type ParseErrorConstructor } from \"../parse-error\";\nimport { Position } from \"./location\";\nimport type { Node } from \"../types\";\nimport Tokenizer from \"../tokenizer\";\n\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n   e.g. we don't know if `async({ x })` is a call expression or an async arrow\n   function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration(): this is ArrowHeadParsingScope {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<{}>, Position]> =\n    new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<{}>,\n    {\n      at,\n    }: {\n      at: Position;\n    },\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: (a: [ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   * @param {number} pos Error position\n   * @param {ErrorTemplate} template Error template\n   * @memberof ExpressionScopeHandler\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    {\n      at: node,\n    }: {\n      at: Node;\n    },\n  ): void {\n    const origin = { at: node.loc.start };\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   * @param {ParseErrorConstructor<{||}>} error\n   * @param {Node} payload.at\n   * @returns {void}\n   * @memberof ExpressionScopeHandler\n   */\n  recordArrowParemeterBindingError(\n    error: ParseErrorConstructor<{}>,\n    {\n      at: node,\n    }: {\n      at: Node;\n    },\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = { at: node.loc.start };\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @memberof ExpressionScopeHandler\n   */\n  recordAsyncArrowParametersError({ at }: { at: Position }): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, { at });\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, { at: loc });\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","export const // Initial Parameter flags\n  PARAM = 0b0000,\n  // track [Yield] production parameter\n  PARAM_YIELD = 0b0001,\n  // track [Await] production parameter\n  PARAM_AWAIT = 0b0010,\n  // track [Return] production parameter\n  PARAM_RETURN = 0b0100,\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind = number;\n\n// todo(flow->ts) - check if more granular type can be used,\n//  type below is not good because things like PARAM_AWAIT|PARAM_YIELD are not included\n// export type ParamKind =\n//   | typeof PARAM\n//   | typeof PARAM_AWAIT\n//   | typeof PARAM_IN\n//   | typeof PARAM_RETURN\n//   | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<number> = [];\n  enter(flags: number) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): number {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return ((isAsync ? PARAM_AWAIT : 0) |\n    (isGenerator ? PARAM_YIELD : 0)) as ParamKind;\n}\n","import { type Position } from \"../util/location\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { EstreePropertyDefinition, Node, ObjectProperty } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error\";\nimport type Parser from \".\";\n\nimport type ScopeHandler from \"../util/scope\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node;\n  error: Error;\n  thrown: Thrown;\n  aborted: Aborted;\n  failState: FailState;\n};\n\n// ## Parser utilities\n\nexport default abstract class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  abstract getScopeHandler(): { new (...args: any): ScopeHandler };\n\n  // TODO\n\n  addExtra(\n    node: Partial<Node>,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, { at: this.state.startLoc });\n      }\n      throw this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEndLoc.index, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, { at: this.state.lastTokEndLoc });\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: Position | null): void {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T extends Node | ReadonlyArray<Node>>(\n    fn: (abort: (node?: T) => never) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: {\n      node: T | null;\n    } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length] as ParseError<any>,\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        // @ts-expect-error casting general syntax error to parse error\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ExpressionErrors | undefined | null,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc,\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, { at: doubleProtoLoc });\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /*\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /*\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /*\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(\n    node: Node,\n  ): node is ObjectProperty | EstreePropertyDefinition {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    this: Parser,\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional paramter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: Position | undefined | null = null;\n  doubleProtoLoc: Position | undefined | null = null;\n  privateKeyLoc: Position | undefined | null = null;\n  optionalParametersLoc: Position | undefined | null = null;\n}\n","import type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: {\n    [key: string]: any;\n  };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error\n  NodePrototype.__clone = function (): Node {\n    // @ts-expect-error\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        newNode[key] =\n          // @ts-expect-error: key must present in this\n          this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport type Undone<T extends NodeType> = Omit<T, \"type\">;\n\nexport abstract class NodeUtils extends UtilParser {\n  startNode<T extends NodeType>(): Undone<T> {\n    // @ts-expect-error\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T extends NodeType>(pos: number, loc: Position): Undone<T> {\n    // @ts-expect-error\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T extends NodeType>(type: Undone<NodeType>): Undone<T> {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T extends NodeType>(\n    node: Omit<T, \"type\">,\n    type: T[\"type\"],\n    endLoc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    // @ts-expect-error migrate to Babel types AST typings\n    node.type = type;\n    // @ts-expect-error migrate to Babel types AST typings\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node as T);\n    return node as T;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","/*:: declare var invariant; */\n\nimport type Parser from \"../../parser\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types\";\nimport * as N from \"../../types\";\nimport { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports:\n    \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({ enumName }: { enumName: string }) =>\n    `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName,\n  }: {\n    invalidEnumType: string;\n    enumName: string;\n  }) =>\n    `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion,\n  }: {\n    enumName: string;\n    memberName: string;\n    suggestion: string;\n  }) =>\n    `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n  }) =>\n    `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitailized: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: {\n    message:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    ...(!process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {}),\n  },\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired:\n    \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor:\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst:\n    \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction:\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion,\n  }: {\n    unsupportedExportKind: string;\n    suggestion: string;\n  }) =>\n    `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type: TokenType): boolean {\n  return tokenIsKeywordOrIdentifier(type) && type !== tt._from;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (c: T, b: number, a: T[]) => boolean | undefined | null,\n): [T[], T[]] {\n  const list1: T[] = [];\n  const list2: T[] = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\n\ntype EnumContext = {\n  enumName: string;\n  explicitType: EnumExplicitType;\n  memberName: string;\n};\n\ntype EnumMemberInit =\n  | {\n      type: \"number\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"string\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"boolean\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"invalid\";\n      loc: Position;\n    }\n  | {\n      type: \"none\";\n      loc: Position;\n    };\n\nexport default (superClass: typeof Parser) =>\n  class FlowParserMixin extends superClass implements Parser {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): {\n      new (...args: any): FlowScopeHandler;\n    } {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n          at: moduloLoc,\n        });\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = super.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [\n      N.FlowType | undefined | null,\n      N.FlowPredicate | undefined | null,\n    ] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(\n      node: Undone<N.FlowDeclareClass>,\n    ): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: Undone<N.FlowDeclareFunction>,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode<N.TypeAnnotation>();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [typeNode.returnType, node.predicate] =\n        this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BIND_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: Undone<N.FlowDeclare>,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(FlowErrors.NestedDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: Undone<N.FlowDeclareVariable>,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(\n      node: Undone<N.FlowDeclareModule>,\n    ): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = super.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      // @ts-expect-error refine typings\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode<N.ImportDeclaration>();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          super.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n          // @ts-expect-error refine typings\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind: \"CommonJS\" | \"ES\" | null = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n              at: bodyElement,\n            });\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: Undone<N.FlowDeclareExportDeclaration>,\n      insideModule?: boolean | null,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value as\n            | \"const\"\n            | \"let\"\n            | \"type\"\n            | \"interface\";\n          throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {\n            at: this.state.startLoc,\n            unsupportedExportKind: label,\n            suggestion: exportSuggestions[label],\n          });\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(\n            node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n          );\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n\n          return node as N.Node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: Undone<N.FlowDeclareModuleExports>,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: Undone<N.FlowDeclareTypeAlias>,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      const finished = this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareTypeAlias\";\n      return finished;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: Undone<N.FlowDeclareOpaqueType>,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      const finished = this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareOpaqueType\";\n      return finished;\n    }\n\n    flowParseDeclareInterface(\n      node: Undone<N.FlowDeclareInterface>,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: Undone<N.FlowDeclare>,\n      isClass: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._mixins)) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: Undone<N.FlowInterface>): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n          at: this.state.startLoc,\n        });\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        {\n          at: startLoc,\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: Undone<N.FlowTypeAlias>): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: Undone<N.FlowOpaqueType>,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode<N.TypeParameter>();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      // @ts-expect-error migrate to Babel types\n      node.variance = variance;\n      // @ts-expect-error migrate to Babel types\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        // @ts-expect-error migrate to Babel types\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, { at: nodeStartLoc });\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode<N.TypeParameterDeclaration>();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode<N.FlowInterfaceType>();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? super.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: Undone<N.FlowObjectTypeIndexer>,\n      isStatic: boolean,\n      variance?: N.FlowVariance | null,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: Undone<N.FlowObjectTypeInternalSlot>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: Undone<N.FlowFunctionTypeAnnotation>,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: Undone<N.FlowObjectTypeCallProperty>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean;\n      allowExact: boolean;\n      allowSpread: boolean;\n      allowProto: boolean;\n      allowInexact: boolean;\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: Position | undefined | null = null;\n        let inexactStartLoc: Position | undefined | null = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n            at: inexactStartLoc,\n          });\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: Undone<N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty>,\n      isStatic: boolean,\n      protoStartLoc: Position | undefined | null,\n      variance: N.FlowVariance | undefined | null,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(FlowErrors.InexactInsideNonObject, {\n              at: this.state.lastTokStartLoc,\n            });\n          } else if (!allowInexact) {\n            this.raise(FlowErrors.InexactInsideExact, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, { at: variance });\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(FlowErrors.UnexpectedSpreadType, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, { at: variance });\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(FlowErrors.ThisParamBannedInConstructor, {\n              at: node.value.this,\n            });\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: Undone<\n        N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty\n      >,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          { at: property.value.this },\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          { at: property },\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, { at: property });\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node: N.Identifier | N.FlowQualifiedTypeIdentifier =\n        id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt<N.FlowQualifiedTypeIdentifier>(\n          startPos,\n          startLoc,\n        );\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode<N.FlowFunctionTypeParam>();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node });\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: node });\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[];\n      rest: N.FlowFunctionTypeParam | undefined | null;\n      _this: N.FlowFunctionTypeParam | undefined | null;\n    } {\n      let rest: N.FlowFunctionTypeParam | undefined | null = null;\n      let _this: N.FlowFunctionTypeParam | undefined | null = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: Undone<N.FlowTypeAnnotation>,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt:\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(\n            node as Undone<N.BooleanLiteralTypeAnnotation>,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n              at: this.state.startLoc,\n            });\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node as Undone<N.Identifier>, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startPos,\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode<N.FlowTypeAnnotation>();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): N.FlowVariance | undefined | null {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode<N.FlowVariance>();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        return this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode<N.TypeAnnotation>();\n\n        [\n          typeNode.typeAnnotation,\n          // @ts-expect-error predicate may not exist\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context?: string | null, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode<N.FlowInterface>();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatement(context, topLevel);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            // @ts-expect-error: refine typings\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, {\n            at: state.startLoc,\n          });\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression;\n      failed: boolean;\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            // @ts-expect-error: refine typings\n            this.finishArrowValidation(node);\n          } else {\n            // @ts-expect-error: refine typings\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        node.params as any as N.Expression[],\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(\n      node: Undone<N.Node>,\n      parse: () => T,\n    ): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(\n      node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n    ): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          super.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          // @ts-expect-error: refine typings\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        // @ts-expect-error: refine typings\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(node)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n    ) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (super.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, { at: startLoc });\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, {\n            at: member.value,\n          });\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, {\n          at: this.state.curPosition(),\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        return this.readIterator();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left);\n      }\n      super.toAssignable(node, isLHS);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: ReadonlyArray<N.Expression | undefined | null>,\n      isParenthesizedExpr?: boolean,\n    ): ReadonlyArray<N.Expression | undefined | null> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, {\n            at: expr.typeAnnotation,\n          });\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n      return (\n        type === \"TypeCastExpression\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error refine typings\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error refine typings\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n        // estree support\n      } else if (\n        // @ts-expect-error TS does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        // @ts-expect-error estree\n        method.value.params\n      ) {\n        // @ts-expect-error estree\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, { at: param });\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, { at: param });\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n      startPos: number | undefined | null,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectMethod | N.ObjectProperty {\n      if ((prop as any).variance) {\n        this.unexpected((prop as any).variance.loc.start);\n      }\n      delete (prop as any).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      const result = super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (result.value || result).typeParameters = typeParameters;\n      }\n      return result;\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, { at: param });\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: param });\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, { at: param });\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, { at: param });\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: number | null,\n      startLoc?: Position | null,\n      left?: N.Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state.type);\n    }\n\n    parseImportSpecifierLocal<\n      T extends\n        | N.ImportSpecifier\n        | N.ImportDefaultSpecifier\n        | N.ImportNamespaceSpecifier,\n    >(node: N.ImportDeclaration, specifier: Undone<T>, type: T[\"type\"]): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\" as const;\n      } else if (this.isContextual(tt._type)) {\n        kind = \"type\" as const;\n      }\n      if (kind) {\n        const lh = this.lookahead();\n        const { type } = lh;\n\n        // import type * is not allowed\n        if (kind === \"type\" && type === tt.star) {\n          // FIXME: lh.start?\n          this.unexpected(null, lh.type);\n        }\n\n        if (\n          isMaybeDefaultImport(type) ||\n          type === tt.braceL ||\n          type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, {\n              at: specifier,\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n          at: specifier,\n        });\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(\n      node: Undone<N.Function>,\n      allowModifiers?: boolean,\n    ): void {\n      // @ts-expect-error\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        // @ts-expect-error refine typings\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters: N.TypeParameterDeclaration;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression:\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n          | undefined\n          | null = null;\n\n        if (\n          arrow.node &&\n          // @ts-expect-error: refine tryParse typings\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            // @ts-expect-error: refine tryParse typings\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                { at: typeParameters },\n              );\n            }\n            // @ts-expect-error: refine tryParse typings\n            return arrow.node;\n          }\n\n          // @ts-expect-error: refine typings\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n          at: typeParameters,\n        });\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error todo(flow->ts)\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode<N.TypeAnnotation>();\n\n          [\n            typeNode.typeAnnotation,\n            // @ts-expect-error (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        // @ts-expect-error todo(flow->ts)\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Pattern[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction?: boolean | null,\n      strictModeChanged: boolean = true,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node.params[i] });\n        }\n      }\n\n      return super.checkParams(\n        node,\n        allowDuplicates,\n        isArrowFunction,\n        strictModeChanged,\n      );\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: boolean | null,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        // @ts-expect-error: refine tryParse typings\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          // @ts-expect-error: refine tryParse typings\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node = this.startNodeAt<N.OptionalCallExpression>(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt<\n          N.OptionalCallExpression | N.CallExpression\n        >(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) {\n            (node as Undone<N.OptionalCallExpression>).optional = false;\n          }\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      const node = this.startNodeAt<N.ArrowFunctionExpression>(\n        startPos,\n        startLoc,\n      );\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return super.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(FlowErrors.UnterminatedFlowComment, {\n          at: this.state.curPosition(),\n        });\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | undefined {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, {\n            at: this.state.startLoc,\n          });\n        }\n        this.hasFlowCommentCompletion();\n        const commentSkip = this.skipFlowComment();\n        if (commentSkip) {\n          this.state.pos += commentSkip;\n          this.state.hasFlowComment = true;\n        }\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", this.state.pos + 2);\n        if (end === -1) {\n          throw this.raise(Errors.UnterminatedComment, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos = end + 2 + 3;\n        return;\n      }\n\n      return super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | false {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          // @ts-expect-error testing whether a number is included\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition(),\n        });\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {\n        at: loc,\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n          ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n          : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        {\n          at: loc,\n          ...enumContext,\n        },\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, {\n        at: loc,\n        enumName,\n        memberName,\n      });\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      node: N.Node,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {\n        at: node,\n        enumName,\n      });\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): {\n      id: N.Node;\n      init: EnumMemberInit;\n    } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\" as const, loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string;\n      explicitType: EnumExplicitType;\n    }): {\n      members: {\n        booleanMembers: Array<N.Node>;\n        numberMembers: Array<N.Node>;\n        stringMembers: Array<N.Node>;\n        defaultedMembers: Array<N.Node>;\n      };\n      hasUnknownMembers: boolean;\n    } {\n      const seenNames = new Set();\n      const members = {\n        // @ts-expect-error: migrate to Babel types\n        booleanMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        numberMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        stringMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, {\n            at: id,\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, {\n            at: id,\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string;\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {\n          at: this.state.startLoc,\n          enumName,\n        });\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, {\n          at: this.state.startLoc,\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: Undone<N.Node>, id: N.Node): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, {\n              at: nameLoc,\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: Undone<N.Node>): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","const entities: {\n  __proto__: null;\n  [name: string]: string;\n} = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n} as const;\nexport default entities;\n","import * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { type Undone } from \"../../parser/node\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({ openingTagName }: { openingTagName: string }) =>\n    `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression:\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity,\n  }: {\n    unexpected: string;\n    HTMLEntity: string;\n  }) =>\n    `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object?: N.JSXElement | null): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport interface IJSXParserMixin {\n  jsxParseOpeningElementAfterName(\n    node: N.JSXOpeningElement,\n  ): N.JSXOpeningElement;\n}\n\nexport default (superClass: typeof Parser) =>\n  class JSXParserMixin extends superClass implements Parser, IJSXParserMixin {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(JsxErrors.UnterminatedJsxContent, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, {\n                at: this.state.curPosition(),\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) == charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, { at: node });\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, {\n            at: this.state.startLoc,\n          });\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEndLoc.index,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: Undone<N.JSXSpreadChild>): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_oTag);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: Undone<N.JSXExpressionContainer>,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(JsxErrors.UnexpectedSequenceExpression, {\n              at: expression.expressions[1],\n            });\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt<N.JSXOpeningElement | N.JSXOpeningFragment>(\n        startPos,\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        // @ts-expect-error migrate to Babel types\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(\n        node as Undone<N.JSXOpeningElement>,\n      );\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: Undone<N.JSXOpeningElement>,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode<\n                N.JSXSpreadChild | N.JSXExpressionContainer\n              >();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(\n                  this.jsxParseSpreadChild(node as Undone<N.JSXSpreadChild>),\n                );\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(\n                    node as Undone<N.JSXExpressionContainer>,\n                    tc.j_expr,\n                  ),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, {\n            at: closingElement,\n          });\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, {\n            at: closingElement,\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, {\n              at: closingElement,\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n          at: this.state.startLoc,\n        });\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","import { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const topLevelScope = this.scopeStack[0];\n    const { name } = id;\n    if (\n      !topLevelScope.types.has(name) &&\n      !topLevelScope.exportOnlyBindings.has(name)\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","/*:: declare var invariant; */\n\nimport type State from \"../../tokenizer/state\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n} from \"../../tokenizer/types\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { Position, createPositionWithColumnOffset } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_NONE,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node\";\nimport type { Pattern } from \"../../types\";\nimport type { Expression } from \"../../types\";\nimport type { IJSXParserMixin } from \"../jsx\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x?: T | null): T {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\ntype ModifierBase = {\n  accessibility?: N.Accessibility;\n} & {\n  [key in TsModifier]?: boolean | undefined | null;\n};\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({ methodName }: { methodName: string }) =>\n    `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName,\n  }: {\n    propertyName: string;\n  }) =>\n    `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  AccesorCannotDeclareThisParameter:\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  CannotFindName: ({ name }: { name: string }) => `Cannot find name '${name}'.`,\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters:\n    \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer:\n    \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation:\n    \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier:\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ({ modifier }: { modifier: N.Accessibility }) =>\n      `Accessibility modifier already seen.`,\n  DuplicateModifier: ({ modifier }: { modifier: TsModifier }) =>\n    `Duplicate modifier: '${modifier}'.`,\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare:\n    \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  IncompatibleModifiers: ({\n    modifiers,\n  }: {\n    modifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare:\n    \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride:\n    \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic:\n    \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext:\n    \"Initializers are not allowed in ambient contexts.\",\n  InvalidModifierOnTypeMember: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier,\n  }: {\n    modifier: TsModifier;\n  }) =>\n    `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers,\n  }: {\n    orderedModifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression:\n    \"Invalid property access after an instantiation expression. \" +\n    \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel:\n    \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName:\n    \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements:\n    \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod:\n    \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer:\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass:\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature:\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam:\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion:\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  SetAccesorCannotHaveOptionalParameter:\n    \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter:\n    \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType:\n    \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName,\n  }: {\n    typeParameterName: string;\n  }) =>\n    `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier:\n    \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed:\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports:\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports:\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier:\n    \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({ type }: { type: string }) =>\n    `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n});\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): modifier is N.Accessibility {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(\n  modifier: string,\n): modifier is N.VarianceAnnotations {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\ntype ClassWithMixin<\n  T extends new (...args: any) => any,\n  M extends object,\n> = T extends new (...args: infer P) => infer I\n  ? new (...args: P) => I & M\n  : never;\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class TypeScriptParserMixin extends superClass implements Parser {\n    getScopeHandler(): {\n      new (...args: any): TypeScriptScopeHandler;\n    } {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T extends TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): T | undefined | null {\n      if (!tokenIsIdentifier(this.state.type) && this.state.type !== tt._in) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers({\n      modified,\n      allowedModifiers,\n      disallowedModifiers,\n      stopOnStartOfClassStaticBlock,\n      errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n    }: {\n      modified: ModifierBase;\n      allowedModifiers: readonly TsModifier[];\n      disallowedModifiers?: TsModifier[];\n      stopOnStartOfClassStaticBlock?: boolean;\n      // FIXME: make sure errorTemplate can receive `modifier`\n      errorTemplate?: any;\n    }): void {\n      const enforceOrder = (\n        loc: Position,\n        modifier: TsModifier,\n        before: TsModifier,\n        after: TsModifier,\n      ) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, {\n            at: loc,\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (\n        loc: Position,\n        modifier: TsModifier,\n        mod1: TsModifier,\n        mod2: TsModifier,\n      ) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, {\n            at: loc,\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: TsModifier | undefined | null = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, {\n              at: startLoc,\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, {\n            at: startLoc,\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T | undefined | null,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] | undefined | null {\n      const result = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStart;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node = this.startNode<N.TsImportType>();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName();\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean = true): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier(allowReservedWords);\n      while (this.eat(tt.dot)) {\n        const node: Undone<N.TsQualifiedName> =\n          this.startNodeAtNode<N.TsQualifiedName>(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node = this.startNode<N.TsTypeReference>();\n      node.typeName = this.tsParseEntityName();\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node = this.startNodeAtNode<N.TsTypePredicate>(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node = this.startNode<N.TsThisType>();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node = this.startNode<N.TsTypeQuery>();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName();\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers(node: N.TsTypeParameter) {\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"in\", \"out\"],\n        disallowedModifiers: [\n          \"public\",\n          \"private\",\n          \"protected\",\n          \"readonly\",\n          \"declare\",\n          \"abstract\",\n          \"override\",\n        ],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n      });\n    }\n\n    // for better error recover\n    tsParseNoneModifiers(node: N.TsTypeParameter) {\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [],\n        disallowedModifiers: [\"in\", \"out\"],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n      });\n    }\n\n    tsParseTypeParameter(\n      parseModifiers: (\n        node: Undone<N.TsTypeParameter>,\n      ) => void = this.tsParseNoneModifiers.bind(this),\n    ): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers?: ((node: N.TsTypeParameter) => void) | null,\n    ): N.TsTypeParameterDeclaration | undefined | null {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(\n      parseModifiers?: ((node: N.TsTypeParameter) => void) | null,\n    ) {\n      const node = this.startNode<N.TsTypeParameterDeclaration>();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        // @ts-expect-error refine typings\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, { at: node });\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): N.TsTypeReference | undefined | null {\n      if (this.lookahead().type !== tt._const) return null;\n\n      this.next();\n      const typeReference = this.tsParseTypeReference();\n\n      // If the type reference has type parameters, then you are using it as a\n      // type and not as a const signifier. We'll *never* be able to find this\n      // name, since const isn't allowed as a type name. So in this instance we\n      // get to pretend we're the type checker.\n      if (typeReference.typeParameters) {\n        this.raise(TSErrors.CannotFindName, {\n          at: typeReference.typeName,\n          name: \"const\",\n        });\n      }\n\n      return typeReference;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: Undone<N.TsSignatureDeclaration>,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): Array<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern\n    > {\n      return super\n        .parseBindingList(tt.parenR, charCodes.rightParenthesis)\n        .map(pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(TSErrors.UnsupportedSignatureParameterKind, {\n              at: pattern,\n              type: pattern.type,\n            });\n          }\n          return pattern as any;\n        });\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: Undone<\n        N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration\n      >,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(\n      node: Undone<N.TsIndexSignature>,\n    ): N.TsIndexSignature | undefined | null {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, { at: node });\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, { at: this.state.curPosition() });\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, { at: this.state.curPosition() });\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n              at: method[returnTypeKey],\n            });\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id = this.startNode<N.Identifier>();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"readonly\"],\n        disallowedModifiers: [\n          \"declare\",\n          \"abstract\",\n          \"private\",\n          \"protected\",\n          \"public\",\n          \"static\",\n          \"override\",\n        ],\n      });\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      super.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        super.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node = this.startNode<N.TsTypeLiteral>();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): Array<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node = this.startNode<N.TsMappedType>();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node = this.startNode<N.TsTupleType>();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements: boolean | null = null;\n      node.elementTypes.forEach(elementNode => {\n        const { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, {\n            at: elementNode,\n          });\n        }\n\n        seenOptionalElement ||=\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        let checkType = type;\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          checkType = elementNode.type;\n        }\n\n        const isLabeled = checkType === \"TSNamedTupleMember\";\n        labeledElements ??= isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n            at: elementNode,\n          });\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { start: startPos, startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type: N.TsType | N.TsNamedTupleMember = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode = this.startNodeAtNode<N.TsNamedTupleMember>(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = type.typeName as N.Identifier;\n        } else {\n          this.raise(TSErrors.InvalidTupleMemberLabel, { at: type });\n          // This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          // @ts-expect-error\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode = this.startNodeAtNode<N.TsOptionalType>(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode = this.startNodeAt<N.TsRestType>(startPos, startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode<N.TsParenthesizedType>();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node = this.startNode<\n        N.TsFunctionOrConstructorType | N.TsConstructorType\n      >();\n      if (type === \"TSConstructorType\") {\n        // @ts-expect-error\n        node.abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsInAllowConditionalTypesContext(() =>\n        this.tsFillSignature(tt.arrow, node),\n      );\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node = this.startNode<N.TsLiteralType>();\n      // @ts-expect-error refine typings\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return super.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node = this.startNode<N.TsLiteralType>();\n      node.literal = super.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType | N.Node {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node = this.startNode<N.TsLiteralType>();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            // @ts-expect-error: parseMaybeUnary must returns unary expression\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startPos = this.state.start;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startPos);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                ? \"TSNullKeyword\"\n                : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node = this.startNode<N.TsKeywordType>();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node = this.startNodeAtNode<N.TsArrayType>(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node = this.startNodeAtNode<N.TsIndexedAccessType>(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node = this.startNode<N.TsTypeOperator>();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(\n          // @ts-expect-error todo(flow->ts)\n          node,\n        );\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, { at: node });\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode<N.TsInferType>();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode<N.TsTypeParameter>();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n        ? this.tsParseInferType()\n        : this.tsInAllowConditionalTypesContext(() =>\n            this.tsParseArrayTypeOrHigher(),\n          );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node = this.startNode<N.TsUnionType | N.TsIntersectionType>();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          super.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            true,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t = this.startNode<N.TsTypeAnnotation>();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = thisTypePredicate as N.TsThisType;\n            node.asserts = true;\n            (node as N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            (thisTypePredicate as N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node as N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation():\n      | N.TsTypeAnnotation\n      | undefined\n      | null {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): N.TsTypeAnnotation | undefined | null {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): N.TsType | undefined | null {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): N.Identifier | undefined | null {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(Errors.InvalidEscapedReservedWord, {\n          at: this.state.lastTokStartLoc,\n          reservedWord: \"asserts\",\n        });\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: Undone<N.TsTypeAnnotation> = this.startNode<N.TsTypeAnnotation>(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node = this.startNodeAtNode<N.TsConditionalType>(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, { at: this.state.startLoc });\n      }\n\n      const node = this.startNode<N.TsTypeAssertion>();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): Array<N.TsExpressionWithTypeArguments> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          const node = this.startNode<N.TsExpressionWithTypeArguments>();\n          node.expression = this.tsParseEntityName();\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.tsParseTypeArguments();\n          }\n\n          return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, {\n          at: originalStartLoc,\n          token,\n        });\n      }\n\n      return delimitedList;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: Undone<N.TsInterfaceDeclaration>,\n      properties: {\n        declare?: true;\n      } = {},\n    ): N.TsInterfaceDeclaration | undefined | null {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BIND_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, { at: this.state.startLoc });\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutModifiers.bind(this),\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body = this.startNode<N.TSInterfaceBody>();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers.bind(this),\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node = this.startNode<N.TsKeywordType>();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node = this.startNode<N.TsEnumMember>();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? super.parseStringLiteral(this.state.value)\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = super.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: Undone<N.TsEnumDeclaration>,\n      properties: {\n        const?: true;\n        declare?: true;\n      } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node = this.startNode<N.TsModuleBlock>();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      super.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: Undone<N.TsModuleDeclaration>,\n      nested: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkIdentifier(node.id, BIND_TS_NAMESPACE);\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode<N.TsModuleDeclaration>();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        // @ts-expect-error Fixme: refine typings\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = super.parseStringLiteral(this.state.value);\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: Undone<N.TsImportEqualsDeclaration>,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_LEXICAL);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, {\n          at: moduleReference,\n        });\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node = this.startNode<N.TsExternalModuleReference>();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T extends N.NodeBase | undefined | null>(\n      f: () => T,\n    ): T | undefined | null {\n      const result = this.tryParse(\n        abort =>\n          // @ts-expect-error todo(flow->ts)\n          f() || abort(),\n      );\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      // @ts-expect-error refine typings\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => T | undefined | false): T | undefined {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): N.Declaration | undefined | null {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind: \"let\" | null;\n\n      if (this.isContextual(tt._let)) {\n        starttype = tt._var;\n        kind = \"let\" as const;\n      }\n\n      // @ts-expect-error refine typings\n      return this.tsInAmbientContext(() => {\n        if (starttype === tt._function) {\n          nany.declare = true;\n          return super.parseFunctionStatement(\n            nany,\n            /* async */ false,\n            /* declarationPosition */ true,\n          );\n        }\n\n        if (starttype === tt._class) {\n          // While this is also set by tsParseExpressionStatement, we need to set it\n          // before parsing the class declaration to know how to register it in the scope.\n          nany.declare = true;\n          return this.parseClass(\n            nany,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          );\n        }\n\n        if (starttype === tt._enum) {\n          return this.tsParseEnumDeclaration(nany, { declare: true });\n        }\n\n        if (starttype === tt._global) {\n          return this.tsParseAmbientExternalModuleDeclaration(nany);\n        }\n\n        if (starttype === tt._const || starttype === tt._var) {\n          if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n            nany.declare = true;\n            return this.parseVarStatement(nany, kind || this.state.value, true);\n          }\n\n          // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n          this.expect(tt._const);\n          return this.tsParseEnumDeclaration(nany, {\n            const: true,\n            declare: true,\n          });\n        }\n\n        if (starttype === tt._interface) {\n          const result = this.tsParseInterfaceDeclaration(nany, {\n            declare: true,\n          });\n          if (result) return result;\n        }\n\n        if (tokenIsIdentifier(starttype)) {\n          return this.tsParseDeclaration(\n            nany,\n            this.state.value,\n            /* next */ true,\n          );\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): N.Declaration | undefined | null {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(\n      node: Undone<N.TsModuleDeclaration>,\n      expr: N.Identifier,\n    ): N.Declaration | undefined | null {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod = node as Undone<N.TsModuleDeclaration>;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): N.Declaration | undefined | null {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      if (!this.match(tt.lt)) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: Undone<N.ArrowFunctionExpression> | undefined | null =\n        this.tsTryParseAndCatch(() => {\n          const node = this.startNodeAt<N.ArrowFunctionExpression>(\n            startPos,\n            startLoc,\n          );\n          node.typeParameters = this.tsParseTypeParameters();\n          // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n          super.parseFunctionParams(node);\n          node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n          this.expect(tt.arrow);\n          return node;\n        });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return super.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression(): N.TsTypeParameterInstantiation | void {\n      if (this.reScan_lt() !== tt.lt) {\n        return undefined;\n      }\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode<N.TsTypeParameterInstantiation>();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, { at: node });\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: boolean | undefined | null,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: N.Accessibility | undefined | null;\n      let readonly = false;\n      let override = false;\n      if (allowModifiers !== undefined) {\n        const modified: ModifierBase = {};\n        this.tsParseModifiers({\n          modified,\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        });\n        accessibility = modified.accessibility;\n        override = modified.override;\n        readonly = modified.readonly;\n        if (\n          allowModifiers === false &&\n          (accessibility || readonly || override)\n        ) {\n          this.raise(TSErrors.UnexpectedParameterModifier, { at: startLoc });\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp = this.startNodeAt<N.TSParameterProperty>(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, { at: pp });\n        }\n        pp.parameter = elt as any as N.Identifier | N.AssignmentPattern;\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        return this.finishNode(node, bodilessType);\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, { at: node });\n        if (\n          // @ts-expect-error\n          node.declare\n        ) {\n          return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        }\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkIdentifier(node.id, BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(node);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: Array<N.Expression | undefined | null>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, {\n            at: node.typeAnnotation,\n          });\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: Array<N.Expression | undefined | null>,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isInParens?: boolean,\n    ): Array<N.Expression | undefined | null> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression = this.startNodeAt<N.TsNonNullExpression>(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) return;\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            return;\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = super.parseTaggedTemplateExpression(\n              base,\n              startPos,\n              startLoc,\n              state,\n            );\n            result.typeParameters = typeArguments;\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node = this.startNodeAt<N.CallExpression>(startPos, startLoc);\n            node.callee = base;\n            // possibleAsync always false here, because we would have handled it above.\n            // @ts-expect-error (won't be any undefined arguments)\n            node.arguments = this.parseCallExpressionArguments(\n              tt.parenR,\n              /* possibleAsync */ false,\n            );\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            node.typeParameters = typeArguments;\n            if (state.optionalChainMember) {\n              // @ts-expect-error\n              node.optional = isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          const tokenType = this.state.type;\n          if (\n            // a<b>>c is not (a<b>)>c, but a<(b>>c)\n            tokenType === tt.gt ||\n            // a<b>c is (a<b)>c\n            (tokenType !== tt.parenL &&\n              tokenCanStartExpression(tokenType) &&\n              !this.hasPrecedingLineBreak())\n          ) {\n            // Bail out.\n            return;\n          }\n\n          const node = this.startNodeAt<N.TsInstantiationExpression>(\n            startPos,\n            startLoc,\n          );\n          node.expression = base;\n          node.typeParameters = typeArguments;\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) {\n          if (\n            result.type === \"TSInstantiationExpression\" &&\n            (this.match(tt.dot) ||\n              (this.match(tt.questionDot) &&\n                this.lookaheadCharCode() !== charCodes.leftParenthesis))\n          ) {\n            this.raise(\n              TSErrors.InvalidPropertyAccessAfterInstantiationExpression,\n              { at: this.state.startLoc },\n            );\n          }\n          return result;\n        }\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        node.typeParameters = callee.typeParameters;\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n    ): N.Expression {\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(tt._as)\n      ) {\n        const node = this.startNodeAt<N.TsAsExpression>(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(\n          // @ts-expect-error todo(flow->ts)\n          node,\n          leftStartPos,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(\n      node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    ): N.AnyImport {\n      node.importKind = \"value\";\n      if (\n        tokenIsIdentifier(this.state.type) ||\n        this.match(tt.star) ||\n        this.match(tt.braceL)\n      ) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(tt._type) &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          ahead.type !== tt._from &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (tokenIsIdentifier(this.state.type) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(\n            node as Undone<N.TsImportEqualsDeclaration>,\n          );\n        }\n      }\n\n      const importNode = super.parseImport(node as Undone<N.ImportDeclaration>);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        // @ts-expect-error refine typings\n        importNode.specifiers.length > 1 &&\n        // @ts-expect-error refine typings\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n          at: importNode,\n        });\n      }\n\n      return importNode;\n    }\n\n    parseExport(node: Undone<N.Node>): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(tt._type) &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(\n          node as Undone<N.TsImportEqualsDeclaration>,\n          /* isExport */ true,\n        );\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign = node as Undone<N.TsExportAssignment>;\n        assign.expression = super.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl = node as Undone<N.TsNamespaceExportDeclaration>;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (\n          this.isContextual(tt._type) &&\n          this.lookahead().type === tt.braceL\n        ) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(\n          node as Undone<N.ExportAllDeclaration | N.ExportDefaultDeclaration>,\n        );\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode<N.Class>();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        return this.parseClass(cls, true, true);\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(\n          this.startNode<N.TsInterfaceDeclaration>(),\n        );\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        //\n        // If a const declaration has no type annotation and is initiailized to\n        // a string literal, numeric literal, or enum reference, then it is\n        // allowed. In an ideal world, we'd check whether init was *actually* an\n        // enum reference, but we allow anything that \"could be\" a literal enum\n        // in `isPossiblyLiteralEnum` since we don't have all the information\n        // that the typescript compiler has.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {\n            at: init,\n          });\n        } else if (\n          init.type !== \"StringLiteral\" &&\n          init.type !== \"BooleanLiteral\" &&\n          init.type !== \"NumericLiteral\" &&\n          init.type !== \"BigIntLiteral\" &&\n          (init.type !== \"TemplateLiteral\" || init.expressions.length > 0) &&\n          !isPossiblyLiteralEnum(init)\n        ) {\n          this.raise(\n            TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            { at: init },\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(\n      context?: string | null,\n      topLevel?: boolean | null,\n    ): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node = this.startNode<N.TsEnumDeclaration>();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(\n          this.startNode<N.TsEnumDeclaration>(),\n        );\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): N.Accessibility | undefined | null {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: readonly TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ] as const;\n      this.tsParseModifiers({\n        modified: member,\n        allowedModifiers: modifiers,\n        disallowedModifiers: [\"in\", \"out\"],\n        stopOnStartOfClassStaticBlock: true,\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n      });\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n              at: this.state.curPosition(),\n            });\n          }\n          super.parseClassStaticBlock(\n            classBody,\n            member as any as N.StaticBlock,\n          );\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: Undone<N.ClassMember | N.TsIndexSignature>,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(\n        member as Undone<N.TsIndexSignature>,\n      );\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member as any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, { at: member });\n        }\n        if ((member as any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, {\n            at: member,\n            modifier: (member as any).accessibility,\n          });\n        }\n        if ((member as any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, { at: member });\n        }\n        if ((member as any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, { at: member });\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member as any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n          at: member,\n        });\n      }\n\n      if ((member as any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, { at: member });\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member as Undone<N.ClassMember>,\n        state,\n        isStatic,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp as any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, { at: methodOrProp });\n      }\n\n      if ((methodOrProp as any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, { at: methodOrProp });\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    // @ts-expect-error plugin overrides interfaces\n    parseExpressionStatement(\n      node: Undone<N.ExpressionStatement>,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? // @ts-expect-error refine typings\n            this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          startPos,\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TsTypeCastExpression>(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n          at: this.state.startLoc,\n        });\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: N.Declaration | undefined | null =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType?: BindingTypes,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node as any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutModifiers.bind(this),\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (\n        this.state.isAmbientContext &&\n        !(node.readonly && !node.typeAnnotation) &&\n        this.match(tt.eq)\n      ) {\n        this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n          at: this.state.startLoc,\n        });\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(TSErrors.AbstractPropertyHasInitializer, {\n          at: this.state.startLoc,\n          propertyName:\n            key.type === \"Identifier\" && !node.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n        });\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // @ts-expect-error\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, { at: node });\n      }\n\n      // @ts-expect-error\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, {\n          at: node,\n          // @ts-expect-error refine typings\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, {\n          at: typeParameters,\n        });\n      }\n\n      // @ts-expect-error\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, { at: method, kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (node.type === \"MethodDefinition\" && !node.value.body) return;\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        // @ts-expect-error refine typings\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(\n      prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n      startPos: number | undefined | null,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ) {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      return super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: State | undefined | null;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      // If the state was cloned in the JSX parsing branch above but there\n      // have been any error in the tryParse call, this.state is set to state\n      // so we still need to clone it.\n      if (!state || state === this.state) state = this.state.clone();\n\n      let typeParameters: N.TsTypeParameterDeclaration | undefined | null;\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(\n          refExpressionErrors,\n          afterLeftParse,\n        );\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            this.hasPlugin(\"jsx\") &&\n            expr.typeParameters.params.length === 1 &&\n            !expr.typeParameters.extra?.trailingComma\n          ) {\n            // report error if single type parameter used without trailing comma.\n            const parameter = expr.typeParameters.params[0];\n            if (!parameter.constraint) {\n              // A single type parameter must either have constraints\n              // or a trailing comma, otherwise it's ambiguous with JSX.\n              this.raise(TSErrors.SingleTypeParameterWithoutTrailingComma, {\n                at: createPositionWithColumnOffset(parameter.loc.end, 1),\n                typeParameterName: parameter.name.name,\n              });\n            }\n          }\n        }\n\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        // @ts-expect-error refine typings\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        // @ts-expect-error refine typings\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, { at: node });\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(\n      refExpressionErrors?: ExpressionErrors | null,\n      sawUnary?: boolean,\n    ): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n      }\n    }\n\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          // @ts-expect-error refine typings\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isAmbientContext &&\n          !this.state.inType\n        ) {\n          this.raise(TSErrors.PatternIsOptional, { at: param });\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParemeterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              { at: node },\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, { at: node });\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left);\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    // @ts-expect-error plugin overrides interfaces\n    isValidLVal(\n      type:\n        | \"TSTypeCastExpression\"\n        | \"TSParameterProperty\"\n        | \"TSNonNullExpression\"\n        | \"TSAsExpression\"\n        | \"TSTypeAssertion\",\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingTypes,\n    ) {\n      return (\n        getOwn(\n          {\n            // Allow \"typecasts\" to appear on the left of assignment expressions,\n            // because it may be in an arrow function.\n            // e.g. `const f = (foo: number = 0) => foo;`\n            TSTypeCastExpression: true,\n            TSParameterProperty: \"parameter\",\n            TSNonNullExpression: \"expression\",\n            TSAsExpression: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSTypeAssertion: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n          },\n          type,\n        ) || super.isValidLVal(type, isUnparenthesizedInAssign, binding)\n      );\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(\n      close: typeof charCodes[keyof typeof charCodes],\n    ): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      } else {\n        return super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(\n      startPos?: number | null,\n      startLoc?: Position | null,\n      left?: Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          return this.finishOp(tt.gt, 1);\n        }\n        if (code === charCodes.lessThan) {\n          return this.finishOp(tt.lt, 1);\n        }\n      }\n      return super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(\n      exprList: Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TSTypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(\n            expr as N.TsTypeCastExpression,\n          );\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          // @ts-expect-error: refine typings\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        // @ts-expect-error: refine typings\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T extends N.Class>(\n      node: Undone<T>,\n      isStatement: boolean,\n      optionalId?: boolean,\n    ): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node as any).abstract;\n      try {\n        return super.parseClass(node, isStatement, optionalId);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | undefined | null {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.parseClass<N.ClassDeclaration>(\n          node as N.ClassDeclaration,\n          /* isStatement */ true,\n          /* optionalId */ false,\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n            at: node,\n          });\n          return this.tsParseInterfaceDeclaration(\n            node as N.TsInterfaceDeclaration,\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod<\n      T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope?: boolean,\n    ) {\n      const method = super.parseMethod<T>(\n        node,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error todo(flow->ts) property not defined for all types in union\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? // @ts-expect-error estree typings\n            !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, {\n            at: method,\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(key.start, key.end)}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: any,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          { at: loc },\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(node[rightOfAsKey], BIND_LEXICAL);\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\") return false;\n  if (expression.computed) return false;\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n","import * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\nimport { ParseErrorEnum } from \"../parse-error\";\nimport type { Undone } from \"../parser/node\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport type { BindingTypes } from \"../util/scopeflags\";\nimport type { Position } from \"../util/location\";\n\ntype PossiblePlaceholedrs = {\n  Identifier: N.Identifier;\n  StringLiteral: N.StringLiteral;\n  Expression: N.Expression;\n  Statement: N.Statement;\n  Declaration: N.Declaration;\n  BlockStatement: N.BlockStatement;\n  ClassBody: N.ClassBody;\n  Pattern: N.Pattern;\n};\nexport type PlaceholderTypes = keyof PossiblePlaceholedrs;\n\ntype NodeOf<T extends keyof PossiblePlaceholedrs> = PossiblePlaceholedrs[T];\n// todo: when there  is proper union type for Node\n// type NodeOf<T extends PlaceholderTypes> = Extract<N.Node, { type: T }>;\n\n// todo: Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T extends PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\",\n});\n\n/* eslint-disable sort-keys */\n\nexport default (superClass: typeof Parser) =>\n  class PlaceholdersParserMixin extends superClass implements Parser {\n    parsePlaceholder<T extends PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ MaybePlaceholder<T> | undefined | null {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        // @ts-expect-error placeholder typings\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T extends PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      // @ts-expect-error todo(flow->ts)\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(\n      refExpressionErrors?: ExpressionErrors | null,\n    ): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") ||\n        super.parseExprAtom(refExpressionErrors)\n      );\n    }\n\n    parseIdentifier(liberal?: boolean): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal)\n      );\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ) {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n      return (\n        type === \"Placeholder\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    isLet(context?: string | null): boolean {\n      if (super.isLet(context)) {\n        return true;\n      }\n\n      // Replicate the original checks that lead to looking ahead for an\n      // identifier.\n      if (!this.isContextual(tt._let)) {\n        return false;\n      }\n      if (context) return false;\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(\n      node: N.BreakStatement | N.ContinueStatement,\n      isBreak: boolean,\n    ) {\n      // @ts-expect-error: node.label could be Placeholder\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(node, isBreak);\n    }\n\n    // @ts-expect-error Plugin will override parser interface\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        // @ts-expect-error placeholder typings\n        return super.parseExpressionStatement(node, expr);\n      }\n\n      if (this.match(tt.colon)) {\n        // @ts-expect-error\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = super.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(\n      allowDirectives?: boolean,\n      createNewLexicalScope?: boolean,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(\n          allowDirectives,\n          createNewLexicalScope,\n          afterBlockParse,\n        )\n      );\n    }\n\n    parseFunctionId(\n      requireId?: boolean,\n    ): MaybePlaceholder<\"Identifier\"> | undefined | null {\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId)\n      );\n    }\n    // @ts-expect-error Plugin will override parser interface\n    parseClass<T extends N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n            at: this.state.startLoc,\n          });\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      super.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        super.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(node);\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(node);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          // @ts-expect-error placeholder typings\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration>,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(node);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier =\n        this.startNodeAtNode<N.ImportDefaultSpecifier>(placeholder);\n      specifier.local = placeholder;\n      node.specifiers.push(\n        this.finishNode(specifier, \"ImportDefaultSpecifier\"),\n      );\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource()\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (this.state.start > this.state.lastTokEndLoc.index) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, {\n          at: this.state.lastTokEndLoc,\n        });\n      }\n    }\n  };\n","import type Parser from \"../parser\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport type { ExpressionErrors } from \"../parser/util\";\n\nexport default (superClass: typeof Parser) =>\n  class V8IntrinsicMixin extends superClass implements Parser {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode<N.Identifier>();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          // @ts-expect-error: avoid mutating AST types\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      return (\n        this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors)\n      );\n    }\n  };\n","import type Parser from \"./parser\";\nimport type { PluginConfig } from \"./typings\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = PluginConfig[];\n\nexport type MixinPlugin = (superClass: { new (...args: any): Parser }) => {\n  new (...args: any): Parser;\n};\n\n// This function’s second parameter accepts either a string (plugin name) or an\n// array pair (plugin name and options object). If an options object is given,\n// then each value is non-recursively checked for identity with the actual\n// option value of each plugin in the first argument (which is an array of\n// plugin names or array pairs).\nexport function hasPlugin(\n  plugins: PluginList,\n  expectedConfig: PluginConfig,\n): boolean {\n  // The expectedOptions object is by default an empty object if the given\n  // expectedConfig argument does not give an options object (i.e., if it is a\n  // string).\n  const [expectedName, expectedOptions] =\n    typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n\n  const expectedKeys = Object.keys(expectedOptions);\n\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        // @ts-expect-error key may not exist in plugin options\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    // @ts-expect-error Fixme: should check whether option is defined\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\n      \"recordAndTuple\",\n      { syntaxType: \"hash\" },\n    ]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // @ts-expect-error\n    error.missingPlugins = \"doExpressions\"; // so @babel/core can provide better error message\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames = Object.keys(mixinPlugins) as ReadonlyArray<\n  \"estree\" | \"jsx\" | \"flow\" | \"typescript\" | \"v8intrinsic\" | \"placeholders\"\n>;\n","import type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType;\n  sourceFilename?: string;\n  startColumn: number;\n  startLine: number;\n  allowAwaitOutsideFunction: boolean;\n  allowReturnOutsideFunction: boolean;\n  allowImportExportEverywhere: boolean;\n  allowSuperOutsideMethod: boolean;\n  allowUndeclaredExports: boolean;\n  plugins: PluginList;\n  strictMode: boolean | undefined | null;\n  ranges: boolean;\n  tokens: boolean;\n  createParenthesizedExpressions: boolean;\n  errorRecovery: boolean;\n  attachComment: boolean;\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts?: Options | null): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    // @ts-expect-error key may not exist in opts\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","import * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  AssignmentPattern,\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  ObjectOrClassMember,\n  ClassMember,\n  ObjectMember,\n  TsNamedTypeElementBase,\n  PrivateName,\n  ObjectExpression,\n  ObjectPattern,\n  ArrayExpression,\n  ArrayPattern,\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils, type Undone } from \"./node\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  BIND_SCOPE_LEXICAL,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { Errors, type LValAncestor } from \"../parse-error\";\nimport type Parser from \"./index\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default abstract class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  abstract parseIdentifier(liberal?: boolean): Identifier;\n  abstract parseMaybeAssign(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseMaybeAssignAllowIn(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseObjectLike<T extends ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): T;\n  abstract parseObjPropValue(\n    prop: any,\n    startPos: number | null,\n    startLoc: Position | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void;\n  abstract parsePropertyName(\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ): Expression | Identifier;\n  abstract parsePrivateName(): PrivateName;\n  // Forward-declaration: defined in statement.js\n  abstract parseDecorator(): Decorator;\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n\n   - Parenthesized Destructuring patterns\n   - RestElement is not the last element\n   - Missing `=` in assignment pattern\n\n   NOTE: There is a corresponding \"isAssignable\" method.\n   When this one is updated, please check if also that one needs to be updated.\n\n   * @param {Node} node The expression atom\n   * @param {boolean} [isLHS=false] Whether we are parsing a LeftHandSideExpression.\n   *                                If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *                                If isLHS is `false`, we are in an arrow function parameters list.\n   * @memberof LValParser\n   */\n  toAssignable(node: Node, isLHS: boolean = false): void {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParemeterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParemeterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            { at: node },\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc,\n            });\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, { at: node.left.loc.end });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        { at: prop.key },\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      prop.type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, { at: prop });\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaLoc: Position | undefined | null,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      if (elt.type === \"SpreadElement\") {\n        elt.type = \"RestElement\";\n        const arg = elt.argument;\n        this.checkToRestConversion(arg, /* allowPattern */ true);\n        this.toAssignable(arg, isLHS);\n      } else {\n        this.toAssignable(elt, isLHS);\n      }\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, { at: elt });\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, { at: trailingCommaLoc });\n        }\n      }\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return (node.properties as ObjectExpression[\"properties\"]).every(\n          (prop, i) => {\n            return (\n              prop.type !== \"ObjectMethod\" &&\n              (i === last || prop.type !== \"SpreadElement\") &&\n              this.isAssignable(prop)\n            );\n          },\n        );\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return (node as ArrayExpression).elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: ReadonlyArray<Expression | undefined | null>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isParenthesizedExpr?: boolean,\n  ): ReadonlyArray<Expression | undefined | null> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: ReadonlyArray<Expression | undefined | null>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): SpreadElement {\n    const node = this.startNode<SpreadElement>();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(this: Parser): RestElement {\n    const node = this.startNode<RestElement>();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(this: Parser): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode<ArrayPattern>();\n        this.next();\n        // @ts-expect-error: Fixme: TSParameterProperty can not be assigned to node.elements\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: typeof charCodes[keyof typeof charCodes],\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): Array<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc,\n          });\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(\n    this: Parser,\n    prop: Undone<RestElement>,\n  ): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(this: Parser): ObjectMember | RestElement {\n    const prop = this.startNode<ObjectMember | RestElement>();\n    const { type, start: startPos, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(prop as Undone<RestElement>);\n    } else if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      (prop as Undone<ObjectMember>).key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop as Undone<ObjectMember>);\n    }\n    (prop as Undone<ObjectMember>).method = false;\n    return this.parseObjPropValue(\n      prop as Undone<ObjectMember>,\n      startPos,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n  }\n\n  parseAssignableListItem(\n    this: Parser,\n    allowModifiers: boolean | undefined | null,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    this: Parser,\n    startPos?: number | null,\n    startLoc?: Position | null,\n    left?: Pattern | null,\n  ): Pattern {\n    startLoc = startLoc ?? this.state.startLoc;\n    startPos = startPos ?? this.state.start;\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt<AssignmentPattern>(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus it's descendents must be subsquently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param {NodeType} type A Node `type` string\n   * @param {boolean} isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param {BindingTypes} binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns { boolean | string | [string, boolean] }\n   *          `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    binding: BindingTypes,\n  ): string | boolean {\n    return getOwn(\n      {\n        AssignmentPattern: \"left\",\n        RestElement: \"argument\",\n        ObjectProperty: \"value\",\n        ParenthesizedExpression: \"expression\",\n        ArrayPattern: \"elements\",\n        ObjectPattern: \"properties\",\n      },\n      // @ts-expect-error refine string to enum\n      type,\n    );\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param {Expression} expression The expression in question to check.\n   * @param {Object} options A set of options described below.\n   * @param {LValAncestor} options.in\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param {BindingTypes} [options.binding=BIND_NONE]\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BIND_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param {Set<string>|false} [options.checkClashes=false]\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param {boolean} [options.allowingSloppyLetBinding]\n   *        Whether an identifier named \"let\" should be allowed in sloppy mode.\n   *        Defaults to `true` unless lexical scope its being used. This property\n   *        is only relevant if the parser's state is in sloppy mode.\n   * @param {boolean} [options.strictModeChanged=false]\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param {boolean} [options.hasParenthesizedAncestor=false]\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   * @memberof LValParser\n   */\n\n  checkLVal(\n    expression: Expression | ObjectMember | RestElement,\n    {\n      in: ancestor,\n      binding = BIND_NONE,\n      checkClashes = false,\n      strictModeChanged = false,\n      allowingSloppyLetBinding = !(binding & BIND_SCOPE_LEXICAL),\n      hasParenthesizedAncestor = false,\n    }: {\n      in: LValAncestor;\n      binding?: BindingTypes;\n      checkClashes?: Set<string> | false;\n      strictModeChanged?: boolean;\n      allowingSloppyLetBinding?: boolean;\n      hasParenthesizedAncestor?: boolean;\n    },\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    if (type === \"MemberExpression\") {\n      if (binding !== BIND_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, { at: expression });\n      }\n      return;\n    }\n\n    if (expression.type === \"Identifier\") {\n      this.checkIdentifier(\n        expression as Identifier,\n        binding,\n        strictModeChanged,\n        allowingSloppyLetBinding,\n      );\n\n      const { name } = expression as Identifier;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, { at: expression });\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      expression.type,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, {\n        at: expression,\n        ancestor:\n          ancestor.type === \"UpdateExpression\"\n            ? { type: \"UpdateExpression\", prefix: ancestor.prefix }\n            : { type: ancestor.type },\n      });\n      return;\n    }\n\n    const [key, isParenthesizedExpression] = Array.isArray(validity)\n      ? validity\n      : [validity, type === \"ParenthesizedExpression\"];\n    const nextAncestor =\n      expression.type === \"ArrayPattern\" ||\n      expression.type === \"ObjectPattern\" ||\n      expression.type === \"ParenthesizedExpression\"\n        ? expression\n        : ancestor;\n\n    // Flow has difficulty tracking `key` and `expression`, but only if we use\n    // null-proto objects. If we use normal objects, everything works fine.\n    // @ts-expect-error\n    for (const child of [].concat(expression[key])) {\n      if (child) {\n        this.checkLVal(child, {\n          // @ts-expect-error: refine types\n          in: nextAncestor,\n          binding,\n          checkClashes,\n          allowingSloppyLetBinding,\n          strictModeChanged,\n          hasParenthesizedAncestor: isParenthesizedExpression,\n        });\n      }\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingTypes,\n    strictModeChanged: boolean = false,\n    allowLetBinding: boolean = !(bindingType & BIND_SCOPE_LEXICAL),\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BIND_NONE) {\n        this.raise(Errors.StrictEvalArguments, { at, referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, {\n          at,\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (!allowLetBinding && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, { at });\n    }\n\n    if (!(bindingType & BIND_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingTypes) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, { at: node });\n    }\n  }\n\n  checkCommaAfterRest(\n    close: typeof charCodes[keyof typeof charCodes],\n  ): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      { at: this.state.startLoc },\n    );\n\n    return true;\n  }\n}\n","// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport type { ParamKind } from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, type ParseError } from \"../parse-error\";\nimport { UnparenthesizedPipeBodyDescriptions } from \"../parse-error/pipeline-operator-errors\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier, type Undone } from \"./node\";\nimport type Parser from \".\";\n\nimport type { SourceType } from \"../options\";\n\nexport default abstract class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  abstract parseBlock(\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement;\n  abstract parseClass(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ): N.Class;\n  abstract parseDecorators(allowExport?: boolean): void;\n  abstract parseFunction<T extends N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ): T;\n  abstract parseFunctionParams(\n    node: N.Function,\n    allowModifiers?: boolean,\n  ): void;\n  abstract takeDecorators(node: N.HasDecorators): void;\n  abstract parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: N.Directive[] | null | undefined,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void;\n  abstract parseProgram(\n    program: N.Program,\n    end: TokenType,\n    sourceType?: SourceType,\n  ): N.Program;\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean | undefined | null,\n    protoRef: {\n      used: boolean;\n    },\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // @ts-expect-error\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, { at: key });\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, { at: key });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(this: Parser): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    // @ts-expect-error fixme: refine types\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    this: Parser,\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParseError<any>,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt<N.AssignmentExpression>(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startPos\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startPos\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startPos\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, {\n        in: this.finishNode(node, \"AssignmentExpression\"),\n      });\n      // @ts-expect-error todo(flow->ts) improve node types\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    this: Parser,\n    expr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    this: Parser,\n    left: N.Expression | N.PrivateName,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: left,\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt<N.LogicalExpression | N.BinaryExpression>(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc,\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return this.parseExprOp(\n          finishedNode,\n          leftStartPos,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(Errors.PipeBodyIsTighter, {\n                  at: this.state.startLoc,\n                });\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startPos,\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(this: Parser): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      // @ts-expect-error TS2345: Argument of type 'string' is not assignable to parameter of type '\"ArrowFunctionExpression\" | \"YieldExpression\" | \"AssignmentExpression\" | \"ConditionalExpression\"'.\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, {\n        at: startLoc,\n        // @ts-expect-error TS2322: Type 'string' is not assignable to type '\"AssignmentExpression\" | \"ArrowFunctionExpression\" | \"ConditionalExpression\" | \"YieldExpression\"'.\n        type: body.type,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, { at: startLoc });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(\n    node: N.AwaitExpression | Undone<N.UnaryExpression>,\n  ) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        at: node.argument,\n      });\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode<N.UnaryExpression | N.UpdateExpression>();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, { at: node });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, { at: node });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node as Undone<N.UnaryExpression>);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(\n      // @ts-expect-error using \"Undone\" node as \"done\"\n      node,\n      update,\n      refExpressionErrors,\n    );\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, { at: startLoc });\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    this: Parser,\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (update) {\n      // @ts-expect-error Type 'Node' is missing the following properties from type 'Undone<UpdateExpression>': prefix, operator, argument\n      const updateExpressionNode = node as Undone<N.UpdateExpression>;\n      this.checkLVal(updateExpressionNode.argument, {\n        in: this.finishNode(updateExpressionNode, \"UpdateExpression\"),\n      });\n      return node;\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt<N.UpdateExpression>(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, {\n        in: (expr = this.finishNode(node, \"UpdateExpression\")),\n      });\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    this: Parser,\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: boolean | null,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    this: Parser,\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(\n        base,\n        startPos,\n        startLoc,\n        state,\n      );\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startPos,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(\n          base,\n          startPos,\n          startLoc,\n          state,\n          computed,\n          optional,\n        );\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    this: Parser,\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt<\n      N.OptionalMemberExpression | N.MemberExpression\n    >(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, { at: startLoc });\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      (node as N.OptionalMemberExpression).optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    this: Parser,\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startPos,\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    this: Parser,\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors: ExpressionErrors | null = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    const node = this.startNodeAt<N.CallExpression | N.OptionalCallExpression>(\n      startPos,\n      startLoc,\n    );\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      // @ts-expect-error when optionalChainMember is true, node must be an optional call\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        // @ts-expect-error todo(flow->ts)\n        node,\n        refExpressionErrors,\n      );\n    }\n    let finishedNode:\n      | N.CallExpression\n      | N.OptionalCallExpression\n      | N.ArrowFunctionExpression = this.finishCallExpression(\n      node,\n      optionalChainMember,\n    );\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt<N.ArrowFunctionExpression>(startPos, startLoc),\n        finishedNode as N.CallExpression,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return finishedNode;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    this: Parser,\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node = this.startNodeAt<N.TaggedTemplateExpression>(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, { at: startLoc });\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n    node: Undone<T>,\n    optional: boolean,\n  ): T {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, {\n          at: node,\n          maxArgumentCount:\n            this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n              ? 2\n              : 1,\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, { at: arg });\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    this: Parser,\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: N.Node | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): Array<N.Expression | undefined | null> {\n    const elts: N.Expression[] = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node as N.ArrowFunctionExpression;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(this: Parser): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    let node;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode<N.MetaProperty | N.Import>();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node as Undone<N.MetaProperty>);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode<N.Class>();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, { at: callee });\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: this.state.startLoc,\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          break;\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n            !this.hasFollowingLineBreak()\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(\n                this.startNodeAtNode(id),\n                undefined,\n                true,\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode<N.TopicReference>();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: Undone<N.Node>,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          { at: startLoc },\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, {\n        at: startLoc,\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            // @ts-expect-error token must have a label\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, { at: startLoc });\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n  ): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition(),\n      });\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    return this.parseArrowExpression(node, params, true);\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(\n    this: Parser,\n    node: Undone<N.DoExpression>,\n    isAsync: boolean,\n  ): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode<N.Super>();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, { at: node });\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, { at: node });\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, { at: node });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode<N.PrivateName>();\n    const id = this.startNodeAt<N.Identifier>(\n      this.state.start + 1,\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      new Position(\n        this.state.curLine,\n        this.state.start + 1 - this.state.lineStart,\n        this.state.start + 1,\n      ),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(\n    this: Parser,\n  ): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode<N.FunctionExpression | N.MetaProperty>();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"sent\",\n      );\n    }\n    return this.parseFunction(node as Undone<N.FunctionExpression>);\n  }\n\n  parseMetaProperty(\n    node: Undone<N.MetaProperty>,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, {\n        at: node.property,\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: Undone<N.MetaProperty>): N.MetaProperty {\n    const id = this.createIdentifier(\n      this.startNodeAtNode<N.Identifier>(node),\n      \"import\",\n    );\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, { at: id });\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T extends N.Node>(\n    value: any,\n    type: T[\"type\"],\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T extends N.Node>(value: any, type: T[\"type\"]): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: {\n    value: any;\n    pattern: string;\n    flags: N.RegExpLiteral[\"flags\"];\n  }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode<N.BooleanLiteral>();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode<N.NullLiteral>();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(\n    this: Parser,\n    canBeArrow: boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList: N.Expression[] = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt<N.ArrowFunctionExpression>(\n      startPos,\n      startLoc,\n    );\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      // @ts-expect-error todo(flow->ts) improve node types\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt<N.SequenceExpression>(\n        innerStartPos,\n        innerStartLoc,\n      );\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(\n      startPos,\n      startLoc,\n      // @ts-expect-error todo(flow->ts)\n      val,\n    );\n  }\n\n  wrapParenthesis(\n    startPos: number,\n    startLoc: Position,\n    expression: N.Expression,\n  ): N.Expression {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startPos);\n\n      this.takeSurroundingComments(\n        expression,\n        startPos,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression = this.startNodeAt<N.ParenthesizedExpression>(\n      startPos,\n      startLoc,\n    );\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(\n    node: Undone<N.ArrowFunctionExpression>,\n  ): Undone<N.ArrowFunctionExpression> | undefined {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startPos: number,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startLoc: Position,\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(this: Parser): N.NewExpression | N.MetaProperty {\n    const node = this.startNode<N.NewExpression | N.MetaProperty>();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"new\",\n      );\n      this.next();\n      const metaProp = this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"target\",\n      );\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(Errors.UnexpectedNewTarget, { at: metaProp });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node as Undone<N.NewExpression>);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(this: Parser, node: Undone<N.NewExpression>): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(this: Parser, node: Undone<N.NewExpression>): void {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, { at: node.callee });\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.lastTokEndLoc,\n      });\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt<N.TemplateElement>(\n      elemStart,\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          // FIXME: explain\n          at: createPositionWithColumnOffset(startLoc, 2),\n        });\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      finishedNode,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return finishedNode;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(this: Parser, isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode<N.TemplateLiteral>();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(this: Parser): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike(\n    close: TokenType,\n    isPattern: true,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectPattern;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: false | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectExpression;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: true,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.RecordExpression;\n  parseObjectLike<T extends N.ObjectPattern | N.ObjectExpression>(\n    this: Parser,\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode<\n      N.ObjectExpression | N.ObjectPattern | N.RecordExpression\n    >();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(\n            // @ts-expect-error todo(flow->ts) improve node types\n            node,\n          );\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, { at: prop });\n      }\n\n      // @ts-expect-error\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      // @ts-expect-error Fixme: refine typings\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    // @ts-expect-error type is well defined\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: Undone<N.ObjectProperty>): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode<N.ObjectProperty>();\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, {\n            at: this.state.curPosition(),\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    return this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        { at: method },\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, { at: method });\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    this: Parser,\n    prop: Undone<N.ObjectMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): N.ObjectMethod | undefined | null {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      const finishedProp = this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    this: Parser,\n    prop: Undone<N.ObjectProperty>,\n    startPos: number | undefined | null,\n    startLoc: Position | undefined | null,\n    isPattern: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectProperty | undefined | null {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc,\n          });\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    this: Parser,\n    prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n    startPos: number | undefined | null,\n    startLoc: Position | undefined | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMethod | N.ObjectProperty {\n    const node =\n      this.parseObjectMethod(\n        prop as Undone<N.ObjectMethod>,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop as Undone<N.ObjectProperty>,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    this: Parser,\n    prop:\n      | Undone<N.ObjectOrClassMember | N.ClassMember>\n      | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop as Undone<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, {\n                at: privateKeyLoc,\n              });\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            throw this.unexpected();\n        }\n      }\n      (prop as any).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(\n    node: N.BodilessFunctionOrMethodBase,\n    isAsync?: boolean | null,\n  ): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod>(\n    this: Parser,\n    node: Undone<T>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: T[\"type\"],\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return finishedNode;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    this: Parser,\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode<N.ArrayExpression | N.TupleExpression>();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    params: N.Expression[] | undefined | null,\n    isAsync: boolean,\n    trailingCommaLoc?: Position | null,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: Undone<N.ArrowFunctionExpression>,\n    params: N.Expression[],\n    trailingCommaLoc?: Position | null,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params as (N.Pattern | N.TSParameterProperty)[];\n  }\n\n  parseFunctionBodyAndFinish<\n    T extends\n      | N.Function\n      | N.TSDeclareMethod\n      | N.TSDeclareFunction\n      | N.ClassPrivateMethod,\n  >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n    // @ts-expect-error (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowExpression?: boolean | null,\n    isMethod: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      (node as Undone<N.ArrowFunctionExpression>).body =\n        this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(\n        (this.prodParam.currentFlags() | PARAM_RETURN) as ParamKind,\n      );\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(Errors.IllegalLanguageModeDirective, {\n              at:\n                // @ts-expect-error\n                (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // @ts-expect-error\n                !!node.key\n                  ? // @ts-expect-error node.key has been gaurded\n                    node.key.loc.end\n                  : node,\n            });\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: ReadonlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: Undone<N.Function>,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isArrowFunction?: boolean | null,\n    strictModeChanged: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set<string>();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" } as const;\n    for (const param of node.params) {\n      this.checkLVal(param, {\n        in: formalParameters,\n        binding: BIND_VAR,\n        checkClashes,\n        strictModeChanged,\n      });\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    nodeForExtra?: N.Node | null,\n  ): (N.Expression | null)[] {\n    const elts: (N.Expression | null)[] = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: false,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, {\n          at: this.state.curPosition(),\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc,\n        });\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode<N.Identifier>();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(\n    node: Omit<N.Identifier, \"type\">,\n    name: string,\n  ): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, { at: startLoc });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, { at: startLoc });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc,\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError({ at: startLoc });\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, { at: startLoc });\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, {\n        at: startLoc,\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, {\n        at: startLoc,\n        reservedWord: word,\n      });\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(\n    this: Parser,\n    startPos: number,\n    startLoc: Position,\n  ): N.AwaitExpression {\n    const node = this.startNodeAt<N.AwaitExpression>(startPos, startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      {\n        // @ts-expect-error todo(flow->ts)\n        at: node,\n      },\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, { at: node });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(this: Parser): N.YieldExpression {\n    const node = this.startNode<N.YieldExpression>();\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      {\n        // @ts-expect-error todo(flow->ts)\n        at: node,\n      },\n    );\n\n    this.next();\n    let delegating = false;\n    let argument: N.Expression | null = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc,\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt<N.PipelineBareFunction>(\n        startPos,\n        startLoc,\n      );\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt<N.PipelineTopicExpression>(\n        startPos,\n        startLoc,\n      );\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, { at: this.state.startLoc });\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, { at: startLoc });\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(this: Parser, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(this: Parser): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    this.eat(tt.braceL);\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    const program = this.startNode<N.Program>();\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    this.eat(tt.braceR);\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prop: Undone<N.ObjectOrClassMember | N.ClassMember>,\n  ): void {}\n}\n","import * as N from \"../types\";\nimport {\n  tokenIsIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors } from \"../parse-error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier, type Undone } from \"./node\";\nimport type Parser from \"./index\";\n\nconst loopLabel = { kind: \"loop\" } as const,\n  switchLabel = { kind: \"switch\" } as const;\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n * @param {*} tokens\n * @returns\n */\nfunction babel7CompatTokens(tokens: (Token | N.Comment)[], input: string) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // @ts-expect-error: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default abstract class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(this: Parser, file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    this: Parser,\n    program: Undone<N.Program>,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, { at, localName });\n      }\n    }\n    return this.finishNode(program, \"Program\");\n  }\n\n  // TODO\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   *\n   * @param {N.Statement} stmt\n   * @returns {N.Directive}\n   * @memberof StatementParser\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = stmt as any;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode<N.InterpreterDirective>();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context?: string | null): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.isLetKeyword(context);\n  }\n\n  /**\n   * Assuming we have seen a contextual `let`, check if it starts a variable declaration\n   so that `left` should be interpreted as a `let` keyword.\n   *\n   * @param {?string} context When `context` is non nullish, it will return early and _skip_ checking\n                              if the next token after `let` is `{` or a keyword relational operator\n   * @returns {boolean}\n   * @memberof StatementParser\n   */\n  isLetKeyword(context?: string | null): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    // Also, `let \\` is never valid as an expression so this must be a keyword.\n    if (\n      nextCh === charCodes.backslash ||\n      nextCh === charCodes.leftSquareBracket\n    ) {\n      return true;\n    }\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identfier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatement(\n    this: Parser,\n    context?: string | null,\n    topLevel?: boolean,\n  ): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(\n    this: Parser,\n    context?: string | null,\n    topLevel?: boolean | null,\n  ): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node as Undone<N.DebuggerStatement>);\n      case tt._do:\n        return this.parseDoStatement(node as Undone<N.DoWhileStatement>);\n      case tt._for:\n        return this.parseForStatement(node as Undone<N.ForStatement>);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(Errors.StrictFunction, { at: this.state.startLoc });\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(Errors.SloppyFunction, { at: this.state.startLoc });\n          }\n        }\n        return this.parseFunctionStatement(\n          node as Undone<N.FunctionDeclaration>,\n          false,\n          !context,\n        );\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node as Undone<N.ClassDeclaration>, true);\n\n      case tt._if:\n        return this.parseIfStatement(node as Undone<N.IfStatement>);\n      case tt._return:\n        return this.parseReturnStatement(node as Undone<N.ReturnStatement>);\n      case tt._switch:\n        return this.parseSwitchStatement(node as Undone<N.SwitchStatement>);\n      case tt._throw:\n        return this.parseThrowStatement(node as Undone<N.ThrowStatement>);\n      case tt._try:\n        return this.parseTryStatement(node as Undone<N.TryStatement>);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          kind,\n        );\n\n      case tt._while:\n        return this.parseWhileStatement(node as Undone<N.WhileStatement>);\n      case tt._with:\n        return this.parseWithStatement(node as Undone<N.WithStatement>);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node as Undone<N.EmptyStatement>);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node as Undone<N.ImportDeclaration>);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(\n            node as Undone<\n              | N.ExportAllDeclaration\n              | N.ExportDefaultDeclaration\n              | N.ExportDefaultDeclaration\n            >,\n          );\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(result);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n              at: this.state.startLoc,\n            });\n          }\n          this.next();\n          return this.parseFunctionStatement(\n            node as Undone<N.FunctionDeclaration>,\n            true,\n            !context,\n          );\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(\n        node as Undone<N.LabeledStatement>,\n        maybeName,\n        // @ts-expect-error migrate to Babel types\n        expr,\n        context,\n      );\n    } else {\n      return this.parseExpressionStatement(\n        node as Undone<N.ExpressionStatement>,\n        expr,\n      );\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, { at: node });\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(this: Parser, allowExport?: boolean): void {\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorExportClass, { at: this.state.startLoc });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  parseDecorator(this: Parser): N.Decorator {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n    const node = this.startNode<N.Decorator>();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startPos, startLoc, expr);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(this: Parser, expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: true,\n  ): N.BreakStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: false,\n  ): N.ContinueStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, { at: node, type });\n    }\n  }\n\n  parseDebuggerStatement(\n    node: Undone<N.DebuggerStatement>,\n  ): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(this: Parser): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(\n    this: Parser,\n    node: Undone<N.DoWhileStatement>,\n  ): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(\n    this: Parser,\n    node: Undone<N.ForStatement | N.ForInOf>,\n  ): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    const isLet = startsWithLet && this.isLetKeyword();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const initNode = this.startNode<N.VariableDeclaration>();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(initNode, true, kind);\n      const init = this.finishNode(initNode, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(tt._of)) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node as Undone<N.ForInOf>, init, awaitAt);\n      }\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, { at: init });\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, { at: init });\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { in: { type } });\n      return this.parseForIn(\n        node as Undone<N.ForInStatement | N.ForOfStatement>,\n        // @ts-expect-error init has been transformed to an assignable\n        init,\n        awaitAt,\n      );\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node as Undone<N.ForStatement>, init);\n  }\n\n  parseFunctionStatement(\n    this: Parser,\n    node: Undone<N.FunctionDeclaration>,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(this: Parser, node: Undone<N.IfStatement>) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(this: Parser, node: Undone<N.ReturnStatement>) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, { at: this.state.startLoc });\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(this: Parser, node: Undone<N.SwitchStatement>) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases: N.SwitchStatement[\"cases\"] = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        // @ts-expect-error Fixme\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(this: Parser, node: Undone<N.ThrowStatement>) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, { at: this.state.lastTokEndLoc });\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(this: Parser): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, {\n      in: { type: \"CatchClause\" },\n      binding: BIND_LEXICAL,\n      allowingSloppyLetBinding: true,\n    });\n\n    return param;\n  }\n\n  parseTryStatement(\n    this: Parser,\n    node: Undone<N.TryStatement>,\n  ): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode<N.CatchClause>();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, { at: node });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    kind: \"var\" | \"let\" | \"const\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(\n    this: Parser,\n    node: Undone<N.WhileStatement>,\n  ): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(\n    this: Parser,\n    node: Undone<N.WithStatement>,\n  ): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, { at: this.state.startLoc });\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: Undone<N.EmptyStatement>): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    this: Parser,\n    node: Undone<N.LabeledStatement>,\n    maybeName: string,\n    expr: N.Identifier,\n    context?: string | null,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, {\n          at: expr,\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: Undone<N.ExpressionStatement>,\n    expr: N.Expression,\n  ) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    this: Parser,\n    allowDirectives: boolean = false,\n    createNewLexicalScope: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode<N.BlockStatement>();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    this: Parser,\n    node: Undone<N.BlockStatementLike>,\n    allowDirectives: boolean | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body: N.BlockStatementLike[\"body\"] = (node.body = []);\n    const directives: N.BlockStatementLike[\"directives\"] = (node.directives =\n      []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    this: Parser,\n    body: N.Statement[],\n    directives: N.Directive[] | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    this: Parser,\n    node: Undone<N.ForStatement>,\n    init?: N.VariableDeclaration | N.Expression | null,\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    this: Parser,\n    node: Undone<N.ForInOf>,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt?: Position | null,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, {\n        at: init,\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, {\n        at: init,\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n    allowMissingInitializer: boolean = false,\n  ): Undone<N.VariableDeclaration> {\n    const declarations: N.VariableDeclarator[] = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode<N.VariableDeclarator>();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n        ? this.parseMaybeAssignDisallowIn()\n        : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"destructuring\",\n          });\n        } else if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"const\",\n          });\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(\n    this: Parser,\n    decl: Undone<N.VariableDeclarator>,\n    kind: \"var\" | \"let\" | \"const\",\n  ): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, {\n      in: { type: \"VariableDeclarator\" },\n      binding: kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n    });\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T extends N.NormalFunction>(\n    this: Parser,\n    node: Undone<T>,\n    statement: number = FUNC_NO_FLAGS,\n    isAsync: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(Errors.GeneratorInSingleStatementContext, {\n        at: this.state.startLoc,\n      });\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node as T);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node as T;\n  }\n\n  parseFunctionId(requireId?: boolean): N.Identifier | undefined | null {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowModifiers?: boolean,\n  ): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T extends N.Class>(\n    this: Parser,\n    node: Undone<T>,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(\n    this: Parser,\n    hadSuperClass: boolean,\n    oldStrict: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody = this.startNode<N.ClassBody>();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc,\n            });\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode<N.ClassMember>();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          // @ts-expect-error Fixme\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          // @ts-expect-error Fixme\n          member.kind === \"constructor\" &&\n          // @ts-expect-error Fixme\n          member.decorators &&\n          // @ts-expect-error Fixme\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, { at: member });\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, { at: this.state.startLoc });\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = member as any;\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = member as any;\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, member as any as N.StaticBlock);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod = member as N.ClassMethod;\n    const privateMethod = member as N.ClassPrivateMethod;\n    const publicProp = member as N.ClassProperty;\n    const privateProp = member as N.ClassPrivateProperty;\n    const accessorProp = member as N.ClassAccessorProperty;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          at: publicMethod.key,\n        });\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, { at: key });\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, { at: key });\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, { at: publicMethod.key });\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, { at: publicMethod.key });\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (\n      isContextual &&\n      key.name === \"accessor\" &&\n      !this.isLineTerminator()\n    ) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(\n    this: Parser,\n    member: Undone<N.ClassMember>,\n  ): N.Expression | N.Identifier {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, { at: this.state.startLoc });\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc,\n        });\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<\n      N.StaticBlock & {\n        decorators?: Array<N.Decorator>;\n      }\n    >,\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body: N.Node[] = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, { at: member });\n    }\n  }\n\n  pushClassProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassProperty,\n  ) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, { at: prop.key });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: Undone<N.ClassPrivateProperty>,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed) {\n      // Not private, so not node is not a PrivateName and we can safely cast\n      const key = prop.key as N.Expression;\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        // Non-computed field, which is either an identifier named \"constructor\"\n        // or a string literal named \"constructor\"\n        this.raise(Errors.ConstructorClassField, { at: key });\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key),\n        CLASS_ELEMENT_OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassPrivateMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: Undone<\n      N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod\n    >,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    methodOrProp: Undone<N.ClassMethod | N.ClassProperty>,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    this: Parser,\n    node: Undone<N.ClassPrivateProperty>,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(this: Parser, node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    this: Parser,\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    this: Parser,\n    node: Undone<\n      N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty\n    >,\n  ): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: Undone<N.Class>,\n    isStatement: boolean,\n    optionalId?: boolean | null,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, { at: this.state.startLoc });\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(this: Parser, node: Undone<N.Class>): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(\n    this: Parser,\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n  ): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar =\n      parseAfterDefault &&\n      this.eatExportStar(\n        // @ts-expect-error todo(flow->ts)\n        node,\n      );\n    const hasNamespace =\n      hasStar &&\n      this.maybeParseExportNamespaceSpecifier(\n        // @ts-expect-error todo(flow->ts)\n        node,\n      );\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node as Undone<N.ExportNamedDeclaration>, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(\n        node as Undone<N.ExportNamedDeclaration>,\n        isFromRequired,\n      );\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(\n        node as Undone<N.ExportNamedDeclaration>,\n      );\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(\n        node as Undone<N.ExportNamedDeclaration>,\n        true,\n        false,\n        !!(node as Undone<N.ExportNamedDeclaration>).source,\n      );\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      (node as Undone<N.ExportDefaultDeclaration>).declaration =\n        this.parseExportDefaultExpression();\n      this.checkExport(node as Undone<N.ExportDefaultDeclaration>, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(tt._as)) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n  ): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(this: Parser): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr as Undone<N.FunctionExpression>,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc });\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc,\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  parseExportDeclaration(\n    this: Parser,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    node: Undone<N.ExportNamedDeclaration>,\n  ): N.Declaration | undefined | null {\n    return this.parseStatement(null) as N.Declaration;\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n    expect?: boolean,\n  ): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n        this.checkJSONModuleImport(node);\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          throw this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: Undone<N.ExportNamedDeclaration | N.ExportDefaultDeclaration>,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = (node as any as N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              at: declaration,\n            });\n          }\n        }\n        // @ts-expect-error node.specifiers may not exist\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        // @ts-expect-error node.specifiers may not exist\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, {\n                at: specifier,\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    // If node.declaration is a class, it will take all decorators in the current context.\n    // Thus we should throw if we see non-empty decorators here.\n    if (currentContextDecorators.length) {\n      throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      // @ts-expect-error migrate to Babel types\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node: Undone<\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier\n    >,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, { at: node });\n      } else {\n        this.raise(Errors.DuplicateExport, { at: node, exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, {\n          at: result,\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  isJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ): boolean {\n    if (node.assertions != null) {\n      return node.assertions.some(({ key, value }) => {\n        return (\n          value.value === \"json\" &&\n          (key.type === \"Identifier\"\n            ? key.name === \"type\"\n            : key.value === \"type\")\n        );\n      });\n    }\n    return false;\n  }\n\n  checkJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ) {\n    // @ts-expect-error Fixme: node.type must be undefined because they are undone\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      // @ts-expect-error\n      const { specifiers } = node;\n      // @ts-expect-error\n      if (node.specifiers != null) {\n        // @ts-expect-error refine specifier types\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\"\n              ? imported.name !== \"default\"\n              : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(Errors.ImportJSONBindingNotDefault, {\n            at: nonDefaultNamedSpecifier.loc.start,\n          });\n        }\n      }\n    }\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(this: Parser, node: Undone<N.ImportDeclaration>): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(tt._from);\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        // @ts-expect-error attributes have been deprecated\n        node.attributes = attributes;\n      }\n    }\n    this.checkJSONModuleImport(node);\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(this: Parser): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom() as N.StringLiteral;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  shouldParseDefaultImport(node: Undone<N.ImportDeclaration>): boolean {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    node: Undone<N.ImportDeclaration>,\n    specifier: Undone<T>,\n    type: T[\"type\"],\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(specifier: Undone<T>, type: T[\"type\"]) {\n    this.checkLVal(specifier.local, {\n      // @ts-expect-error refine types\n      in: specifier,\n      binding: BIND_LEXICAL,\n    });\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries |AssertEntries}\n   * @returns {N.ImportAttribute[]}\n   * @memberof StatementParser\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: this.state.startLoc,\n          key: keyName,\n        });\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   * @returns\n   * @memberof StatementParser\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, {\n          at: node.key,\n        });\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: node.key,\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode<N.ImportDefaultSpecifier>(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode<N.ImportNamespaceSpecifier>();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: Undone<N.ImportDeclaration>) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode<N.ImportSpecifier>();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: Undone<N.ImportSpecifier>,\n    importedIsString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, {\n          at: specifier,\n          importName: (imported as N.StringLiteral).value,\n        });\n      }\n      this.checkReservedWord(\n        (imported as N.Identifier).name,\n        specifier.loc.start,\n        true,\n        true,\n      );\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","import type { Options } from \"../options\";\nimport type * as N from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<\n  string,\n  {\n    [x: string]: any;\n  }\n>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  // todo(flow->ts) - this probably can be removed\n  // abstract jsxParseOpeningElementAfterName(\n  //   node: N.JSXOpeningElement,\n  // ): N.JSXOpeningElement;\n\n  constructor(options: Options | undefined | null, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): {\n    new (...args: any): ScopeHandler;\n  } {\n    return ScopeHandler;\n  }\n\n  parse(): N.File {\n    this.enterInitialScopes();\n    const file = this.startNode() as N.File;\n    const program = this.startNode() as N.Program;\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","import { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport type {\n  PluginConfig as ParserPlugin,\n  FlowPluginOptions,\n  RecordAndTuplePluginOptions,\n  PipelineOperatorPluginOptions,\n} from \"./typings\";\nimport Parser from \"./parser\";\n\nimport {\n  ExportedTokenType,\n  getExportedToken,\n  tt as internalTokenTypes,\n  type InternalTokenTypes,\n} from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(\n  internalTokenTypes: InternalTokenTypes,\n): Record<string, ExportedTokenType> {\n  const tokenTypes: Record<string, ExportedTokenType> = {};\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: Options | undefined | null, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: { new (...args: any): Parser } } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): {\n  new (...args: any): Parser;\n} {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      // @ts-expect-error todo(flow->ts)\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n\nexport type {\n  FlowPluginOptions,\n  ParserPlugin,\n  PipelineOperatorPluginOptions,\n  RecordAndTuplePluginOptions,\n};\nexport type ParserOptions = Partial<Options>;\n"]},"metadata":{},"sourceType":"script"}