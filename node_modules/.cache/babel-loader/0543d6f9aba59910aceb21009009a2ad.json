{"ast":null,"code":"var _jsxFileName = \"/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/src/pages/Album.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport getMusics from '../services/musicsAPI';\nimport Loading from './Loading';\nimport MusicCard from '../components/MusicCard';\nimport { addSong, getFavoriteSongs, removeSong } from '../services/favoriteSongsAPI';\nimport styles from './Album.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Album extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      musics: [],\n      albumInfo: {},\n      requestIsDone: true,\n      favoriteSongs: [],\n      isLoading: false\n    };\n\n    this.getFavoriteSongs = async () => {\n      this.setState({\n        requestIsDone: false\n      });\n      const favoriteSongs = await getFavoriteSongs();\n      this.setState({\n        favoriteSongs,\n        requestIsDone: true\n      });\n    };\n\n    this.fetchMusics = async () => {\n      this.setState({\n        requestIsDone: false,\n        isLoading: true\n      });\n      const {\n        match: {\n          params: {\n            id\n          }\n        }\n      } = this.props;\n      const allInfos = await getMusics(id);\n      const albumMusics = allInfos.filter(info => info.trackName);\n      this.setState({\n        albumInfo: allInfos[0],\n        musics: albumMusics,\n        isLoading: false\n      });\n    };\n\n    this.clickChange = async trackId => {\n      const {\n        musics\n      } = this.state;\n      const song = musics.find(music => music.trackId === trackId);\n      console.log(song);\n      this.setState({\n        requestIsDone: false\n      });\n\n      if (target.checked) {\n        await addSong(song);\n        const favoriteSongs = await getFavoriteSongs();\n        this.setState({\n          requestIsDone: true,\n          favoriteSongs\n        });\n      } else {\n        await removeSong(song);\n        const favoriteSongs = await getFavoriteSongs();\n        this.setState({\n          requestIsDone: true,\n          favoriteSongs\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.fetchMusics();\n    this.getFavoriteSongs();\n  }\n\n  render() {\n    const {\n      albumInfo,\n      musics,\n      requestIsDone,\n      favoriteSongs,\n      isLoading\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"main\", {\n      \"data-testid\": \"page-album\",\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: styles.album,\n        children: [/*#__PURE__*/_jsxDEV(\"header\", {\n          children: !isLoading && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: albumInfo.artworkUrl100,\n              alt: \"capa\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 20\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                children: albumInfo.collectionName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 22\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: albumInfo.artistName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 22\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 20\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          className: styles.musics,\n          children: [!requestIsDone && /*#__PURE__*/_jsxDEV(Loading, {\n            header: false,\n            textColor: \"rgba(192, 195, 201, 1)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 33\n          }, this), requestIsDone && /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: musics.map(music => /*#__PURE__*/_jsxDEV(MusicCard, {\n              music: music,\n              clickChange: this.clickChange,\n              favoriteSongs: favoriteSongs,\n              favorite: favoriteSongs.some(song => song.trackId === music.trackId)\n            }, music.trackId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nAlbum.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired\n    })\n  }).isRequired\n};\nexport default Album;","map":{"version":3,"names":["React","Component","PropTypes","Header","getMusics","Loading","MusicCard","addSong","getFavoriteSongs","removeSong","styles","Album","state","musics","albumInfo","requestIsDone","favoriteSongs","isLoading","setState","fetchMusics","match","params","id","props","allInfos","albumMusics","filter","info","trackName","clickChange","trackId","song","find","music","console","log","target","checked","componentDidMount","render","container","album","artworkUrl100","collectionName","artistName","map","some","propTypes","shape","string","isRequired"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/src/pages/Album.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport getMusics from '../services/musicsAPI';\nimport Loading from './Loading';\nimport MusicCard from '../components/MusicCard';\nimport { addSong, getFavoriteSongs, removeSong } from '../services/favoriteSongsAPI';\nimport styles from './Album.module.css';\n\nclass Album extends Component {\n  state = {\n    musics: [],\n    albumInfo: {},\n    requestIsDone: true,\n    favoriteSongs: [],\n    isLoading: false,\n  };\n\n  componentDidMount() {\n    this.fetchMusics();\n    this.getFavoriteSongs();\n  }\n\n  getFavoriteSongs = async () => {\n    this.setState({\n      requestIsDone: false,\n    });\n    const favoriteSongs = await getFavoriteSongs();\n    this.setState({\n      favoriteSongs,\n      requestIsDone: true,\n    });\n  };\n\n  fetchMusics = async () => {\n    this.setState({\n      requestIsDone: false,\n      isLoading: true,\n    });\n    const {\n      match: {\n        params: { id },\n      } } = this.props;\n\n    const allInfos = await getMusics(id);\n    const albumMusics = allInfos.filter((info) => info.trackName);\n    this.setState({\n      albumInfo: allInfos[0],\n      musics: albumMusics,\n      isLoading: false,\n    });\n  };\n\n  clickChange = async (trackId) => {\n    const { musics } = this.state;\n    const song = musics.find((music) => music.trackId === trackId);\n    console.log(song);\n    this.setState({\n      requestIsDone: false,\n    });\n    if (target.checked) {\n      await addSong(song);\n      const favoriteSongs = await getFavoriteSongs();\n      this.setState({\n        requestIsDone: true,\n        favoriteSongs,\n      });\n    } else {\n      await removeSong(song);\n      const favoriteSongs = await getFavoriteSongs();\n      this.setState({\n        requestIsDone: true,\n        favoriteSongs,\n      });\n    }\n  };\n\n  render() {\n    const { albumInfo, musics, requestIsDone, favoriteSongs, isLoading } = this.state;\n\n    return (\n\n      <main data-testid=\"page-album\" className={ styles.container }>\n\n        <Header />\n        <main className={ styles.album }>\n          <header>\n            {\n              !isLoading\n               && (\n                 <>\n                   <img src={ albumInfo.artworkUrl100 } alt=\"capa\" />\n                   <div>\n                     <h1>\n                       { albumInfo.collectionName }\n                     </h1>\n                     <h2>{albumInfo.artistName}</h2>\n                   </div>\n                 </>\n               )\n            }\n          </header>\n          <section className={ styles.musics }>\n\n            { !requestIsDone && <Loading\n              header={ false }\n              textColor=\"rgba(192, 195, 201, 1)\"\n            /> }\n            { requestIsDone\n            && (\n              <ul>\n                {\n                  musics.map((music) => (\n                    <MusicCard\n                      key={ music.trackId }\n                      music={ music }\n                      clickChange={ this.clickChange }\n                      favoriteSongs={ favoriteSongs }\n                      favorite={ favoriteSongs\n                        .some((song) => song.trackId === music.trackId) }\n                    />\n                  ))\n                }\n              </ul>\n            )}\n          </section>\n        </main>\n      </main>\n\n    );\n  }\n}\n\nAlbum.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }),\n  }).isRequired,\n};\n\nexport default Album;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}