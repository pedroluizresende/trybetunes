{"ast":null,"code":"'use strict';\n\nconst configurationError = require('./utils/configurationError');\n\nconst path = require('path');\n\nconst {\n  augmentConfigFull\n} = require('./augmentConfig');\n\nconst {\n  cosmiconfig\n} = require('cosmiconfig');\n\nconst IS_TEST = process.env.NODE_ENV === 'test';\nconst STOP_DIR = IS_TEST ? process.cwd() : undefined;\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n\n/** @typedef {import('stylelint').Config} StylelintConfig */\n\n/** @typedef {import('stylelint').CosmiconfigResult} StylelintCosmiconfigResult */\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {string} [searchPath]\n * @param {string} [filePath]\n * @returns {Promise<StylelintCosmiconfigResult>}\n */\n\nmodule.exports = async function getConfigForFile(stylelint) {\n  let searchPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : stylelint._options.cwd;\n  let filePath = arguments.length > 2 ? arguments[2] : undefined;\n  const optionsConfig = stylelint._options.config;\n  const cwd = stylelint._options.cwd;\n\n  if (optionsConfig !== undefined) {\n    const cached = stylelint._specifiedConfigCache.get(optionsConfig); // If config has overrides the resulting config might be different for some files.\n    // Cache results only if resulted config is the same for all linted files.\n\n\n    if (cached && !optionsConfig.overrides) {\n      return cached;\n    }\n\n    const augmentedResult = augmentConfigFull(stylelint, filePath, {\n      config: optionsConfig,\n      // Add the extra path part so that we can get the directory without being\n      // confused\n      filepath: path.join(cwd, 'argument-config')\n    });\n\n    stylelint._specifiedConfigCache.set(optionsConfig, augmentedResult);\n\n    return augmentedResult;\n  }\n\n  const configExplorer = cosmiconfig('stylelint', {\n    transform: cosmiconfigResult => augmentConfigFull(stylelint, filePath, cosmiconfigResult),\n    stopDir: STOP_DIR\n  });\n  let config = stylelint._options.configFile ? await configExplorer.load(stylelint._options.configFile) : await configExplorer.search(searchPath);\n\n  if (!config) {\n    config = await configExplorer.search(cwd);\n  }\n\n  if (!config) {\n    return Promise.reject(configurationError(`No configuration provided${searchPath ? ` for ${searchPath}` : ''}`));\n  }\n\n  return config;\n};","map":{"version":3,"names":["configurationError","require","path","augmentConfigFull","cosmiconfig","IS_TEST","process","env","NODE_ENV","STOP_DIR","cwd","undefined","module","exports","getConfigForFile","stylelint","searchPath","_options","filePath","optionsConfig","config","cached","_specifiedConfigCache","get","overrides","augmentedResult","filepath","join","set","configExplorer","transform","cosmiconfigResult","stopDir","configFile","load","search","Promise","reject"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/stylelint/lib/getConfigForFile.js"],"sourcesContent":["'use strict';\n\nconst configurationError = require('./utils/configurationError');\nconst path = require('path');\nconst { augmentConfigFull } = require('./augmentConfig');\nconst { cosmiconfig } = require('cosmiconfig');\n\nconst IS_TEST = process.env.NODE_ENV === 'test';\nconst STOP_DIR = IS_TEST ? process.cwd() : undefined;\n\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n/** @typedef {import('stylelint').Config} StylelintConfig */\n/** @typedef {import('stylelint').CosmiconfigResult} StylelintCosmiconfigResult */\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {string} [searchPath]\n * @param {string} [filePath]\n * @returns {Promise<StylelintCosmiconfigResult>}\n */\nmodule.exports = async function getConfigForFile(\n\tstylelint,\n\tsearchPath = stylelint._options.cwd,\n\tfilePath,\n) {\n\tconst optionsConfig = stylelint._options.config;\n\tconst cwd = stylelint._options.cwd;\n\n\tif (optionsConfig !== undefined) {\n\t\tconst cached = stylelint._specifiedConfigCache.get(optionsConfig);\n\n\t\t// If config has overrides the resulting config might be different for some files.\n\t\t// Cache results only if resulted config is the same for all linted files.\n\t\tif (cached && !optionsConfig.overrides) {\n\t\t\treturn cached;\n\t\t}\n\n\t\tconst augmentedResult = augmentConfigFull(stylelint, filePath, {\n\t\t\tconfig: optionsConfig,\n\t\t\t// Add the extra path part so that we can get the directory without being\n\t\t\t// confused\n\t\t\tfilepath: path.join(cwd, 'argument-config'),\n\t\t});\n\n\t\tstylelint._specifiedConfigCache.set(optionsConfig, augmentedResult);\n\n\t\treturn augmentedResult;\n\t}\n\n\tconst configExplorer = cosmiconfig('stylelint', {\n\t\ttransform: (cosmiconfigResult) => augmentConfigFull(stylelint, filePath, cosmiconfigResult),\n\t\tstopDir: STOP_DIR,\n\t});\n\n\tlet config = stylelint._options.configFile\n\t\t? await configExplorer.load(stylelint._options.configFile)\n\t\t: await configExplorer.search(searchPath);\n\n\tif (!config) {\n\t\tconfig = await configExplorer.search(cwd);\n\t}\n\n\tif (!config) {\n\t\treturn Promise.reject(\n\t\t\tconfigurationError(`No configuration provided${searchPath ? ` for ${searchPath}` : ''}`),\n\t\t);\n\t}\n\n\treturn config;\n};\n"],"mappings":"AAAA;;AAEA,MAAMA,kBAAkB,GAAGC,OAAO,CAAC,4BAAD,CAAlC;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAM;EAAEE;AAAF,IAAwBF,OAAO,CAAC,iBAAD,CAArC;;AACA,MAAM;EAAEG;AAAF,IAAkBH,OAAO,CAAC,aAAD,CAA/B;;AAEA,MAAMI,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAAzC;AACA,MAAMC,QAAQ,GAAGJ,OAAO,GAAGC,OAAO,CAACI,GAAR,EAAH,GAAmBC,SAA3C;AAEA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAiB,eAAeC,gBAAf,CAChBC,SADgB,EAIf;EAAA,IAFDC,UAEC,uEAFYD,SAAS,CAACE,QAAV,CAAmBP,GAE/B;EAAA,IADDQ,QACC;EACD,MAAMC,aAAa,GAAGJ,SAAS,CAACE,QAAV,CAAmBG,MAAzC;EACA,MAAMV,GAAG,GAAGK,SAAS,CAACE,QAAV,CAAmBP,GAA/B;;EAEA,IAAIS,aAAa,KAAKR,SAAtB,EAAiC;IAChC,MAAMU,MAAM,GAAGN,SAAS,CAACO,qBAAV,CAAgCC,GAAhC,CAAoCJ,aAApC,CAAf,CADgC,CAGhC;IACA;;;IACA,IAAIE,MAAM,IAAI,CAACF,aAAa,CAACK,SAA7B,EAAwC;MACvC,OAAOH,MAAP;IACA;;IAED,MAAMI,eAAe,GAAGtB,iBAAiB,CAACY,SAAD,EAAYG,QAAZ,EAAsB;MAC9DE,MAAM,EAAED,aADsD;MAE9D;MACA;MACAO,QAAQ,EAAExB,IAAI,CAACyB,IAAL,CAAUjB,GAAV,EAAe,iBAAf;IAJoD,CAAtB,CAAzC;;IAOAK,SAAS,CAACO,qBAAV,CAAgCM,GAAhC,CAAoCT,aAApC,EAAmDM,eAAnD;;IAEA,OAAOA,eAAP;EACA;;EAED,MAAMI,cAAc,GAAGzB,WAAW,CAAC,WAAD,EAAc;IAC/C0B,SAAS,EAAGC,iBAAD,IAAuB5B,iBAAiB,CAACY,SAAD,EAAYG,QAAZ,EAAsBa,iBAAtB,CADJ;IAE/CC,OAAO,EAAEvB;EAFsC,CAAd,CAAlC;EAKA,IAAIW,MAAM,GAAGL,SAAS,CAACE,QAAV,CAAmBgB,UAAnB,GACV,MAAMJ,cAAc,CAACK,IAAf,CAAoBnB,SAAS,CAACE,QAAV,CAAmBgB,UAAvC,CADI,GAEV,MAAMJ,cAAc,CAACM,MAAf,CAAsBnB,UAAtB,CAFT;;EAIA,IAAI,CAACI,MAAL,EAAa;IACZA,MAAM,GAAG,MAAMS,cAAc,CAACM,MAAf,CAAsBzB,GAAtB,CAAf;EACA;;EAED,IAAI,CAACU,MAAL,EAAa;IACZ,OAAOgB,OAAO,CAACC,MAAR,CACNrC,kBAAkB,CAAE,4BAA2BgB,UAAU,GAAI,QAAOA,UAAW,EAAtB,GAA0B,EAAG,EAApE,CADZ,CAAP;EAGA;;EAED,OAAOI,MAAP;AACA,CAjDD"},"metadata":{},"sourceType":"script"}