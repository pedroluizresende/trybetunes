{"ast":null,"code":"'use strict';\n\nconst isPathNotFoundError = require('./utils/isPathNotFoundError');\n\nconst lintPostcssResult = require('./lintPostcssResult');\n\nconst path = require('path');\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n\n/** @typedef {import('stylelint').GetLintSourceOptions} Options */\n\n/** @typedef {import('postcss').Result} Result */\n\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n\n/** @typedef {import('stylelint').StylelintPostcssResult} StylelintPostcssResult */\n\n/**\n * Run stylelint on a PostCSS Result, either one that is provided\n * or one that we create\n * @param {StylelintInternalApi} stylelint\n * @param {Options} options\n * @returns {Promise<PostcssResult>}\n */\n\n\nmodule.exports = async function lintSource(stylelint) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!options.filePath && options.code === undefined && !options.existingPostcssResult) {\n    return Promise.reject(new Error('You must provide filePath, code, or existingPostcssResult'));\n  }\n\n  const isCodeNotFile = options.code !== undefined;\n  const inputFilePath = isCodeNotFile ? options.codeFilename : options.filePath;\n\n  if (inputFilePath !== undefined && !path.isAbsolute(inputFilePath)) {\n    if (isCodeNotFile) {\n      return Promise.reject(new Error('codeFilename must be an absolute path'));\n    }\n\n    return Promise.reject(new Error('filePath must be an absolute path'));\n  }\n\n  const isIgnored = await stylelint.isPathIgnored(inputFilePath).catch(err => {\n    if (isCodeNotFile && isPathNotFoundError(err)) return false;\n    throw err;\n  });\n\n  if (isIgnored) {\n    return options.existingPostcssResult ? Object.assign(options.existingPostcssResult, {\n      stylelint: createEmptyStylelintPostcssResult()\n    }) : createEmptyPostcssResult(inputFilePath);\n  }\n\n  const configSearchPath = stylelint._options.configFile || inputFilePath;\n  const cwd = stylelint._options.cwd;\n  const configForFile = await stylelint.getConfigForFile(configSearchPath, inputFilePath).catch(err => {\n    if (isCodeNotFile && isPathNotFoundError(err)) return stylelint.getConfigForFile(cwd);\n    throw err;\n  });\n\n  if (!configForFile) {\n    return Promise.reject(new Error('Config file not found'));\n  }\n\n  const config = configForFile.config;\n  const existingPostcssResult = options.existingPostcssResult;\n  /** @type {StylelintPostcssResult} */\n\n  const stylelintResult = {\n    ruleSeverities: {},\n    customMessages: {},\n    ruleMetadata: {},\n    disabledRanges: {}\n  };\n  const postcssResult = existingPostcssResult || (await stylelint._getPostcssResult({\n    code: options.code,\n    codeFilename: options.codeFilename,\n    filePath: inputFilePath,\n    codeProcessors: config.codeProcessors,\n    customSyntax: config.customSyntax\n  }));\n  const stylelintPostcssResult = Object.assign(postcssResult, {\n    stylelint: stylelintResult\n  });\n  await lintPostcssResult(stylelint._options, stylelintPostcssResult, config);\n  return stylelintPostcssResult;\n};\n/**\n * @returns {StylelintPostcssResult}\n */\n\n\nfunction createEmptyStylelintPostcssResult() {\n  return {\n    ruleSeverities: {},\n    customMessages: {},\n    ruleMetadata: {},\n    disabledRanges: {},\n    ignored: true,\n    stylelintError: false\n  };\n}\n/**\n * @param {string} [filePath]\n * @returns {PostcssResult}\n */\n\n\nfunction createEmptyPostcssResult(filePath) {\n  return {\n    root: {\n      source: {\n        input: {\n          file: filePath\n        }\n      }\n    },\n    messages: [],\n    opts: undefined,\n    stylelint: createEmptyStylelintPostcssResult(),\n    warn: () => {}\n  };\n}","map":{"version":3,"names":["isPathNotFoundError","require","lintPostcssResult","path","module","exports","lintSource","stylelint","options","filePath","code","undefined","existingPostcssResult","Promise","reject","Error","isCodeNotFile","inputFilePath","codeFilename","isAbsolute","isIgnored","isPathIgnored","catch","err","Object","assign","createEmptyStylelintPostcssResult","createEmptyPostcssResult","configSearchPath","_options","configFile","cwd","configForFile","getConfigForFile","config","stylelintResult","ruleSeverities","customMessages","ruleMetadata","disabledRanges","postcssResult","_getPostcssResult","codeProcessors","customSyntax","stylelintPostcssResult","ignored","stylelintError","root","source","input","file","messages","opts","warn"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/stylelint/lib/lintSource.js"],"sourcesContent":["'use strict';\n\nconst isPathNotFoundError = require('./utils/isPathNotFoundError');\nconst lintPostcssResult = require('./lintPostcssResult');\nconst path = require('path');\n\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n/** @typedef {import('stylelint').GetLintSourceOptions} Options */\n/** @typedef {import('postcss').Result} Result */\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').StylelintPostcssResult} StylelintPostcssResult */\n\n/**\n * Run stylelint on a PostCSS Result, either one that is provided\n * or one that we create\n * @param {StylelintInternalApi} stylelint\n * @param {Options} options\n * @returns {Promise<PostcssResult>}\n */\nmodule.exports = async function lintSource(stylelint, options = {}) {\n\tif (!options.filePath && options.code === undefined && !options.existingPostcssResult) {\n\t\treturn Promise.reject(new Error('You must provide filePath, code, or existingPostcssResult'));\n\t}\n\n\tconst isCodeNotFile = options.code !== undefined;\n\n\tconst inputFilePath = isCodeNotFile ? options.codeFilename : options.filePath;\n\n\tif (inputFilePath !== undefined && !path.isAbsolute(inputFilePath)) {\n\t\tif (isCodeNotFile) {\n\t\t\treturn Promise.reject(new Error('codeFilename must be an absolute path'));\n\t\t}\n\n\t\treturn Promise.reject(new Error('filePath must be an absolute path'));\n\t}\n\n\tconst isIgnored = await stylelint.isPathIgnored(inputFilePath).catch((err) => {\n\t\tif (isCodeNotFile && isPathNotFoundError(err)) return false;\n\n\t\tthrow err;\n\t});\n\n\tif (isIgnored) {\n\t\treturn options.existingPostcssResult\n\t\t\t? Object.assign(options.existingPostcssResult, {\n\t\t\t\t\tstylelint: createEmptyStylelintPostcssResult(),\n\t\t\t  })\n\t\t\t: createEmptyPostcssResult(inputFilePath);\n\t}\n\n\tconst configSearchPath = stylelint._options.configFile || inputFilePath;\n\tconst cwd = stylelint._options.cwd;\n\n\tconst configForFile = await stylelint\n\t\t.getConfigForFile(configSearchPath, inputFilePath)\n\t\t.catch((err) => {\n\t\t\tif (isCodeNotFile && isPathNotFoundError(err)) return stylelint.getConfigForFile(cwd);\n\n\t\t\tthrow err;\n\t\t});\n\n\tif (!configForFile) {\n\t\treturn Promise.reject(new Error('Config file not found'));\n\t}\n\n\tconst config = configForFile.config;\n\tconst existingPostcssResult = options.existingPostcssResult;\n\n\t/** @type {StylelintPostcssResult} */\n\tconst stylelintResult = {\n\t\truleSeverities: {},\n\t\tcustomMessages: {},\n\t\truleMetadata: {},\n\t\tdisabledRanges: {},\n\t};\n\n\tconst postcssResult =\n\t\texistingPostcssResult ||\n\t\t(await stylelint._getPostcssResult({\n\t\t\tcode: options.code,\n\t\t\tcodeFilename: options.codeFilename,\n\t\t\tfilePath: inputFilePath,\n\t\t\tcodeProcessors: config.codeProcessors,\n\t\t\tcustomSyntax: config.customSyntax,\n\t\t}));\n\n\tconst stylelintPostcssResult = Object.assign(postcssResult, {\n\t\tstylelint: stylelintResult,\n\t});\n\n\tawait lintPostcssResult(stylelint._options, stylelintPostcssResult, config);\n\n\treturn stylelintPostcssResult;\n};\n\n/**\n * @returns {StylelintPostcssResult}\n */\nfunction createEmptyStylelintPostcssResult() {\n\treturn {\n\t\truleSeverities: {},\n\t\tcustomMessages: {},\n\t\truleMetadata: {},\n\t\tdisabledRanges: {},\n\t\tignored: true,\n\t\tstylelintError: false,\n\t};\n}\n\n/**\n * @param {string} [filePath]\n * @returns {PostcssResult}\n */\nfunction createEmptyPostcssResult(filePath) {\n\treturn {\n\t\troot: {\n\t\t\tsource: {\n\t\t\t\tinput: { file: filePath },\n\t\t\t},\n\t\t},\n\t\tmessages: [],\n\t\topts: undefined,\n\t\tstylelint: createEmptyStylelintPostcssResult(),\n\t\twarn: () => {},\n\t};\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}