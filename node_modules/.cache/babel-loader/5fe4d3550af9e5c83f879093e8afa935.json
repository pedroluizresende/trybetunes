{"ast":null,"code":"'use strict';\n/**\n * Report a problem.\n *\n * This function accounts for `disabledRanges` attached to the result.\n * That is, if the reported problem is within a disabledRange,\n * it is ignored. Otherwise, it is attached to the result as a\n * postcss warning.\n *\n * It also accounts for the rule's severity.\n *\n * You *must* pass *either* a node or a line number.\n *\n * @type {typeof import('stylelint').utils.report}\n */\n\nmodule.exports = function report(problem) {\n  const {\n    ruleName,\n    result,\n    message,\n    line,\n    node,\n    index,\n    endIndex,\n    word\n  } = problem;\n  result.stylelint = result.stylelint || {\n    ruleSeverities: {},\n    customMessages: {},\n    ruleMetadata: {}\n  }; // In quiet mode, mere warnings are ignored\n\n  if (result.stylelint.quiet && result.stylelint.ruleSeverities[ruleName] !== 'error') {\n    return;\n  }\n\n  const {\n    start\n  } = node && node.rangeBy({\n    index,\n    endIndex\n  }) || {}; // If a line is not passed, use the node.rangeBy method to get the\n  // line number that the complaint pertains to\n\n  const startLine = line || start && start.line;\n\n  if (!startLine) {\n    throw new Error('You must pass either a node or a line number');\n  }\n\n  const {\n    ignoreDisables\n  } = result.stylelint.config || {};\n\n  if (result.stylelint.disabledRanges) {\n    const ranges = result.stylelint.disabledRanges[ruleName] || result.stylelint.disabledRanges.all || [];\n\n    for (const range of ranges) {\n      if ( // If the problem is within a disabledRange,\n      // and that disabledRange's rules include this one,\n      // do not register a warning\n      range.start <= startLine && (range.end === undefined || range.end >= startLine) && (!range.rules || range.rules.includes(ruleName))) {\n        // Collect disabled warnings\n        // Used to report `needlessDisables` in subsequent processing.\n        const disabledWarnings = result.stylelint.disabledWarnings || (result.stylelint.disabledWarnings = []);\n        disabledWarnings.push({\n          rule: ruleName,\n          line: startLine\n        });\n\n        if (!ignoreDisables) {\n          return;\n        }\n\n        break;\n      }\n    }\n  }\n\n  const severity = result.stylelint.ruleSeverities && result.stylelint.ruleSeverities[ruleName];\n\n  if (!result.stylelint.stylelintError && severity === 'error') {\n    result.stylelint.stylelintError = true;\n  }\n  /** @type {import('stylelint').WarningOptions} */\n\n\n  const warningProperties = {\n    severity,\n    rule: ruleName\n  };\n\n  if (node) {\n    warningProperties.node = node;\n  }\n\n  if (problem.start) {\n    warningProperties.start = problem.start;\n  } else if (index) {\n    warningProperties.index = index;\n  }\n\n  if (problem.end) {\n    warningProperties.end = problem.end;\n  } else if (endIndex) {\n    warningProperties.endIndex = endIndex;\n  }\n\n  if (word) {\n    warningProperties.word = word;\n  }\n\n  const warningMessage = result.stylelint.customMessages && result.stylelint.customMessages[ruleName] || message;\n  result.warn(warningMessage, warningProperties);\n};","map":{"version":3,"names":["module","exports","report","problem","ruleName","result","message","line","node","index","endIndex","word","stylelint","ruleSeverities","customMessages","ruleMetadata","quiet","start","rangeBy","startLine","Error","ignoreDisables","config","disabledRanges","ranges","all","range","end","undefined","rules","includes","disabledWarnings","push","rule","severity","stylelintError","warningProperties","warningMessage","warn"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/stylelint/lib/utils/report.js"],"sourcesContent":["'use strict';\n\n/**\n * Report a problem.\n *\n * This function accounts for `disabledRanges` attached to the result.\n * That is, if the reported problem is within a disabledRange,\n * it is ignored. Otherwise, it is attached to the result as a\n * postcss warning.\n *\n * It also accounts for the rule's severity.\n *\n * You *must* pass *either* a node or a line number.\n *\n * @type {typeof import('stylelint').utils.report}\n */\nmodule.exports = function report(problem) {\n\tconst { ruleName, result, message, line, node, index, endIndex, word } = problem;\n\n\tresult.stylelint = result.stylelint || {\n\t\truleSeverities: {},\n\t\tcustomMessages: {},\n\t\truleMetadata: {},\n\t};\n\n\t// In quiet mode, mere warnings are ignored\n\tif (result.stylelint.quiet && result.stylelint.ruleSeverities[ruleName] !== 'error') {\n\t\treturn;\n\t}\n\n\tconst { start } = (node && node.rangeBy({ index, endIndex })) || {};\n\n\t// If a line is not passed, use the node.rangeBy method to get the\n\t// line number that the complaint pertains to\n\tconst startLine = line || (start && start.line);\n\n\tif (!startLine) {\n\t\tthrow new Error('You must pass either a node or a line number');\n\t}\n\n\tconst { ignoreDisables } = result.stylelint.config || {};\n\n\tif (result.stylelint.disabledRanges) {\n\t\tconst ranges =\n\t\t\tresult.stylelint.disabledRanges[ruleName] || result.stylelint.disabledRanges.all || [];\n\n\t\tfor (const range of ranges) {\n\t\t\tif (\n\t\t\t\t// If the problem is within a disabledRange,\n\t\t\t\t// and that disabledRange's rules include this one,\n\t\t\t\t// do not register a warning\n\t\t\t\trange.start <= startLine &&\n\t\t\t\t(range.end === undefined || range.end >= startLine) &&\n\t\t\t\t(!range.rules || range.rules.includes(ruleName))\n\t\t\t) {\n\t\t\t\t// Collect disabled warnings\n\t\t\t\t// Used to report `needlessDisables` in subsequent processing.\n\t\t\t\tconst disabledWarnings =\n\t\t\t\t\tresult.stylelint.disabledWarnings || (result.stylelint.disabledWarnings = []);\n\n\t\t\t\tdisabledWarnings.push({\n\t\t\t\t\trule: ruleName,\n\t\t\t\t\tline: startLine,\n\t\t\t\t});\n\n\t\t\t\tif (!ignoreDisables) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tconst severity = result.stylelint.ruleSeverities && result.stylelint.ruleSeverities[ruleName];\n\n\tif (!result.stylelint.stylelintError && severity === 'error') {\n\t\tresult.stylelint.stylelintError = true;\n\t}\n\n\t/** @type {import('stylelint').WarningOptions} */\n\tconst warningProperties = {\n\t\tseverity,\n\t\trule: ruleName,\n\t};\n\n\tif (node) {\n\t\twarningProperties.node = node;\n\t}\n\n\tif (problem.start) {\n\t\twarningProperties.start = problem.start;\n\t} else if (index) {\n\t\twarningProperties.index = index;\n\t}\n\n\tif (problem.end) {\n\t\twarningProperties.end = problem.end;\n\t} else if (endIndex) {\n\t\twarningProperties.endIndex = endIndex;\n\t}\n\n\tif (word) {\n\t\twarningProperties.word = word;\n\t}\n\n\tconst warningMessage =\n\t\t(result.stylelint.customMessages && result.stylelint.customMessages[ruleName]) || message;\n\n\tresult.warn(warningMessage, warningProperties);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}