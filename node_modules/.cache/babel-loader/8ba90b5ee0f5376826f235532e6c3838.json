{"ast":null,"code":"'use strict';\n\nconst augmentConfig = require('./augmentConfig');\n\nconst createStylelintResult = require('./createStylelintResult');\n\nconst getConfigForFile = require('./getConfigForFile');\n\nconst getPostcssResult = require('./getPostcssResult');\n\nconst isPathIgnored = require('./isPathIgnored');\n\nconst lintSource = require('./lintSource');\n\nconst {\n  cosmiconfig\n} = require('cosmiconfig');\n\nconst IS_TEST = process.env.NODE_ENV === 'test';\nconst STOP_DIR = IS_TEST ? process.cwd() : undefined;\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n\n/**\n * The stylelint \"internal API\" is passed among functions\n * so that methods on a stylelint instance can invoke\n * each other while sharing options and caches.\n *\n * @param {import('stylelint').LinterOptions} options\n * @returns {StylelintInternalApi}\n */\n\nfunction createStylelint() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const cwd = options.cwd || process.cwd();\n  /** @type {StylelintInternalApi} */\n  // @ts-expect-error -- TS2740: Type '{ _options: LinterOptions; }' is missing the following properties from type 'InternalApi'\n\n  const stylelint = {\n    _options: { ...options,\n      cwd\n    }\n  };\n  stylelint._extendExplorer = cosmiconfig('', {\n    transform: augmentConfig.augmentConfigExtended(cwd),\n    stopDir: STOP_DIR\n  });\n  stylelint._specifiedConfigCache = new Map();\n  stylelint._postcssResultCache = new Map();\n  stylelint._createStylelintResult = createStylelintResult.bind(null, stylelint);\n  stylelint._getPostcssResult = getPostcssResult.bind(null, stylelint);\n  stylelint._lintSource = lintSource.bind(null, stylelint);\n  stylelint.getConfigForFile = getConfigForFile.bind(null, stylelint);\n  stylelint.isPathIgnored = isPathIgnored.bind(null, stylelint);\n  return stylelint;\n}\n\nmodule.exports =\n/** @type {typeof import('stylelint').createLinter} */\ncreateStylelint;","map":{"version":3,"names":["augmentConfig","require","createStylelintResult","getConfigForFile","getPostcssResult","isPathIgnored","lintSource","cosmiconfig","IS_TEST","process","env","NODE_ENV","STOP_DIR","cwd","undefined","createStylelint","options","stylelint","_options","_extendExplorer","transform","augmentConfigExtended","stopDir","_specifiedConfigCache","Map","_postcssResultCache","_createStylelintResult","bind","_getPostcssResult","_lintSource","module","exports"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/stylelint/lib/createStylelint.js"],"sourcesContent":["'use strict';\n\nconst augmentConfig = require('./augmentConfig');\nconst createStylelintResult = require('./createStylelintResult');\nconst getConfigForFile = require('./getConfigForFile');\nconst getPostcssResult = require('./getPostcssResult');\nconst isPathIgnored = require('./isPathIgnored');\nconst lintSource = require('./lintSource');\nconst { cosmiconfig } = require('cosmiconfig');\n\nconst IS_TEST = process.env.NODE_ENV === 'test';\nconst STOP_DIR = IS_TEST ? process.cwd() : undefined;\n\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n\n/**\n * The stylelint \"internal API\" is passed among functions\n * so that methods on a stylelint instance can invoke\n * each other while sharing options and caches.\n *\n * @param {import('stylelint').LinterOptions} options\n * @returns {StylelintInternalApi}\n */\nfunction createStylelint(options = {}) {\n\tconst cwd = options.cwd || process.cwd();\n\n\t/** @type {StylelintInternalApi} */\n\t// @ts-expect-error -- TS2740: Type '{ _options: LinterOptions; }' is missing the following properties from type 'InternalApi'\n\tconst stylelint = { _options: { ...options, cwd } };\n\n\tstylelint._extendExplorer = cosmiconfig('', {\n\t\ttransform: augmentConfig.augmentConfigExtended(cwd),\n\t\tstopDir: STOP_DIR,\n\t});\n\n\tstylelint._specifiedConfigCache = new Map();\n\tstylelint._postcssResultCache = new Map();\n\tstylelint._createStylelintResult = createStylelintResult.bind(null, stylelint);\n\tstylelint._getPostcssResult = getPostcssResult.bind(null, stylelint);\n\tstylelint._lintSource = lintSource.bind(null, stylelint);\n\n\tstylelint.getConfigForFile = getConfigForFile.bind(null, stylelint);\n\tstylelint.isPathIgnored = isPathIgnored.bind(null, stylelint);\n\n\treturn stylelint;\n}\n\nmodule.exports = /** @type {typeof import('stylelint').createLinter} */ (createStylelint);\n"],"mappings":"AAAA;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA7B;;AACA,MAAMC,qBAAqB,GAAGD,OAAO,CAAC,yBAAD,CAArC;;AACA,MAAME,gBAAgB,GAAGF,OAAO,CAAC,oBAAD,CAAhC;;AACA,MAAMG,gBAAgB,GAAGH,OAAO,CAAC,oBAAD,CAAhC;;AACA,MAAMI,aAAa,GAAGJ,OAAO,CAAC,iBAAD,CAA7B;;AACA,MAAMK,UAAU,GAAGL,OAAO,CAAC,cAAD,CAA1B;;AACA,MAAM;EAAEM;AAAF,IAAkBN,OAAO,CAAC,aAAD,CAA/B;;AAEA,MAAMO,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAAzC;AACA,MAAMC,QAAQ,GAAGJ,OAAO,GAAGC,OAAO,CAACI,GAAR,EAAH,GAAmBC,SAA3C;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,eAAT,GAAuC;EAAA,IAAdC,OAAc,uEAAJ,EAAI;EACtC,MAAMH,GAAG,GAAGG,OAAO,CAACH,GAAR,IAAeJ,OAAO,CAACI,GAAR,EAA3B;EAEA;EACA;;EACA,MAAMI,SAAS,GAAG;IAAEC,QAAQ,EAAE,EAAE,GAAGF,OAAL;MAAcH;IAAd;EAAZ,CAAlB;EAEAI,SAAS,CAACE,eAAV,GAA4BZ,WAAW,CAAC,EAAD,EAAK;IAC3Ca,SAAS,EAAEpB,aAAa,CAACqB,qBAAd,CAAoCR,GAApC,CADgC;IAE3CS,OAAO,EAAEV;EAFkC,CAAL,CAAvC;EAKAK,SAAS,CAACM,qBAAV,GAAkC,IAAIC,GAAJ,EAAlC;EACAP,SAAS,CAACQ,mBAAV,GAAgC,IAAID,GAAJ,EAAhC;EACAP,SAAS,CAACS,sBAAV,GAAmCxB,qBAAqB,CAACyB,IAAtB,CAA2B,IAA3B,EAAiCV,SAAjC,CAAnC;EACAA,SAAS,CAACW,iBAAV,GAA8BxB,gBAAgB,CAACuB,IAAjB,CAAsB,IAAtB,EAA4BV,SAA5B,CAA9B;EACAA,SAAS,CAACY,WAAV,GAAwBvB,UAAU,CAACqB,IAAX,CAAgB,IAAhB,EAAsBV,SAAtB,CAAxB;EAEAA,SAAS,CAACd,gBAAV,GAA6BA,gBAAgB,CAACwB,IAAjB,CAAsB,IAAtB,EAA4BV,SAA5B,CAA7B;EACAA,SAAS,CAACZ,aAAV,GAA0BA,aAAa,CAACsB,IAAd,CAAmB,IAAnB,EAAyBV,SAAzB,CAA1B;EAEA,OAAOA,SAAP;AACA;;AAEDa,MAAM,CAACC,OAAP;AAAiB;AAAwDhB,eAAzE"},"metadata":{},"sourceType":"script"}