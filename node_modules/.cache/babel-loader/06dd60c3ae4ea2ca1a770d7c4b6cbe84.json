{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loaders = void 0;\n/* eslint-disable @typescript-eslint/no-require-imports */\n\nlet importFresh;\n\nconst loadJs = function loadJs(filepath) {\n  if (importFresh === undefined) {\n    importFresh = require('import-fresh');\n  }\n\n  const result = importFresh(filepath);\n  return result;\n};\n\nlet parseJson;\n\nconst loadJson = function loadJson(filepath, content) {\n  if (parseJson === undefined) {\n    parseJson = require('parse-json');\n  }\n\n  try {\n    const result = parseJson(content);\n    return result;\n  } catch (error) {\n    error.message = `JSON Error in ${filepath}:\\n${error.message}`;\n    throw error;\n  }\n};\n\nlet yaml;\n\nconst loadYaml = function loadYaml(filepath, content) {\n  if (yaml === undefined) {\n    yaml = require('yaml');\n  }\n\n  try {\n    const result = yaml.parse(content, {\n      prettyErrors: true\n    });\n    return result;\n  } catch (error) {\n    error.message = `YAML Error in ${filepath}:\\n${error.message}`;\n    throw error;\n  }\n};\n\nconst loaders = {\n  loadJs,\n  loadJson,\n  loadYaml\n};\nexports.loaders = loaders;","map":{"version":3,"mappings":";;;;;;AAAA;;AAQA,IAAIA,WAAJ;;AACA,MAAMC,MAAkB,GAAG,SAASA,MAAT,CAAgBC,QAAhB,EAA0B;EACnD,IAAIF,WAAW,KAAKG,SAApB,EAA+B;IAC7BH,WAAW,GAAGI,OAAO,CAAC,cAAD,CAArBJ;EACD;;EAED,MAAMK,MAAM,GAAGL,WAAW,CAACE,QAAD,CAA1B;EACA,OAAOG,MAAP;AANF;;AASA,IAAIC,SAAJ;;AACA,MAAMC,QAAoB,GAAG,SAASA,QAAT,CAAkBL,QAAlB,EAA4BM,OAA5B,EAAqC;EAChE,IAAIF,SAAS,KAAKH,SAAlB,EAA6B;IAC3BG,SAAS,GAAGF,OAAO,CAAC,YAAD,CAAnBE;EACD;;EAED,IAAI;IACF,MAAMD,MAAM,GAAGC,SAAS,CAACE,OAAD,CAAxB;IACA,OAAOH,MAAP;EAFF,EAGE,OAAOI,KAAP,EAAc;IACdA,KAAK,CAACC,OAAND,GAAiB,iBAAgBP,QAAS,MAAKO,KAAK,CAACC,OAAQ,EAA7DD;IACA,MAAMA,KAAN;EACD;AAXH;;AAcA,IAAIE,IAAJ;;AACA,MAAMC,QAAoB,GAAG,SAASA,QAAT,CAAkBV,QAAlB,EAA4BM,OAA5B,EAAqC;EAChE,IAAIG,IAAI,KAAKR,SAAb,EAAwB;IACtBQ,IAAI,GAAGP,OAAO,CAAC,MAAD,CAAdO;EACD;;EAED,IAAI;IACF,MAAMN,MAAM,GAAGM,IAAI,CAACE,KAALF,CAAWH,OAAXG,EAAoB;MAAEG,YAAY,EAAE;IAAhB,CAApBH,CAAf;IACA,OAAON,MAAP;EAFF,EAGE,OAAOI,KAAP,EAAc;IACdA,KAAK,CAACC,OAAND,GAAiB,iBAAgBP,QAAS,MAAKO,KAAK,CAACC,OAAQ,EAA7DD;IACA,MAAMA,KAAN;EACD;AAXH;;AAcA,MAAMM,OAAoB,GAAG;EAAEd,MAAF;EAAUM,QAAV;EAAoBK;AAApB,CAA7B","names":["importFresh","loadJs","filepath","undefined","require","result","parseJson","loadJson","content","error","message","yaml","loadYaml","parse","prettyErrors","loaders"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/cosmiconfig/src/loaders.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-require-imports */\n\nimport parseJsonType from 'parse-json';\nimport yamlType from 'yaml';\nimport importFreshType from 'import-fresh';\nimport { LoaderSync } from './index';\nimport { LoadersSync } from './types';\n\nlet importFresh: typeof importFreshType;\nconst loadJs: LoaderSync = function loadJs(filepath) {\n  if (importFresh === undefined) {\n    importFresh = require('import-fresh');\n  }\n\n  const result = importFresh(filepath);\n  return result;\n};\n\nlet parseJson: typeof parseJsonType;\nconst loadJson: LoaderSync = function loadJson(filepath, content) {\n  if (parseJson === undefined) {\n    parseJson = require('parse-json');\n  }\n\n  try {\n    const result = parseJson(content);\n    return result;\n  } catch (error) {\n    error.message = `JSON Error in ${filepath}:\\n${error.message}`;\n    throw error;\n  }\n};\n\nlet yaml: typeof yamlType;\nconst loadYaml: LoaderSync = function loadYaml(filepath, content) {\n  if (yaml === undefined) {\n    yaml = require('yaml');\n  }\n\n  try {\n    const result = yaml.parse(content, { prettyErrors: true });\n    return result;\n  } catch (error) {\n    error.message = `YAML Error in ${filepath}:\\n${error.message}`;\n    throw error;\n  }\n};\n\nconst loaders: LoadersSync = { loadJs, loadJson, loadYaml };\n\nexport { loaders };\n"]},"metadata":{},"sourceType":"script"}