{"ast":null,"code":"'use strict';\n\nconst normalizeRuleSettings = require('../normalizeRuleSettings');\n\nconst Result = require('postcss/lib/result');\n\nconst rules = require('../rules');\n/**\n * Useful for third-party code (e.g. plugins) to run a PostCSS Root\n * against a specific rule and do something with the warnings\n * @template T\n * @template {Object} O\n * @param {{\n\t\truleName: string,\n\t\truleSettings: import('stylelint').ConfigRuleSettings<T, O>,\n\t\troot: import('postcss').Root,\n\t}} options\n * @param {(warning: import('postcss').Warning) => void} callback\n * @returns {void}\n */\n\n\nfunction checkAgainstRule(options, callback) {\n  if (!options) throw new Error(\"checkAgainstRule requires an options object with 'ruleName', 'ruleSettings', and 'root' properties\");\n  if (!callback) throw new Error('checkAgainstRule requires a callback');\n  if (!options.ruleName) throw new Error(\"checkAgainstRule requires a 'ruleName' option\");\n  const rule = rules[options.ruleName];\n  if (!rule) throw new Error(`Rule '${options.ruleName}' does not exist`);\n  if (!options.ruleSettings) throw new Error(\"checkAgainstRule requires a 'ruleSettings' option\");\n  if (!options.root) throw new Error(\"checkAgainstRule requires a 'root' option\");\n  const settings = normalizeRuleSettings(options.ruleSettings, options.ruleName);\n\n  if (!settings) {\n    return;\n  } // @ts-expect-error - this error should not occur with PostCSS 8\n\n\n  const tmpPostcssResult = new Result();\n  rule(settings[0],\n  /** @type {O} */\n  settings[1], {})(options.root, tmpPostcssResult);\n\n  for (const warning of tmpPostcssResult.warnings()) callback(warning);\n}\n\nmodule.exports =\n/** @type {typeof import('stylelint').utils.checkAgainstRule} */\ncheckAgainstRule;","map":{"version":3,"names":["normalizeRuleSettings","require","Result","rules","checkAgainstRule","options","callback","Error","ruleName","rule","ruleSettings","root","settings","tmpPostcssResult","warning","warnings","module","exports"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/stylelint/lib/utils/checkAgainstRule.js"],"sourcesContent":["'use strict';\n\nconst normalizeRuleSettings = require('../normalizeRuleSettings');\nconst Result = require('postcss/lib/result');\nconst rules = require('../rules');\n\n/**\n * Useful for third-party code (e.g. plugins) to run a PostCSS Root\n * against a specific rule and do something with the warnings\n * @template T\n * @template {Object} O\n * @param {{\n\t\truleName: string,\n\t\truleSettings: import('stylelint').ConfigRuleSettings<T, O>,\n\t\troot: import('postcss').Root,\n\t}} options\n * @param {(warning: import('postcss').Warning) => void} callback\n * @returns {void}\n */\nfunction checkAgainstRule(options, callback) {\n\tif (!options)\n\t\tthrow new Error(\n\t\t\t\"checkAgainstRule requires an options object with 'ruleName', 'ruleSettings', and 'root' properties\",\n\t\t);\n\n\tif (!callback) throw new Error('checkAgainstRule requires a callback');\n\n\tif (!options.ruleName) throw new Error(\"checkAgainstRule requires a 'ruleName' option\");\n\n\tconst rule = rules[options.ruleName];\n\n\tif (!rule) throw new Error(`Rule '${options.ruleName}' does not exist`);\n\n\tif (!options.ruleSettings) throw new Error(\"checkAgainstRule requires a 'ruleSettings' option\");\n\n\tif (!options.root) throw new Error(\"checkAgainstRule requires a 'root' option\");\n\n\tconst settings = normalizeRuleSettings(options.ruleSettings, options.ruleName);\n\n\tif (!settings) {\n\t\treturn;\n\t}\n\n\t// @ts-expect-error - this error should not occur with PostCSS 8\n\tconst tmpPostcssResult = new Result();\n\n\trule(settings[0], /** @type {O} */ (settings[1]), {})(options.root, tmpPostcssResult);\n\n\tfor (const warning of tmpPostcssResult.warnings()) callback(warning);\n}\n\nmodule.exports = /** @type {typeof import('stylelint').utils.checkAgainstRule} */ (\n\tcheckAgainstRule\n);\n"],"mappings":"AAAA;;AAEA,MAAMA,qBAAqB,GAAGC,OAAO,CAAC,0BAAD,CAArC;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,UAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,gBAAT,CAA0BC,OAA1B,EAAmCC,QAAnC,EAA6C;EAC5C,IAAI,CAACD,OAAL,EACC,MAAM,IAAIE,KAAJ,CACL,oGADK,CAAN;EAID,IAAI,CAACD,QAAL,EAAe,MAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;EAEf,IAAI,CAACF,OAAO,CAACG,QAAb,EAAuB,MAAM,IAAID,KAAJ,CAAU,+CAAV,CAAN;EAEvB,MAAME,IAAI,GAAGN,KAAK,CAACE,OAAO,CAACG,QAAT,CAAlB;EAEA,IAAI,CAACC,IAAL,EAAW,MAAM,IAAIF,KAAJ,CAAW,SAAQF,OAAO,CAACG,QAAS,kBAApC,CAAN;EAEX,IAAI,CAACH,OAAO,CAACK,YAAb,EAA2B,MAAM,IAAIH,KAAJ,CAAU,mDAAV,CAAN;EAE3B,IAAI,CAACF,OAAO,CAACM,IAAb,EAAmB,MAAM,IAAIJ,KAAJ,CAAU,2CAAV,CAAN;EAEnB,MAAMK,QAAQ,GAAGZ,qBAAqB,CAACK,OAAO,CAACK,YAAT,EAAuBL,OAAO,CAACG,QAA/B,CAAtC;;EAEA,IAAI,CAACI,QAAL,EAAe;IACd;EACA,CAtB2C,CAwB5C;;;EACA,MAAMC,gBAAgB,GAAG,IAAIX,MAAJ,EAAzB;EAEAO,IAAI,CAACG,QAAQ,CAAC,CAAD,CAAT;EAAc;EAAkBA,QAAQ,CAAC,CAAD,CAAxC,EAA8C,EAA9C,CAAJ,CAAsDP,OAAO,CAACM,IAA9D,EAAoEE,gBAApE;;EAEA,KAAK,MAAMC,OAAX,IAAsBD,gBAAgB,CAACE,QAAjB,EAAtB,EAAmDT,QAAQ,CAACQ,OAAD,CAAR;AACnD;;AAEDE,MAAM,CAACC,OAAP;AAAiB;AAChBb,gBADD"},"metadata":{},"sourceType":"script"}