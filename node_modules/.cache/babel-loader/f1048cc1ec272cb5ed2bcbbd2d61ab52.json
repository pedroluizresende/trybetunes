{"ast":null,"code":"'use strict';\n\nconst filterFilePaths = require('./utils/filterFilePaths');\n\nconst getFileIgnorer = require('./utils/getFileIgnorer');\n\nconst micromatch = require('micromatch');\n\nconst normalizePath = require('normalize-path');\n\nconst path = require('path');\n/**\n * To find out if a path is ignored, we need to load the config,\n * which may have an ignoreFiles property. We then check the path\n * against these.\n * @param {import('stylelint').InternalApi} stylelint\n * @param {string} [filePath]\n * @return {Promise<boolean>}\n */\n\n\nmodule.exports = async function isPathIgnored(stylelint, filePath) {\n  if (!filePath) {\n    return false;\n  }\n\n  const cwd = stylelint._options.cwd;\n  const ignorer = getFileIgnorer(stylelint._options);\n  const result = await stylelint.getConfigForFile(filePath, filePath);\n\n  if (!result) {\n    return true;\n  } // Glob patterns for micromatch should be in POSIX-style\n\n\n  const ignoreFiles =\n  /** @type {Array<string>} */\n  (result.config.ignoreFiles || []).map(s => normalizePath(s));\n  const absoluteFilePath = path.isAbsolute(filePath) ? filePath : path.resolve(cwd, filePath);\n\n  if (micromatch([absoluteFilePath], ignoreFiles).length) {\n    return true;\n  } // Check filePath with .stylelintignore file\n\n\n  if (filterFilePaths(ignorer, [path.relative(cwd, absoluteFilePath)]).length === 0) {\n    return true;\n  }\n\n  return false;\n};","map":{"version":3,"names":["filterFilePaths","require","getFileIgnorer","micromatch","normalizePath","path","module","exports","isPathIgnored","stylelint","filePath","cwd","_options","ignorer","result","getConfigForFile","ignoreFiles","config","map","s","absoluteFilePath","isAbsolute","resolve","length","relative"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/stylelint/lib/isPathIgnored.js"],"sourcesContent":["'use strict';\n\nconst filterFilePaths = require('./utils/filterFilePaths');\nconst getFileIgnorer = require('./utils/getFileIgnorer');\nconst micromatch = require('micromatch');\nconst normalizePath = require('normalize-path');\nconst path = require('path');\n\n/**\n * To find out if a path is ignored, we need to load the config,\n * which may have an ignoreFiles property. We then check the path\n * against these.\n * @param {import('stylelint').InternalApi} stylelint\n * @param {string} [filePath]\n * @return {Promise<boolean>}\n */\nmodule.exports = async function isPathIgnored(stylelint, filePath) {\n\tif (!filePath) {\n\t\treturn false;\n\t}\n\n\tconst cwd = stylelint._options.cwd;\n\tconst ignorer = getFileIgnorer(stylelint._options);\n\n\tconst result = await stylelint.getConfigForFile(filePath, filePath);\n\n\tif (!result) {\n\t\treturn true;\n\t}\n\n\t// Glob patterns for micromatch should be in POSIX-style\n\tconst ignoreFiles = /** @type {Array<string>} */ (result.config.ignoreFiles || []).map((s) =>\n\t\tnormalizePath(s),\n\t);\n\n\tconst absoluteFilePath = path.isAbsolute(filePath) ? filePath : path.resolve(cwd, filePath);\n\n\tif (micromatch([absoluteFilePath], ignoreFiles).length) {\n\t\treturn true;\n\t}\n\n\t// Check filePath with .stylelintignore file\n\tif (filterFilePaths(ignorer, [path.relative(cwd, absoluteFilePath)]).length === 0) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n"],"mappings":"AAAA;;AAEA,MAAMA,eAAe,GAAGC,OAAO,CAAC,yBAAD,CAA/B;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,wBAAD,CAA9B;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMG,aAAa,GAAGH,OAAO,CAAC,gBAAD,CAA7B;;AACA,MAAMI,IAAI,GAAGJ,OAAO,CAAC,MAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAK,MAAM,CAACC,OAAP,GAAiB,eAAeC,aAAf,CAA6BC,SAA7B,EAAwCC,QAAxC,EAAkD;EAClE,IAAI,CAACA,QAAL,EAAe;IACd,OAAO,KAAP;EACA;;EAED,MAAMC,GAAG,GAAGF,SAAS,CAACG,QAAV,CAAmBD,GAA/B;EACA,MAAME,OAAO,GAAGX,cAAc,CAACO,SAAS,CAACG,QAAX,CAA9B;EAEA,MAAME,MAAM,GAAG,MAAML,SAAS,CAACM,gBAAV,CAA2BL,QAA3B,EAAqCA,QAArC,CAArB;;EAEA,IAAI,CAACI,MAAL,EAAa;IACZ,OAAO,IAAP;EACA,CAZiE,CAclE;;;EACA,MAAME,WAAW;EAAG;EAA6B,CAACF,MAAM,CAACG,MAAP,CAAcD,WAAd,IAA6B,EAA9B,EAAkCE,GAAlC,CAAuCC,CAAD,IACtFf,aAAa,CAACe,CAAD,CADmC,CAAjD;EAIA,MAAMC,gBAAgB,GAAGf,IAAI,CAACgB,UAAL,CAAgBX,QAAhB,IAA4BA,QAA5B,GAAuCL,IAAI,CAACiB,OAAL,CAAaX,GAAb,EAAkBD,QAAlB,CAAhE;;EAEA,IAAIP,UAAU,CAAC,CAACiB,gBAAD,CAAD,EAAqBJ,WAArB,CAAV,CAA4CO,MAAhD,EAAwD;IACvD,OAAO,IAAP;EACA,CAvBiE,CAyBlE;;;EACA,IAAIvB,eAAe,CAACa,OAAD,EAAU,CAACR,IAAI,CAACmB,QAAL,CAAcb,GAAd,EAAmBS,gBAAnB,CAAD,CAAV,CAAf,CAAiEG,MAAjE,KAA4E,CAAhF,EAAmF;IAClF,OAAO,IAAP;EACA;;EAED,OAAO,KAAP;AACA,CA/BD"},"metadata":{},"sourceType":"script"}