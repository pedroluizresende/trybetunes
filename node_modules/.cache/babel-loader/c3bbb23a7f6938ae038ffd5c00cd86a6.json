{"ast":null,"code":"'use strict';\n/**\n * Given an object of problem messages, return another\n * that provides the same messages postfixed with the rule\n * that has been violated.\n *\n * @template {import('stylelint').RuleMessages} T\n * @template {{[K in keyof T]: T[K]}} R\n * @param {string} ruleName\n * @param {T} messages - Object whose keys are message identifiers\n *   and values are either message strings or functions that return message strings\n * @returns {R} New message object, whose messages will be marked with the rule name\n */\n\nfunction ruleMessages(ruleName, messages) {\n  /** @typedef {keyof T} K */\n  const newMessages =\n  /** @type {R} */\n  {};\n\n  for (const [messageId, messageText] of\n  /** @type {[K, T[K]][]} */\n  Object.entries(messages)) {\n    if (typeof messageText === 'string') {\n      newMessages[messageId] =\n      /** @type {R[K]} */\n      `${messageText} (${ruleName})`;\n    } else {\n      newMessages[messageId] =\n      /** @type {R[K]} */\n      function () {\n        return `${messageText(...arguments)} (${ruleName})`;\n      };\n    }\n  }\n\n  return newMessages;\n}\n\nmodule.exports =\n/** @type {typeof import('stylelint').utils.ruleMessages} */\nruleMessages;","map":{"version":3,"names":["ruleMessages","ruleName","messages","newMessages","messageId","messageText","Object","entries","module","exports"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/stylelint/lib/utils/ruleMessages.js"],"sourcesContent":["'use strict';\n\n/**\n * Given an object of problem messages, return another\n * that provides the same messages postfixed with the rule\n * that has been violated.\n *\n * @template {import('stylelint').RuleMessages} T\n * @template {{[K in keyof T]: T[K]}} R\n * @param {string} ruleName\n * @param {T} messages - Object whose keys are message identifiers\n *   and values are either message strings or functions that return message strings\n * @returns {R} New message object, whose messages will be marked with the rule name\n */\nfunction ruleMessages(ruleName, messages) {\n\t/** @typedef {keyof T} K */\n\tconst newMessages = /** @type {R} */ ({});\n\n\tfor (const [messageId, messageText] of /** @type {[K, T[K]][]} */ (Object.entries(messages))) {\n\t\tif (typeof messageText === 'string') {\n\t\t\tnewMessages[messageId] = /** @type {R[K]} */ (`${messageText} (${ruleName})`);\n\t\t} else {\n\t\t\tnewMessages[messageId] = /** @type {R[K]} */ (\n\t\t\t\t(...args) => `${messageText(...args)} (${ruleName})`\n\t\t\t);\n\t\t}\n\t}\n\n\treturn newMessages;\n}\n\nmodule.exports = /** @type {typeof import('stylelint').utils.ruleMessages} */ (ruleMessages);\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,YAAT,CAAsBC,QAAtB,EAAgCC,QAAhC,EAA0C;EACzC;EACA,MAAMC,WAAW;EAAG;EAAkB,EAAtC;;EAEA,KAAK,MAAM,CAACC,SAAD,EAAYC,WAAZ,CAAX;EAAuC;EAA4BC,MAAM,CAACC,OAAP,CAAeL,QAAf,CAAnE,EAA8F;IAC7F,IAAI,OAAOG,WAAP,KAAuB,QAA3B,EAAqC;MACpCF,WAAW,CAACC,SAAD,CAAX;MAAyB;MAAsB,GAAEC,WAAY,KAAIJ,QAAS,GAA1E;IACA,CAFD,MAEO;MACNE,WAAW,CAACC,SAAD,CAAX;MAAyB;MACxB;QAAA,OAAc,GAAEC,WAAW,CAAC,YAAD,CAAU,KAAIJ,QAAS,GAAlD;MAAA,CADD;IAGA;EACD;;EAED,OAAOE,WAAP;AACA;;AAEDK,MAAM,CAACC,OAAP;AAAiB;AAA8DT,YAA/E"},"metadata":{},"sourceType":"script"}