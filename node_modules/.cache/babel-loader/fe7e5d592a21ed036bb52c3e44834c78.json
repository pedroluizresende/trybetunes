{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils = require(\"../../utils\");\n\nclass EntryFilter {\n  constructor(_settings, _micromatchOptions) {\n    this._settings = _settings;\n    this._micromatchOptions = _micromatchOptions;\n    this.index = new Map();\n  }\n\n  getFilter(positive, negative) {\n    const positiveRe = utils.pattern.convertPatternsToRe(positive, this._micromatchOptions);\n    const negativeRe = utils.pattern.convertPatternsToRe(negative, this._micromatchOptions);\n    return entry => this._filter(entry, positiveRe, negativeRe);\n  }\n\n  _filter(entry, positiveRe, negativeRe) {\n    if (this._settings.unique && this._isDuplicateEntry(entry)) {\n      return false;\n    }\n\n    if (this._onlyFileFilter(entry) || this._onlyDirectoryFilter(entry)) {\n      return false;\n    }\n\n    if (this._isSkippedByAbsoluteNegativePatterns(entry.path, negativeRe)) {\n      return false;\n    }\n\n    const filepath = this._settings.baseNameMatch ? entry.name : entry.path;\n    const isMatched = this._isMatchToPatterns(filepath, positiveRe) && !this._isMatchToPatterns(entry.path, negativeRe);\n\n    if (this._settings.unique && isMatched) {\n      this._createIndexRecord(entry);\n    }\n\n    return isMatched;\n  }\n\n  _isDuplicateEntry(entry) {\n    return this.index.has(entry.path);\n  }\n\n  _createIndexRecord(entry) {\n    this.index.set(entry.path, undefined);\n  }\n\n  _onlyFileFilter(entry) {\n    return this._settings.onlyFiles && !entry.dirent.isFile();\n  }\n\n  _onlyDirectoryFilter(entry) {\n    return this._settings.onlyDirectories && !entry.dirent.isDirectory();\n  }\n\n  _isSkippedByAbsoluteNegativePatterns(entryPath, patternsRe) {\n    if (!this._settings.absolute) {\n      return false;\n    }\n\n    const fullpath = utils.path.makeAbsolute(this._settings.cwd, entryPath);\n    return utils.pattern.matchAny(fullpath, patternsRe);\n  }\n  /**\n   * First, just trying to apply patterns to the path.\n   * Second, trying to apply patterns to the path with final slash.\n   */\n\n\n  _isMatchToPatterns(entryPath, patternsRe) {\n    const filepath = utils.path.removeLeadingDotSegment(entryPath);\n    return utils.pattern.matchAny(filepath, patternsRe) || utils.pattern.matchAny(filepath + '/', patternsRe);\n  }\n\n}\n\nexports.default = EntryFilter;","map":{"version":3,"names":["Object","defineProperty","exports","value","utils","require","EntryFilter","constructor","_settings","_micromatchOptions","index","Map","getFilter","positive","negative","positiveRe","pattern","convertPatternsToRe","negativeRe","entry","_filter","unique","_isDuplicateEntry","_onlyFileFilter","_onlyDirectoryFilter","_isSkippedByAbsoluteNegativePatterns","path","filepath","baseNameMatch","name","isMatched","_isMatchToPatterns","_createIndexRecord","has","set","undefined","onlyFiles","dirent","isFile","onlyDirectories","isDirectory","entryPath","patternsRe","absolute","fullpath","makeAbsolute","cwd","matchAny","removeLeadingDotSegment","default"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/fast-glob/out/providers/filters/entry.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils = require(\"../../utils\");\nclass EntryFilter {\n    constructor(_settings, _micromatchOptions) {\n        this._settings = _settings;\n        this._micromatchOptions = _micromatchOptions;\n        this.index = new Map();\n    }\n    getFilter(positive, negative) {\n        const positiveRe = utils.pattern.convertPatternsToRe(positive, this._micromatchOptions);\n        const negativeRe = utils.pattern.convertPatternsToRe(negative, this._micromatchOptions);\n        return (entry) => this._filter(entry, positiveRe, negativeRe);\n    }\n    _filter(entry, positiveRe, negativeRe) {\n        if (this._settings.unique && this._isDuplicateEntry(entry)) {\n            return false;\n        }\n        if (this._onlyFileFilter(entry) || this._onlyDirectoryFilter(entry)) {\n            return false;\n        }\n        if (this._isSkippedByAbsoluteNegativePatterns(entry.path, negativeRe)) {\n            return false;\n        }\n        const filepath = this._settings.baseNameMatch ? entry.name : entry.path;\n        const isMatched = this._isMatchToPatterns(filepath, positiveRe) && !this._isMatchToPatterns(entry.path, negativeRe);\n        if (this._settings.unique && isMatched) {\n            this._createIndexRecord(entry);\n        }\n        return isMatched;\n    }\n    _isDuplicateEntry(entry) {\n        return this.index.has(entry.path);\n    }\n    _createIndexRecord(entry) {\n        this.index.set(entry.path, undefined);\n    }\n    _onlyFileFilter(entry) {\n        return this._settings.onlyFiles && !entry.dirent.isFile();\n    }\n    _onlyDirectoryFilter(entry) {\n        return this._settings.onlyDirectories && !entry.dirent.isDirectory();\n    }\n    _isSkippedByAbsoluteNegativePatterns(entryPath, patternsRe) {\n        if (!this._settings.absolute) {\n            return false;\n        }\n        const fullpath = utils.path.makeAbsolute(this._settings.cwd, entryPath);\n        return utils.pattern.matchAny(fullpath, patternsRe);\n    }\n    /**\n     * First, just trying to apply patterns to the path.\n     * Second, trying to apply patterns to the path with final slash.\n     */\n    _isMatchToPatterns(entryPath, patternsRe) {\n        const filepath = utils.path.removeLeadingDotSegment(entryPath);\n        return utils.pattern.matchAny(filepath, patternsRe) || utils.pattern.matchAny(filepath + '/', patternsRe);\n    }\n}\nexports.default = EntryFilter;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AACA,MAAMC,WAAN,CAAkB;EACdC,WAAW,CAACC,SAAD,EAAYC,kBAAZ,EAAgC;IACvC,KAAKD,SAAL,GAAiBA,SAAjB;IACA,KAAKC,kBAAL,GAA0BA,kBAA1B;IACA,KAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;EACH;;EACDC,SAAS,CAACC,QAAD,EAAWC,QAAX,EAAqB;IAC1B,MAAMC,UAAU,GAAGX,KAAK,CAACY,OAAN,CAAcC,mBAAd,CAAkCJ,QAAlC,EAA4C,KAAKJ,kBAAjD,CAAnB;IACA,MAAMS,UAAU,GAAGd,KAAK,CAACY,OAAN,CAAcC,mBAAd,CAAkCH,QAAlC,EAA4C,KAAKL,kBAAjD,CAAnB;IACA,OAAQU,KAAD,IAAW,KAAKC,OAAL,CAAaD,KAAb,EAAoBJ,UAApB,EAAgCG,UAAhC,CAAlB;EACH;;EACDE,OAAO,CAACD,KAAD,EAAQJ,UAAR,EAAoBG,UAApB,EAAgC;IACnC,IAAI,KAAKV,SAAL,CAAea,MAAf,IAAyB,KAAKC,iBAAL,CAAuBH,KAAvB,CAA7B,EAA4D;MACxD,OAAO,KAAP;IACH;;IACD,IAAI,KAAKI,eAAL,CAAqBJ,KAArB,KAA+B,KAAKK,oBAAL,CAA0BL,KAA1B,CAAnC,EAAqE;MACjE,OAAO,KAAP;IACH;;IACD,IAAI,KAAKM,oCAAL,CAA0CN,KAAK,CAACO,IAAhD,EAAsDR,UAAtD,CAAJ,EAAuE;MACnE,OAAO,KAAP;IACH;;IACD,MAAMS,QAAQ,GAAG,KAAKnB,SAAL,CAAeoB,aAAf,GAA+BT,KAAK,CAACU,IAArC,GAA4CV,KAAK,CAACO,IAAnE;IACA,MAAMI,SAAS,GAAG,KAAKC,kBAAL,CAAwBJ,QAAxB,EAAkCZ,UAAlC,KAAiD,CAAC,KAAKgB,kBAAL,CAAwBZ,KAAK,CAACO,IAA9B,EAAoCR,UAApC,CAApE;;IACA,IAAI,KAAKV,SAAL,CAAea,MAAf,IAAyBS,SAA7B,EAAwC;MACpC,KAAKE,kBAAL,CAAwBb,KAAxB;IACH;;IACD,OAAOW,SAAP;EACH;;EACDR,iBAAiB,CAACH,KAAD,EAAQ;IACrB,OAAO,KAAKT,KAAL,CAAWuB,GAAX,CAAed,KAAK,CAACO,IAArB,CAAP;EACH;;EACDM,kBAAkB,CAACb,KAAD,EAAQ;IACtB,KAAKT,KAAL,CAAWwB,GAAX,CAAef,KAAK,CAACO,IAArB,EAA2BS,SAA3B;EACH;;EACDZ,eAAe,CAACJ,KAAD,EAAQ;IACnB,OAAO,KAAKX,SAAL,CAAe4B,SAAf,IAA4B,CAACjB,KAAK,CAACkB,MAAN,CAAaC,MAAb,EAApC;EACH;;EACDd,oBAAoB,CAACL,KAAD,EAAQ;IACxB,OAAO,KAAKX,SAAL,CAAe+B,eAAf,IAAkC,CAACpB,KAAK,CAACkB,MAAN,CAAaG,WAAb,EAA1C;EACH;;EACDf,oCAAoC,CAACgB,SAAD,EAAYC,UAAZ,EAAwB;IACxD,IAAI,CAAC,KAAKlC,SAAL,CAAemC,QAApB,EAA8B;MAC1B,OAAO,KAAP;IACH;;IACD,MAAMC,QAAQ,GAAGxC,KAAK,CAACsB,IAAN,CAAWmB,YAAX,CAAwB,KAAKrC,SAAL,CAAesC,GAAvC,EAA4CL,SAA5C,CAAjB;IACA,OAAOrC,KAAK,CAACY,OAAN,CAAc+B,QAAd,CAAuBH,QAAvB,EAAiCF,UAAjC,CAAP;EACH;EACD;AACJ;AACA;AACA;;;EACIX,kBAAkB,CAACU,SAAD,EAAYC,UAAZ,EAAwB;IACtC,MAAMf,QAAQ,GAAGvB,KAAK,CAACsB,IAAN,CAAWsB,uBAAX,CAAmCP,SAAnC,CAAjB;IACA,OAAOrC,KAAK,CAACY,OAAN,CAAc+B,QAAd,CAAuBpB,QAAvB,EAAiCe,UAAjC,KAAgDtC,KAAK,CAACY,OAAN,CAAc+B,QAAd,CAAuBpB,QAAQ,GAAG,GAAlC,EAAuCe,UAAvC,CAAvD;EACH;;AAtDa;;AAwDlBxC,OAAO,CAAC+C,OAAR,GAAkB3C,WAAlB"},"metadata":{},"sourceType":"script"}