{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _buffer = require(\"./buffer\");\n\nvar n = require(\"./node\");\n\nvar generatorFunctions = require(\"./generators\");\n\nconst SCIENTIFIC_NOTATION = /e/i;\nconst ZERO_DECIMAL_INTEGER = /\\.0+$/;\nconst NON_DECIMAL_LITERAL = /^0[box]/;\nconst PURE_ANNOTATION_RE = /^\\s*[@#]__PURE__\\s*$/;\nconst {\n  needsParens,\n  needsWhitespaceAfter,\n  needsWhitespaceBefore\n} = n;\n\nclass Printer {\n  constructor(format, map) {\n    this.inForStatementInitCounter = 0;\n    this._printStack = [];\n    this._indent = 0;\n    this._indentChar = 0;\n    this._indentRepeat = 0;\n    this._insideAux = false;\n    this._parenPushNewlineState = null;\n    this._noLineTerminator = false;\n    this._printAuxAfterOnNextUserNode = false;\n    this._printedComments = new Set();\n    this._endsWithInteger = false;\n    this._endsWithWord = false;\n    this.format = format;\n    this._buf = new _buffer.default(map);\n    this._indentChar = format.indent.style.charCodeAt(0);\n    this._indentRepeat = format.indent.style.length;\n  }\n\n  generate(ast) {\n    this.print(ast);\n\n    this._maybeAddAuxComment();\n\n    return this._buf.get();\n  }\n\n  indent() {\n    if (this.format.compact || this.format.concise) return;\n    this._indent++;\n  }\n\n  dedent() {\n    if (this.format.compact || this.format.concise) return;\n    this._indent--;\n  }\n\n  semicolon() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    this._maybeAddAuxComment();\n\n    if (force) {\n      this._appendChar(59);\n    } else {\n      this._queue(59);\n    }\n  }\n\n  rightBrace() {\n    if (this.format.minified) {\n      this._buf.removeLastSemicolon();\n    }\n\n    this.tokenChar(125);\n  }\n\n  space() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (this.format.compact) return;\n\n    if (force) {\n      this._space();\n    } else if (this._buf.hasContent()) {\n      const lastCp = this.getLastChar();\n\n      if (lastCp !== 32 && lastCp !== 10) {\n        this._space();\n      }\n    }\n  }\n\n  word(str) {\n    if (this._endsWithWord || str.charCodeAt(0) === 47 && this.endsWith(47)) {\n      this._space();\n    }\n\n    this._maybeAddAuxComment();\n\n    this._append(str, false);\n\n    this._endsWithWord = true;\n  }\n\n  number(str) {\n    this.word(str);\n    this._endsWithInteger = Number.isInteger(+str) && !NON_DECIMAL_LITERAL.test(str) && !SCIENTIFIC_NOTATION.test(str) && !ZERO_DECIMAL_INTEGER.test(str) && str.charCodeAt(str.length - 1) !== 46;\n  }\n\n  token(str) {\n    let maybeNewline = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const lastChar = this.getLastChar();\n    const strFirst = str.charCodeAt(0);\n\n    if (lastChar === 33 && str === \"--\" || strFirst === 43 && lastChar === 43 || strFirst === 45 && lastChar === 45 || strFirst === 46 && this._endsWithInteger) {\n      this._space();\n    }\n\n    this._maybeAddAuxComment();\n\n    this._append(str, maybeNewline);\n  }\n\n  tokenChar(char) {\n    const lastChar = this.getLastChar();\n\n    if (char === 43 && lastChar === 43 || char === 45 && lastChar === 45 || char === 46 && this._endsWithInteger) {\n      this._space();\n    }\n\n    this._maybeAddAuxComment();\n\n    this._appendChar(char);\n  }\n\n  newline() {\n    let i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    if (this.format.retainLines || this.format.compact) return;\n\n    if (this.format.concise) {\n      this.space();\n      return;\n    }\n\n    const charBeforeNewline = this.endsWithCharAndNewline();\n    if (charBeforeNewline === 10) return;\n\n    if (charBeforeNewline === 123 || charBeforeNewline === 58) {\n      i--;\n    }\n\n    if (i <= 0) return;\n\n    for (let j = 0; j < i; j++) {\n      this._newline();\n    }\n  }\n\n  endsWith(char) {\n    return this.getLastChar() === char;\n  }\n\n  getLastChar() {\n    return this._buf.getLastChar();\n  }\n\n  endsWithCharAndNewline() {\n    return this._buf.endsWithCharAndNewline();\n  }\n\n  removeTrailingNewline() {\n    this._buf.removeTrailingNewline();\n  }\n\n  exactSource(loc, cb) {\n    this._catchUp(\"start\", loc);\n\n    this._buf.exactSource(loc, cb);\n  }\n\n  source(prop, loc) {\n    this._catchUp(prop, loc);\n\n    this._buf.source(prop, loc);\n  }\n\n  withSource(prop, loc, cb) {\n    this._catchUp(prop, loc);\n\n    this._buf.withSource(prop, loc, cb);\n  }\n\n  _space() {\n    this._queue(32);\n  }\n\n  _newline() {\n    this._queue(10);\n  }\n\n  _append(str, maybeNewline) {\n    this._maybeAddParen(str);\n\n    this._maybeIndent(str.charCodeAt(0));\n\n    this._buf.append(str, maybeNewline);\n\n    this._endsWithWord = false;\n    this._endsWithInteger = false;\n  }\n\n  _appendChar(char) {\n    this._maybeAddParenChar(char);\n\n    this._maybeIndent(char);\n\n    this._buf.appendChar(char);\n\n    this._endsWithWord = false;\n    this._endsWithInteger = false;\n  }\n\n  _queue(char) {\n    this._maybeAddParenChar(char);\n\n    this._maybeIndent(char);\n\n    this._buf.queue(char);\n\n    this._endsWithWord = false;\n    this._endsWithInteger = false;\n  }\n\n  _maybeIndent(firstChar) {\n    if (this._indent && firstChar !== 10 && this.endsWith(10)) {\n      this._buf.queueIndentation(this._indentChar, this._getIndent());\n    }\n  }\n\n  _maybeAddParenChar(char) {\n    const parenPushNewlineState = this._parenPushNewlineState;\n    if (!parenPushNewlineState) return;\n\n    if (char === 32) {\n      return;\n    }\n\n    if (char !== 10) {\n      this._parenPushNewlineState = null;\n      return;\n    }\n\n    this.tokenChar(40);\n    this.indent();\n    parenPushNewlineState.printed = true;\n  }\n\n  _maybeAddParen(str) {\n    const parenPushNewlineState = this._parenPushNewlineState;\n    if (!parenPushNewlineState) return;\n    const len = str.length;\n    let i;\n\n    for (i = 0; i < len && str.charCodeAt(i) === 32; i++) continue;\n\n    if (i === len) {\n      return;\n    }\n\n    const cha = str.charCodeAt(i);\n\n    if (cha !== 10) {\n      if (cha !== 47 || i + 1 === len) {\n        this._parenPushNewlineState = null;\n        return;\n      }\n\n      const chaPost = str.charCodeAt(i + 1);\n\n      if (chaPost === 42) {\n        if (PURE_ANNOTATION_RE.test(str.slice(i + 2, len - 2))) {\n          return;\n        }\n      } else if (chaPost !== 47) {\n        this._parenPushNewlineState = null;\n        return;\n      }\n    }\n\n    this.tokenChar(40);\n    this.indent();\n    parenPushNewlineState.printed = true;\n  }\n\n  _catchUp(prop, loc) {\n    if (!this.format.retainLines) return;\n    const pos = loc ? loc[prop] : null;\n\n    if ((pos == null ? void 0 : pos.line) != null) {\n      const count = pos.line - this._buf.getCurrentLine();\n\n      for (let i = 0; i < count; i++) {\n        this._newline();\n      }\n    }\n  }\n\n  _getIndent() {\n    return this._indentRepeat * this._indent;\n  }\n\n  printTerminatorless(node, parent, isLabel) {\n    if (isLabel) {\n      this._noLineTerminator = true;\n      this.print(node, parent);\n      this._noLineTerminator = false;\n    } else {\n      const terminatorState = {\n        printed: false\n      };\n      this._parenPushNewlineState = terminatorState;\n      this.print(node, parent);\n\n      if (terminatorState.printed) {\n        this.dedent();\n        this.newline();\n        this.tokenChar(41);\n      }\n    }\n  }\n\n  print(node, parent, noLineTerminator) {\n    if (!node) return;\n    const nodeType = node.type;\n    const format = this.format;\n    const oldConcise = format.concise;\n\n    if (node._compact) {\n      format.concise = true;\n    }\n\n    const printMethod = this[nodeType];\n\n    if (printMethod === undefined) {\n      throw new ReferenceError(`unknown node of type ${JSON.stringify(nodeType)} with constructor ${JSON.stringify(node.constructor.name)}`);\n    }\n\n    this._printStack.push(node);\n\n    const oldInAux = this._insideAux;\n    this._insideAux = node.loc == undefined;\n\n    this._maybeAddAuxComment(this._insideAux && !oldInAux);\n\n    let shouldPrintParens;\n\n    if (format.retainFunctionParens && nodeType === \"FunctionExpression\" && node.extra && node.extra.parenthesized) {\n      shouldPrintParens = true;\n    } else {\n      shouldPrintParens = needsParens(node, parent, this._printStack);\n    }\n\n    if (shouldPrintParens) this.tokenChar(40);\n\n    this._printLeadingComments(node);\n\n    const loc = nodeType === \"Program\" || nodeType === \"File\" ? null : node.loc;\n    this.withSource(\"start\", loc, printMethod.bind(this, node, parent));\n\n    if (noLineTerminator && !this._noLineTerminator) {\n      this._noLineTerminator = true;\n\n      this._printTrailingComments(node);\n\n      this._noLineTerminator = false;\n    } else {\n      this._printTrailingComments(node);\n    }\n\n    if (shouldPrintParens) this.tokenChar(41);\n\n    this._printStack.pop();\n\n    format.concise = oldConcise;\n    this._insideAux = oldInAux;\n  }\n\n  _maybeAddAuxComment(enteredPositionlessNode) {\n    if (enteredPositionlessNode) this._printAuxBeforeComment();\n    if (!this._insideAux) this._printAuxAfterComment();\n  }\n\n  _printAuxBeforeComment() {\n    if (this._printAuxAfterOnNextUserNode) return;\n    this._printAuxAfterOnNextUserNode = true;\n    const comment = this.format.auxiliaryCommentBefore;\n\n    if (comment) {\n      this._printComment({\n        type: \"CommentBlock\",\n        value: comment\n      });\n    }\n  }\n\n  _printAuxAfterComment() {\n    if (!this._printAuxAfterOnNextUserNode) return;\n    this._printAuxAfterOnNextUserNode = false;\n    const comment = this.format.auxiliaryCommentAfter;\n\n    if (comment) {\n      this._printComment({\n        type: \"CommentBlock\",\n        value: comment\n      });\n    }\n  }\n\n  getPossibleRaw(node) {\n    const extra = node.extra;\n\n    if (extra && extra.raw != null && extra.rawValue != null && node.value === extra.rawValue) {\n      return extra.raw;\n    }\n  }\n\n  printJoin(nodes, parent) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (!(nodes != null && nodes.length)) return;\n    if (opts.indent) this.indent();\n    const newlineOpts = {\n      addNewlines: opts.addNewlines\n    };\n    const len = nodes.length;\n\n    for (let i = 0; i < len; i++) {\n      const node = nodes[i];\n      if (!node) continue;\n      if (opts.statement) this._printNewline(true, node, parent, newlineOpts);\n      this.print(node, parent);\n\n      if (opts.iterator) {\n        opts.iterator(node, i);\n      }\n\n      if (opts.separator && i < len - 1) {\n        opts.separator.call(this);\n      }\n\n      if (opts.statement) this._printNewline(false, node, parent, newlineOpts);\n    }\n\n    if (opts.indent) this.dedent();\n  }\n\n  printAndIndentOnComments(node, parent) {\n    const indent = node.leadingComments && node.leadingComments.length > 0;\n    if (indent) this.indent();\n    this.print(node, parent);\n    if (indent) this.dedent();\n  }\n\n  printBlock(parent) {\n    const node = parent.body;\n\n    if (node.type !== \"EmptyStatement\") {\n      this.space();\n    }\n\n    this.print(node, parent);\n  }\n\n  _printTrailingComments(node) {\n    this._printComments(this._getComments(false, node));\n  }\n\n  _printLeadingComments(node) {\n    this._printComments(this._getComments(true, node), true);\n  }\n\n  printInnerComments(node) {\n    let indent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    var _node$innerComments;\n\n    if (!((_node$innerComments = node.innerComments) != null && _node$innerComments.length)) return;\n    if (indent) this.indent();\n\n    this._printComments(node.innerComments);\n\n    if (indent) this.dedent();\n  }\n\n  printSequence(nodes, parent) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    opts.statement = true;\n    return this.printJoin(nodes, parent, opts);\n  }\n\n  printList(items, parent) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (opts.separator == null) {\n      opts.separator = commaSeparator;\n    }\n\n    return this.printJoin(items, parent, opts);\n  }\n\n  _printNewline(leading, node, parent, opts) {\n    if (this.format.retainLines || this.format.compact) return;\n\n    if (this.format.concise) {\n      this.space();\n      return;\n    }\n\n    let lines = 0;\n\n    if (this._buf.hasContent()) {\n      if (!leading) lines++;\n      if (opts.addNewlines) lines += opts.addNewlines(leading, node) || 0;\n      const needs = leading ? needsWhitespaceBefore : needsWhitespaceAfter;\n      if (needs(node, parent)) lines++;\n    }\n\n    this.newline(Math.min(2, lines));\n  }\n\n  _getComments(leading, node) {\n    return node && (leading ? node.leadingComments : node.trailingComments) || null;\n  }\n\n  _printComment(comment, skipNewLines) {\n    if (comment.ignore) return;\n    if (this._printedComments.has(comment)) return;\n    if (!this.format.shouldPrintComment(comment.value)) return;\n\n    this._printedComments.add(comment);\n\n    const isBlockComment = comment.type === \"CommentBlock\";\n    const printNewLines = isBlockComment && !skipNewLines && !this._noLineTerminator;\n    if (printNewLines && this._buf.hasContent()) this.newline(1);\n    const lastCharCode = this.getLastChar();\n\n    if (lastCharCode !== 91 && lastCharCode !== 123) {\n      this.space();\n    }\n\n    let val;\n    let maybeNewline = false;\n\n    if (isBlockComment) {\n      val = `/*${comment.value}*/`;\n\n      if (this.format.indent.adjustMultilineComment) {\n        var _comment$loc;\n\n        const offset = (_comment$loc = comment.loc) == null ? void 0 : _comment$loc.start.column;\n\n        if (offset) {\n          const newlineRegex = new RegExp(\"\\\\n\\\\s{1,\" + offset + \"}\", \"g\");\n          val = val.replace(newlineRegex, \"\\n\");\n        }\n\n        const indentSize = Math.max(this._getIndent(), this.format.retainLines ? 0 : this._buf.getCurrentColumn());\n        val = val.replace(/\\n(?!$)/g, `\\n${\" \".repeat(indentSize)}`);\n        maybeNewline = true;\n      }\n    } else if (!this._noLineTerminator) {\n      val = `//${comment.value}\\n`;\n      maybeNewline = true;\n    } else {\n      val = `/*${comment.value}*/`;\n    }\n\n    if (this.endsWith(47)) this._space();\n    this.withSource(\"start\", comment.loc, this._append.bind(this, val, maybeNewline));\n    if (printNewLines) this.newline(1);\n  }\n\n  _printComments(comments, inlinePureAnnotation) {\n    if (!(comments != null && comments.length)) return;\n\n    if (inlinePureAnnotation && comments.length === 1 && PURE_ANNOTATION_RE.test(comments[0].value)) {\n      this._printComment(comments[0], this._buf.hasContent() && !this.endsWith(10));\n    } else {\n      for (const comment of comments) {\n        this._printComment(comment);\n      }\n    }\n  }\n\n  printAssertions(node) {\n    var _node$assertions;\n\n    if ((_node$assertions = node.assertions) != null && _node$assertions.length) {\n      this.space();\n      this.word(\"assert\");\n      this.space();\n      this.tokenChar(123);\n      this.space();\n      this.printList(node.assertions, node);\n      this.space();\n      this.tokenChar(125);\n    }\n  }\n\n}\n\nObject.assign(Printer.prototype, generatorFunctions);\n{\n  Printer.prototype.Noop = function Noop() {};\n}\nvar _default = Printer;\nexports.default = _default;\n\nfunction commaSeparator() {\n  this.tokenChar(44);\n  this.space();\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_buffer","require","n","generatorFunctions","SCIENTIFIC_NOTATION","ZERO_DECIMAL_INTEGER","NON_DECIMAL_LITERAL","PURE_ANNOTATION_RE","needsParens","needsWhitespaceAfter","needsWhitespaceBefore","Printer","constructor","format","map","inForStatementInitCounter","_printStack","_indent","_indentChar","_indentRepeat","_insideAux","_parenPushNewlineState","_noLineTerminator","_printAuxAfterOnNextUserNode","_printedComments","Set","_endsWithInteger","_endsWithWord","_buf","indent","style","charCodeAt","length","generate","ast","print","_maybeAddAuxComment","get","compact","concise","dedent","semicolon","force","_appendChar","_queue","rightBrace","minified","removeLastSemicolon","tokenChar","space","_space","hasContent","lastCp","getLastChar","word","str","endsWith","_append","number","Number","isInteger","test","token","maybeNewline","lastChar","strFirst","char","newline","i","retainLines","charBeforeNewline","endsWithCharAndNewline","j","_newline","removeTrailingNewline","exactSource","loc","cb","_catchUp","source","prop","withSource","_maybeAddParen","_maybeIndent","append","_maybeAddParenChar","appendChar","queue","firstChar","queueIndentation","_getIndent","parenPushNewlineState","printed","len","cha","chaPost","slice","pos","line","count","getCurrentLine","printTerminatorless","node","parent","isLabel","terminatorState","noLineTerminator","nodeType","type","oldConcise","_compact","printMethod","undefined","ReferenceError","JSON","stringify","name","push","oldInAux","shouldPrintParens","retainFunctionParens","extra","parenthesized","_printLeadingComments","bind","_printTrailingComments","pop","enteredPositionlessNode","_printAuxBeforeComment","_printAuxAfterComment","comment","auxiliaryCommentBefore","_printComment","auxiliaryCommentAfter","getPossibleRaw","raw","rawValue","printJoin","nodes","opts","newlineOpts","addNewlines","statement","_printNewline","iterator","separator","call","printAndIndentOnComments","leadingComments","printBlock","body","_printComments","_getComments","printInnerComments","_node$innerComments","innerComments","printSequence","printList","items","commaSeparator","leading","lines","needs","Math","min","trailingComments","skipNewLines","ignore","has","shouldPrintComment","add","isBlockComment","printNewLines","lastCharCode","val","adjustMultilineComment","_comment$loc","offset","start","column","newlineRegex","RegExp","replace","indentSize","max","getCurrentColumn","repeat","comments","inlinePureAnnotation","printAssertions","_node$assertions","assertions","assign","prototype","Noop","_default"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/generator/lib/printer.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _buffer = require(\"./buffer\");\n\nvar n = require(\"./node\");\n\nvar generatorFunctions = require(\"./generators\");\n\nconst SCIENTIFIC_NOTATION = /e/i;\nconst ZERO_DECIMAL_INTEGER = /\\.0+$/;\nconst NON_DECIMAL_LITERAL = /^0[box]/;\nconst PURE_ANNOTATION_RE = /^\\s*[@#]__PURE__\\s*$/;\nconst {\n  needsParens,\n  needsWhitespaceAfter,\n  needsWhitespaceBefore\n} = n;\n\nclass Printer {\n  constructor(format, map) {\n    this.inForStatementInitCounter = 0;\n    this._printStack = [];\n    this._indent = 0;\n    this._indentChar = 0;\n    this._indentRepeat = 0;\n    this._insideAux = false;\n    this._parenPushNewlineState = null;\n    this._noLineTerminator = false;\n    this._printAuxAfterOnNextUserNode = false;\n    this._printedComments = new Set();\n    this._endsWithInteger = false;\n    this._endsWithWord = false;\n    this.format = format;\n    this._buf = new _buffer.default(map);\n    this._indentChar = format.indent.style.charCodeAt(0);\n    this._indentRepeat = format.indent.style.length;\n  }\n\n  generate(ast) {\n    this.print(ast);\n\n    this._maybeAddAuxComment();\n\n    return this._buf.get();\n  }\n\n  indent() {\n    if (this.format.compact || this.format.concise) return;\n    this._indent++;\n  }\n\n  dedent() {\n    if (this.format.compact || this.format.concise) return;\n    this._indent--;\n  }\n\n  semicolon(force = false) {\n    this._maybeAddAuxComment();\n\n    if (force) {\n      this._appendChar(59);\n    } else {\n      this._queue(59);\n    }\n  }\n\n  rightBrace() {\n    if (this.format.minified) {\n      this._buf.removeLastSemicolon();\n    }\n\n    this.tokenChar(125);\n  }\n\n  space(force = false) {\n    if (this.format.compact) return;\n\n    if (force) {\n      this._space();\n    } else if (this._buf.hasContent()) {\n      const lastCp = this.getLastChar();\n\n      if (lastCp !== 32 && lastCp !== 10) {\n        this._space();\n      }\n    }\n  }\n\n  word(str) {\n    if (this._endsWithWord || str.charCodeAt(0) === 47 && this.endsWith(47)) {\n      this._space();\n    }\n\n    this._maybeAddAuxComment();\n\n    this._append(str, false);\n\n    this._endsWithWord = true;\n  }\n\n  number(str) {\n    this.word(str);\n    this._endsWithInteger = Number.isInteger(+str) && !NON_DECIMAL_LITERAL.test(str) && !SCIENTIFIC_NOTATION.test(str) && !ZERO_DECIMAL_INTEGER.test(str) && str.charCodeAt(str.length - 1) !== 46;\n  }\n\n  token(str, maybeNewline = false) {\n    const lastChar = this.getLastChar();\n    const strFirst = str.charCodeAt(0);\n\n    if (lastChar === 33 && str === \"--\" || strFirst === 43 && lastChar === 43 || strFirst === 45 && lastChar === 45 || strFirst === 46 && this._endsWithInteger) {\n      this._space();\n    }\n\n    this._maybeAddAuxComment();\n\n    this._append(str, maybeNewline);\n  }\n\n  tokenChar(char) {\n    const lastChar = this.getLastChar();\n\n    if (char === 43 && lastChar === 43 || char === 45 && lastChar === 45 || char === 46 && this._endsWithInteger) {\n      this._space();\n    }\n\n    this._maybeAddAuxComment();\n\n    this._appendChar(char);\n  }\n\n  newline(i = 1) {\n    if (this.format.retainLines || this.format.compact) return;\n\n    if (this.format.concise) {\n      this.space();\n      return;\n    }\n\n    const charBeforeNewline = this.endsWithCharAndNewline();\n    if (charBeforeNewline === 10) return;\n\n    if (charBeforeNewline === 123 || charBeforeNewline === 58) {\n      i--;\n    }\n\n    if (i <= 0) return;\n\n    for (let j = 0; j < i; j++) {\n      this._newline();\n    }\n  }\n\n  endsWith(char) {\n    return this.getLastChar() === char;\n  }\n\n  getLastChar() {\n    return this._buf.getLastChar();\n  }\n\n  endsWithCharAndNewline() {\n    return this._buf.endsWithCharAndNewline();\n  }\n\n  removeTrailingNewline() {\n    this._buf.removeTrailingNewline();\n  }\n\n  exactSource(loc, cb) {\n    this._catchUp(\"start\", loc);\n\n    this._buf.exactSource(loc, cb);\n  }\n\n  source(prop, loc) {\n    this._catchUp(prop, loc);\n\n    this._buf.source(prop, loc);\n  }\n\n  withSource(prop, loc, cb) {\n    this._catchUp(prop, loc);\n\n    this._buf.withSource(prop, loc, cb);\n  }\n\n  _space() {\n    this._queue(32);\n  }\n\n  _newline() {\n    this._queue(10);\n  }\n\n  _append(str, maybeNewline) {\n    this._maybeAddParen(str);\n\n    this._maybeIndent(str.charCodeAt(0));\n\n    this._buf.append(str, maybeNewline);\n\n    this._endsWithWord = false;\n    this._endsWithInteger = false;\n  }\n\n  _appendChar(char) {\n    this._maybeAddParenChar(char);\n\n    this._maybeIndent(char);\n\n    this._buf.appendChar(char);\n\n    this._endsWithWord = false;\n    this._endsWithInteger = false;\n  }\n\n  _queue(char) {\n    this._maybeAddParenChar(char);\n\n    this._maybeIndent(char);\n\n    this._buf.queue(char);\n\n    this._endsWithWord = false;\n    this._endsWithInteger = false;\n  }\n\n  _maybeIndent(firstChar) {\n    if (this._indent && firstChar !== 10 && this.endsWith(10)) {\n      this._buf.queueIndentation(this._indentChar, this._getIndent());\n    }\n  }\n\n  _maybeAddParenChar(char) {\n    const parenPushNewlineState = this._parenPushNewlineState;\n    if (!parenPushNewlineState) return;\n\n    if (char === 32) {\n      return;\n    }\n\n    if (char !== 10) {\n      this._parenPushNewlineState = null;\n      return;\n    }\n\n    this.tokenChar(40);\n    this.indent();\n    parenPushNewlineState.printed = true;\n  }\n\n  _maybeAddParen(str) {\n    const parenPushNewlineState = this._parenPushNewlineState;\n    if (!parenPushNewlineState) return;\n    const len = str.length;\n    let i;\n\n    for (i = 0; i < len && str.charCodeAt(i) === 32; i++) continue;\n\n    if (i === len) {\n      return;\n    }\n\n    const cha = str.charCodeAt(i);\n\n    if (cha !== 10) {\n      if (cha !== 47 || i + 1 === len) {\n        this._parenPushNewlineState = null;\n        return;\n      }\n\n      const chaPost = str.charCodeAt(i + 1);\n\n      if (chaPost === 42) {\n        if (PURE_ANNOTATION_RE.test(str.slice(i + 2, len - 2))) {\n          return;\n        }\n      } else if (chaPost !== 47) {\n        this._parenPushNewlineState = null;\n        return;\n      }\n    }\n\n    this.tokenChar(40);\n    this.indent();\n    parenPushNewlineState.printed = true;\n  }\n\n  _catchUp(prop, loc) {\n    if (!this.format.retainLines) return;\n    const pos = loc ? loc[prop] : null;\n\n    if ((pos == null ? void 0 : pos.line) != null) {\n      const count = pos.line - this._buf.getCurrentLine();\n\n      for (let i = 0; i < count; i++) {\n        this._newline();\n      }\n    }\n  }\n\n  _getIndent() {\n    return this._indentRepeat * this._indent;\n  }\n\n  printTerminatorless(node, parent, isLabel) {\n    if (isLabel) {\n      this._noLineTerminator = true;\n      this.print(node, parent);\n      this._noLineTerminator = false;\n    } else {\n      const terminatorState = {\n        printed: false\n      };\n      this._parenPushNewlineState = terminatorState;\n      this.print(node, parent);\n\n      if (terminatorState.printed) {\n        this.dedent();\n        this.newline();\n        this.tokenChar(41);\n      }\n    }\n  }\n\n  print(node, parent, noLineTerminator) {\n    if (!node) return;\n    const nodeType = node.type;\n    const format = this.format;\n    const oldConcise = format.concise;\n\n    if (node._compact) {\n      format.concise = true;\n    }\n\n    const printMethod = this[nodeType];\n\n    if (printMethod === undefined) {\n      throw new ReferenceError(`unknown node of type ${JSON.stringify(nodeType)} with constructor ${JSON.stringify(node.constructor.name)}`);\n    }\n\n    this._printStack.push(node);\n\n    const oldInAux = this._insideAux;\n    this._insideAux = node.loc == undefined;\n\n    this._maybeAddAuxComment(this._insideAux && !oldInAux);\n\n    let shouldPrintParens;\n\n    if (format.retainFunctionParens && nodeType === \"FunctionExpression\" && node.extra && node.extra.parenthesized) {\n      shouldPrintParens = true;\n    } else {\n      shouldPrintParens = needsParens(node, parent, this._printStack);\n    }\n\n    if (shouldPrintParens) this.tokenChar(40);\n\n    this._printLeadingComments(node);\n\n    const loc = nodeType === \"Program\" || nodeType === \"File\" ? null : node.loc;\n    this.withSource(\"start\", loc, printMethod.bind(this, node, parent));\n\n    if (noLineTerminator && !this._noLineTerminator) {\n      this._noLineTerminator = true;\n\n      this._printTrailingComments(node);\n\n      this._noLineTerminator = false;\n    } else {\n      this._printTrailingComments(node);\n    }\n\n    if (shouldPrintParens) this.tokenChar(41);\n\n    this._printStack.pop();\n\n    format.concise = oldConcise;\n    this._insideAux = oldInAux;\n  }\n\n  _maybeAddAuxComment(enteredPositionlessNode) {\n    if (enteredPositionlessNode) this._printAuxBeforeComment();\n    if (!this._insideAux) this._printAuxAfterComment();\n  }\n\n  _printAuxBeforeComment() {\n    if (this._printAuxAfterOnNextUserNode) return;\n    this._printAuxAfterOnNextUserNode = true;\n    const comment = this.format.auxiliaryCommentBefore;\n\n    if (comment) {\n      this._printComment({\n        type: \"CommentBlock\",\n        value: comment\n      });\n    }\n  }\n\n  _printAuxAfterComment() {\n    if (!this._printAuxAfterOnNextUserNode) return;\n    this._printAuxAfterOnNextUserNode = false;\n    const comment = this.format.auxiliaryCommentAfter;\n\n    if (comment) {\n      this._printComment({\n        type: \"CommentBlock\",\n        value: comment\n      });\n    }\n  }\n\n  getPossibleRaw(node) {\n    const extra = node.extra;\n\n    if (extra && extra.raw != null && extra.rawValue != null && node.value === extra.rawValue) {\n      return extra.raw;\n    }\n  }\n\n  printJoin(nodes, parent, opts = {}) {\n    if (!(nodes != null && nodes.length)) return;\n    if (opts.indent) this.indent();\n    const newlineOpts = {\n      addNewlines: opts.addNewlines\n    };\n    const len = nodes.length;\n\n    for (let i = 0; i < len; i++) {\n      const node = nodes[i];\n      if (!node) continue;\n      if (opts.statement) this._printNewline(true, node, parent, newlineOpts);\n      this.print(node, parent);\n\n      if (opts.iterator) {\n        opts.iterator(node, i);\n      }\n\n      if (opts.separator && i < len - 1) {\n        opts.separator.call(this);\n      }\n\n      if (opts.statement) this._printNewline(false, node, parent, newlineOpts);\n    }\n\n    if (opts.indent) this.dedent();\n  }\n\n  printAndIndentOnComments(node, parent) {\n    const indent = node.leadingComments && node.leadingComments.length > 0;\n    if (indent) this.indent();\n    this.print(node, parent);\n    if (indent) this.dedent();\n  }\n\n  printBlock(parent) {\n    const node = parent.body;\n\n    if (node.type !== \"EmptyStatement\") {\n      this.space();\n    }\n\n    this.print(node, parent);\n  }\n\n  _printTrailingComments(node) {\n    this._printComments(this._getComments(false, node));\n  }\n\n  _printLeadingComments(node) {\n    this._printComments(this._getComments(true, node), true);\n  }\n\n  printInnerComments(node, indent = true) {\n    var _node$innerComments;\n\n    if (!((_node$innerComments = node.innerComments) != null && _node$innerComments.length)) return;\n    if (indent) this.indent();\n\n    this._printComments(node.innerComments);\n\n    if (indent) this.dedent();\n  }\n\n  printSequence(nodes, parent, opts = {}) {\n    opts.statement = true;\n    return this.printJoin(nodes, parent, opts);\n  }\n\n  printList(items, parent, opts = {}) {\n    if (opts.separator == null) {\n      opts.separator = commaSeparator;\n    }\n\n    return this.printJoin(items, parent, opts);\n  }\n\n  _printNewline(leading, node, parent, opts) {\n    if (this.format.retainLines || this.format.compact) return;\n\n    if (this.format.concise) {\n      this.space();\n      return;\n    }\n\n    let lines = 0;\n\n    if (this._buf.hasContent()) {\n      if (!leading) lines++;\n      if (opts.addNewlines) lines += opts.addNewlines(leading, node) || 0;\n      const needs = leading ? needsWhitespaceBefore : needsWhitespaceAfter;\n      if (needs(node, parent)) lines++;\n    }\n\n    this.newline(Math.min(2, lines));\n  }\n\n  _getComments(leading, node) {\n    return node && (leading ? node.leadingComments : node.trailingComments) || null;\n  }\n\n  _printComment(comment, skipNewLines) {\n    if (comment.ignore) return;\n    if (this._printedComments.has(comment)) return;\n    if (!this.format.shouldPrintComment(comment.value)) return;\n\n    this._printedComments.add(comment);\n\n    const isBlockComment = comment.type === \"CommentBlock\";\n    const printNewLines = isBlockComment && !skipNewLines && !this._noLineTerminator;\n    if (printNewLines && this._buf.hasContent()) this.newline(1);\n    const lastCharCode = this.getLastChar();\n\n    if (lastCharCode !== 91 && lastCharCode !== 123) {\n      this.space();\n    }\n\n    let val;\n    let maybeNewline = false;\n\n    if (isBlockComment) {\n      val = `/*${comment.value}*/`;\n\n      if (this.format.indent.adjustMultilineComment) {\n        var _comment$loc;\n\n        const offset = (_comment$loc = comment.loc) == null ? void 0 : _comment$loc.start.column;\n\n        if (offset) {\n          const newlineRegex = new RegExp(\"\\\\n\\\\s{1,\" + offset + \"}\", \"g\");\n          val = val.replace(newlineRegex, \"\\n\");\n        }\n\n        const indentSize = Math.max(this._getIndent(), this.format.retainLines ? 0 : this._buf.getCurrentColumn());\n        val = val.replace(/\\n(?!$)/g, `\\n${\" \".repeat(indentSize)}`);\n        maybeNewline = true;\n      }\n    } else if (!this._noLineTerminator) {\n      val = `//${comment.value}\\n`;\n      maybeNewline = true;\n    } else {\n      val = `/*${comment.value}*/`;\n    }\n\n    if (this.endsWith(47)) this._space();\n    this.withSource(\"start\", comment.loc, this._append.bind(this, val, maybeNewline));\n    if (printNewLines) this.newline(1);\n  }\n\n  _printComments(comments, inlinePureAnnotation) {\n    if (!(comments != null && comments.length)) return;\n\n    if (inlinePureAnnotation && comments.length === 1 && PURE_ANNOTATION_RE.test(comments[0].value)) {\n      this._printComment(comments[0], this._buf.hasContent() && !this.endsWith(10));\n    } else {\n      for (const comment of comments) {\n        this._printComment(comment);\n      }\n    }\n  }\n\n  printAssertions(node) {\n    var _node$assertions;\n\n    if ((_node$assertions = node.assertions) != null && _node$assertions.length) {\n      this.space();\n      this.word(\"assert\");\n      this.space();\n      this.tokenChar(123);\n      this.space();\n      this.printList(node.assertions, node);\n      this.space();\n      this.tokenChar(125);\n    }\n  }\n\n}\n\nObject.assign(Printer.prototype, generatorFunctions);\n{\n  Printer.prototype.Noop = function Noop() {};\n}\nvar _default = Printer;\nexports.default = _default;\n\nfunction commaSeparator() {\n  this.tokenChar(44);\n  this.space();\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}