{"ast":null,"code":"'use strict';\n\nconst {\n  promisify\n} = require('util');\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst fastGlob = require('fast-glob');\n\nconst gitIgnore = require('ignore');\n\nconst slash = require('slash');\n\nconst DEFAULT_IGNORE = ['**/node_modules/**', '**/flow-typed/**', '**/coverage/**', '**/.git'];\nconst readFileP = promisify(fs.readFile);\n\nconst mapGitIgnorePatternTo = base => ignore => {\n  if (ignore.startsWith('!')) {\n    return '!' + path.posix.join(base, ignore.slice(1));\n  }\n\n  return path.posix.join(base, ignore);\n};\n\nconst parseGitIgnore = (content, options) => {\n  const base = slash(path.relative(options.cwd, path.dirname(options.fileName)));\n  return content.split(/\\r?\\n/).filter(Boolean).filter(line => !line.startsWith('#')).map(mapGitIgnorePatternTo(base));\n};\n\nconst reduceIgnore = files => {\n  const ignores = gitIgnore();\n\n  for (const file of files) {\n    ignores.add(parseGitIgnore(file.content, {\n      cwd: file.cwd,\n      fileName: file.filePath\n    }));\n  }\n\n  return ignores;\n};\n\nconst ensureAbsolutePathForCwd = (cwd, p) => {\n  cwd = slash(cwd);\n\n  if (path.isAbsolute(p)) {\n    if (slash(p).startsWith(cwd)) {\n      return p;\n    }\n\n    throw new Error(`Path ${p} is not in cwd ${cwd}`);\n  }\n\n  return path.join(cwd, p);\n};\n\nconst getIsIgnoredPredecate = (ignores, cwd) => {\n  return p => ignores.ignores(slash(path.relative(cwd, ensureAbsolutePathForCwd(cwd, p.path || p))));\n};\n\nconst getFile = async (file, cwd) => {\n  const filePath = path.join(cwd, file);\n  const content = await readFileP(filePath, 'utf8');\n  return {\n    cwd,\n    filePath,\n    content\n  };\n};\n\nconst getFileSync = (file, cwd) => {\n  const filePath = path.join(cwd, file);\n  const content = fs.readFileSync(filePath, 'utf8');\n  return {\n    cwd,\n    filePath,\n    content\n  };\n};\n\nconst normalizeOptions = function () {\n  let {\n    ignore = [],\n    cwd = slash(process.cwd())\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    ignore,\n    cwd\n  };\n};\n\nmodule.exports = async options => {\n  options = normalizeOptions(options);\n  const paths = await fastGlob('**/.gitignore', {\n    ignore: DEFAULT_IGNORE.concat(options.ignore),\n    cwd: options.cwd\n  });\n  const files = await Promise.all(paths.map(file => getFile(file, options.cwd)));\n  const ignores = reduceIgnore(files);\n  return getIsIgnoredPredecate(ignores, options.cwd);\n};\n\nmodule.exports.sync = options => {\n  options = normalizeOptions(options);\n  const paths = fastGlob.sync('**/.gitignore', {\n    ignore: DEFAULT_IGNORE.concat(options.ignore),\n    cwd: options.cwd\n  });\n  const files = paths.map(file => getFileSync(file, options.cwd));\n  const ignores = reduceIgnore(files);\n  return getIsIgnoredPredecate(ignores, options.cwd);\n};","map":{"version":3,"names":["promisify","require","fs","path","fastGlob","gitIgnore","slash","DEFAULT_IGNORE","readFileP","readFile","mapGitIgnorePatternTo","base","ignore","startsWith","posix","join","slice","parseGitIgnore","content","options","relative","cwd","dirname","fileName","split","filter","Boolean","line","map","reduceIgnore","files","ignores","file","add","filePath","ensureAbsolutePathForCwd","p","isAbsolute","Error","getIsIgnoredPredecate","getFile","getFileSync","readFileSync","normalizeOptions","process","module","exports","paths","concat","Promise","all","sync"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/globby/gitignore.js"],"sourcesContent":["'use strict';\nconst {promisify} = require('util');\nconst fs = require('fs');\nconst path = require('path');\nconst fastGlob = require('fast-glob');\nconst gitIgnore = require('ignore');\nconst slash = require('slash');\n\nconst DEFAULT_IGNORE = [\n\t'**/node_modules/**',\n\t'**/flow-typed/**',\n\t'**/coverage/**',\n\t'**/.git'\n];\n\nconst readFileP = promisify(fs.readFile);\n\nconst mapGitIgnorePatternTo = base => ignore => {\n\tif (ignore.startsWith('!')) {\n\t\treturn '!' + path.posix.join(base, ignore.slice(1));\n\t}\n\n\treturn path.posix.join(base, ignore);\n};\n\nconst parseGitIgnore = (content, options) => {\n\tconst base = slash(path.relative(options.cwd, path.dirname(options.fileName)));\n\n\treturn content\n\t\t.split(/\\r?\\n/)\n\t\t.filter(Boolean)\n\t\t.filter(line => !line.startsWith('#'))\n\t\t.map(mapGitIgnorePatternTo(base));\n};\n\nconst reduceIgnore = files => {\n\tconst ignores = gitIgnore();\n\tfor (const file of files) {\n\t\tignores.add(parseGitIgnore(file.content, {\n\t\t\tcwd: file.cwd,\n\t\t\tfileName: file.filePath\n\t\t}));\n\t}\n\n\treturn ignores;\n};\n\nconst ensureAbsolutePathForCwd = (cwd, p) => {\n\tcwd = slash(cwd);\n\tif (path.isAbsolute(p)) {\n\t\tif (slash(p).startsWith(cwd)) {\n\t\t\treturn p;\n\t\t}\n\n\t\tthrow new Error(`Path ${p} is not in cwd ${cwd}`);\n\t}\n\n\treturn path.join(cwd, p);\n};\n\nconst getIsIgnoredPredecate = (ignores, cwd) => {\n\treturn p => ignores.ignores(slash(path.relative(cwd, ensureAbsolutePathForCwd(cwd, p.path || p))));\n};\n\nconst getFile = async (file, cwd) => {\n\tconst filePath = path.join(cwd, file);\n\tconst content = await readFileP(filePath, 'utf8');\n\n\treturn {\n\t\tcwd,\n\t\tfilePath,\n\t\tcontent\n\t};\n};\n\nconst getFileSync = (file, cwd) => {\n\tconst filePath = path.join(cwd, file);\n\tconst content = fs.readFileSync(filePath, 'utf8');\n\n\treturn {\n\t\tcwd,\n\t\tfilePath,\n\t\tcontent\n\t};\n};\n\nconst normalizeOptions = ({\n\tignore = [],\n\tcwd = slash(process.cwd())\n} = {}) => {\n\treturn {ignore, cwd};\n};\n\nmodule.exports = async options => {\n\toptions = normalizeOptions(options);\n\n\tconst paths = await fastGlob('**/.gitignore', {\n\t\tignore: DEFAULT_IGNORE.concat(options.ignore),\n\t\tcwd: options.cwd\n\t});\n\n\tconst files = await Promise.all(paths.map(file => getFile(file, options.cwd)));\n\tconst ignores = reduceIgnore(files);\n\n\treturn getIsIgnoredPredecate(ignores, options.cwd);\n};\n\nmodule.exports.sync = options => {\n\toptions = normalizeOptions(options);\n\n\tconst paths = fastGlob.sync('**/.gitignore', {\n\t\tignore: DEFAULT_IGNORE.concat(options.ignore),\n\t\tcwd: options.cwd\n\t});\n\n\tconst files = paths.map(file => getFileSync(file, options.cwd));\n\tconst ignores = reduceIgnore(files);\n\n\treturn getIsIgnoredPredecate(ignores, options.cwd);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}