{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._getTypeAnnotation = _getTypeAnnotation;\nexports.baseTypeStrictlyMatches = baseTypeStrictlyMatches;\nexports.couldBeBaseType = couldBeBaseType;\nexports.getTypeAnnotation = getTypeAnnotation;\nexports.isBaseType = isBaseType;\nexports.isGenericType = isGenericType;\n\nvar inferers = require(\"./inferers\");\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  anyTypeAnnotation,\n  isAnyTypeAnnotation,\n  isArrayTypeAnnotation,\n  isBooleanTypeAnnotation,\n  isEmptyTypeAnnotation,\n  isFlowBaseAnnotation,\n  isGenericTypeAnnotation,\n  isIdentifier,\n  isMixedTypeAnnotation,\n  isNumberTypeAnnotation,\n  isStringTypeAnnotation,\n  isTSArrayType,\n  isTSTypeAnnotation,\n  isTSTypeReference,\n  isTupleTypeAnnotation,\n  isTypeAnnotation,\n  isUnionTypeAnnotation,\n  isVoidTypeAnnotation,\n  stringTypeAnnotation,\n  voidTypeAnnotation\n} = _t;\n\nfunction getTypeAnnotation() {\n  let type = this.getData(\"typeAnnotation\");\n\n  if (type != null) {\n    return type;\n  }\n\n  type = this._getTypeAnnotation() || anyTypeAnnotation();\n\n  if (isTypeAnnotation(type) || isTSTypeAnnotation(type)) {\n    type = type.typeAnnotation;\n  }\n\n  this.setData(\"typeAnnotation\", type);\n  return type;\n}\n\nconst typeAnnotationInferringNodes = new WeakSet();\n\nfunction _getTypeAnnotation() {\n  const node = this.node;\n\n  if (!node) {\n    if (this.key === \"init\" && this.parentPath.isVariableDeclarator()) {\n      const declar = this.parentPath.parentPath;\n      const declarParent = declar.parentPath;\n\n      if (declar.key === \"left\" && declarParent.isForInStatement()) {\n        return stringTypeAnnotation();\n      }\n\n      if (declar.key === \"left\" && declarParent.isForOfStatement()) {\n        return anyTypeAnnotation();\n      }\n\n      return voidTypeAnnotation();\n    } else {\n      return;\n    }\n  }\n\n  if (node.typeAnnotation) {\n    return node.typeAnnotation;\n  }\n\n  if (typeAnnotationInferringNodes.has(node)) {\n    return;\n  }\n\n  typeAnnotationInferringNodes.add(node);\n\n  try {\n    var _inferer;\n\n    let inferer = inferers[node.type];\n\n    if (inferer) {\n      return inferer.call(this, node);\n    }\n\n    inferer = inferers[this.parentPath.type];\n\n    if ((_inferer = inferer) != null && _inferer.validParent) {\n      return this.parentPath.getTypeAnnotation();\n    }\n  } finally {\n    typeAnnotationInferringNodes.delete(node);\n  }\n}\n\nfunction isBaseType(baseName, soft) {\n  return _isBaseType(baseName, this.getTypeAnnotation(), soft);\n}\n\nfunction _isBaseType(baseName, type, soft) {\n  if (baseName === \"string\") {\n    return isStringTypeAnnotation(type);\n  } else if (baseName === \"number\") {\n    return isNumberTypeAnnotation(type);\n  } else if (baseName === \"boolean\") {\n    return isBooleanTypeAnnotation(type);\n  } else if (baseName === \"any\") {\n    return isAnyTypeAnnotation(type);\n  } else if (baseName === \"mixed\") {\n    return isMixedTypeAnnotation(type);\n  } else if (baseName === \"empty\") {\n    return isEmptyTypeAnnotation(type);\n  } else if (baseName === \"void\") {\n    return isVoidTypeAnnotation(type);\n  } else {\n    if (soft) {\n      return false;\n    } else {\n      throw new Error(`Unknown base type ${baseName}`);\n    }\n  }\n}\n\nfunction couldBeBaseType(name) {\n  const type = this.getTypeAnnotation();\n  if (isAnyTypeAnnotation(type)) return true;\n\n  if (isUnionTypeAnnotation(type)) {\n    for (const type2 of type.types) {\n      if (isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {\n        return true;\n      }\n    }\n\n    return false;\n  } else {\n    return _isBaseType(name, type, true);\n  }\n}\n\nfunction baseTypeStrictlyMatches(rightArg) {\n  const left = this.getTypeAnnotation();\n  const right = rightArg.getTypeAnnotation();\n\n  if (!isAnyTypeAnnotation(left) && isFlowBaseAnnotation(left)) {\n    return right.type === left.type;\n  }\n\n  return false;\n}\n\nfunction isGenericType(genericName) {\n  const type = this.getTypeAnnotation();\n\n  if (genericName === \"Array\") {\n    if (isTSArrayType(type) || isArrayTypeAnnotation(type) || isTupleTypeAnnotation(type)) {\n      return true;\n    }\n  }\n\n  return isGenericTypeAnnotation(type) && isIdentifier(type.id, {\n    name: genericName\n  }) || isTSTypeReference(type) && isIdentifier(type.typeName, {\n    name: genericName\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","_getTypeAnnotation","baseTypeStrictlyMatches","couldBeBaseType","getTypeAnnotation","isBaseType","isGenericType","inferers","require","_t","anyTypeAnnotation","isAnyTypeAnnotation","isArrayTypeAnnotation","isBooleanTypeAnnotation","isEmptyTypeAnnotation","isFlowBaseAnnotation","isGenericTypeAnnotation","isIdentifier","isMixedTypeAnnotation","isNumberTypeAnnotation","isStringTypeAnnotation","isTSArrayType","isTSTypeAnnotation","isTSTypeReference","isTupleTypeAnnotation","isTypeAnnotation","isUnionTypeAnnotation","isVoidTypeAnnotation","stringTypeAnnotation","voidTypeAnnotation","type","getData","typeAnnotation","setData","typeAnnotationInferringNodes","WeakSet","node","key","parentPath","isVariableDeclarator","declar","declarParent","isForInStatement","isForOfStatement","has","add","_inferer","inferer","call","validParent","delete","baseName","soft","_isBaseType","Error","name","type2","types","rightArg","left","right","genericName","id","typeName"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/traverse/lib/path/inference/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._getTypeAnnotation = _getTypeAnnotation;\nexports.baseTypeStrictlyMatches = baseTypeStrictlyMatches;\nexports.couldBeBaseType = couldBeBaseType;\nexports.getTypeAnnotation = getTypeAnnotation;\nexports.isBaseType = isBaseType;\nexports.isGenericType = isGenericType;\n\nvar inferers = require(\"./inferers\");\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  anyTypeAnnotation,\n  isAnyTypeAnnotation,\n  isArrayTypeAnnotation,\n  isBooleanTypeAnnotation,\n  isEmptyTypeAnnotation,\n  isFlowBaseAnnotation,\n  isGenericTypeAnnotation,\n  isIdentifier,\n  isMixedTypeAnnotation,\n  isNumberTypeAnnotation,\n  isStringTypeAnnotation,\n  isTSArrayType,\n  isTSTypeAnnotation,\n  isTSTypeReference,\n  isTupleTypeAnnotation,\n  isTypeAnnotation,\n  isUnionTypeAnnotation,\n  isVoidTypeAnnotation,\n  stringTypeAnnotation,\n  voidTypeAnnotation\n} = _t;\n\nfunction getTypeAnnotation() {\n  let type = this.getData(\"typeAnnotation\");\n\n  if (type != null) {\n    return type;\n  }\n\n  type = this._getTypeAnnotation() || anyTypeAnnotation();\n\n  if (isTypeAnnotation(type) || isTSTypeAnnotation(type)) {\n    type = type.typeAnnotation;\n  }\n\n  this.setData(\"typeAnnotation\", type);\n  return type;\n}\n\nconst typeAnnotationInferringNodes = new WeakSet();\n\nfunction _getTypeAnnotation() {\n  const node = this.node;\n\n  if (!node) {\n    if (this.key === \"init\" && this.parentPath.isVariableDeclarator()) {\n      const declar = this.parentPath.parentPath;\n      const declarParent = declar.parentPath;\n\n      if (declar.key === \"left\" && declarParent.isForInStatement()) {\n        return stringTypeAnnotation();\n      }\n\n      if (declar.key === \"left\" && declarParent.isForOfStatement()) {\n        return anyTypeAnnotation();\n      }\n\n      return voidTypeAnnotation();\n    } else {\n      return;\n    }\n  }\n\n  if (node.typeAnnotation) {\n    return node.typeAnnotation;\n  }\n\n  if (typeAnnotationInferringNodes.has(node)) {\n    return;\n  }\n\n  typeAnnotationInferringNodes.add(node);\n\n  try {\n    var _inferer;\n\n    let inferer = inferers[node.type];\n\n    if (inferer) {\n      return inferer.call(this, node);\n    }\n\n    inferer = inferers[this.parentPath.type];\n\n    if ((_inferer = inferer) != null && _inferer.validParent) {\n      return this.parentPath.getTypeAnnotation();\n    }\n  } finally {\n    typeAnnotationInferringNodes.delete(node);\n  }\n}\n\nfunction isBaseType(baseName, soft) {\n  return _isBaseType(baseName, this.getTypeAnnotation(), soft);\n}\n\nfunction _isBaseType(baseName, type, soft) {\n  if (baseName === \"string\") {\n    return isStringTypeAnnotation(type);\n  } else if (baseName === \"number\") {\n    return isNumberTypeAnnotation(type);\n  } else if (baseName === \"boolean\") {\n    return isBooleanTypeAnnotation(type);\n  } else if (baseName === \"any\") {\n    return isAnyTypeAnnotation(type);\n  } else if (baseName === \"mixed\") {\n    return isMixedTypeAnnotation(type);\n  } else if (baseName === \"empty\") {\n    return isEmptyTypeAnnotation(type);\n  } else if (baseName === \"void\") {\n    return isVoidTypeAnnotation(type);\n  } else {\n    if (soft) {\n      return false;\n    } else {\n      throw new Error(`Unknown base type ${baseName}`);\n    }\n  }\n}\n\nfunction couldBeBaseType(name) {\n  const type = this.getTypeAnnotation();\n  if (isAnyTypeAnnotation(type)) return true;\n\n  if (isUnionTypeAnnotation(type)) {\n    for (const type2 of type.types) {\n      if (isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {\n        return true;\n      }\n    }\n\n    return false;\n  } else {\n    return _isBaseType(name, type, true);\n  }\n}\n\nfunction baseTypeStrictlyMatches(rightArg) {\n  const left = this.getTypeAnnotation();\n  const right = rightArg.getTypeAnnotation();\n\n  if (!isAnyTypeAnnotation(left) && isFlowBaseAnnotation(left)) {\n    return right.type === left.type;\n  }\n\n  return false;\n}\n\nfunction isGenericType(genericName) {\n  const type = this.getTypeAnnotation();\n\n  if (genericName === \"Array\") {\n    if (isTSArrayType(type) || isArrayTypeAnnotation(type) || isTupleTypeAnnotation(type)) {\n      return true;\n    }\n  }\n\n  return isGenericTypeAnnotation(type) && isIdentifier(type.id, {\n    name: genericName\n  }) || isTSTypeReference(type) && isIdentifier(type.typeName, {\n    name: genericName\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}