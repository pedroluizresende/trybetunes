{"ast":null,"code":"'use strict';\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n\n/**\n * @param {PostcssResult} [postcssResult]\n * @param {import('stylelint').CssSyntaxError} [cssSyntaxError]\n * @return {StylelintResult}\n */\n\nmodule.exports = function (postcssResult, cssSyntaxError) {\n  /** @type {StylelintResult} */\n  let stylelintResult;\n  /** @type {string | undefined} */\n\n  let source;\n\n  if (postcssResult && postcssResult.root) {\n    if (postcssResult.root.source) {\n      source = postcssResult.root.source.input.file;\n\n      if (!source && 'id' in postcssResult.root.source.input) {\n        source = postcssResult.root.source.input.id;\n      }\n    }\n\n    const deprecationMessages = postcssResult.messages.filter(message => message.stylelintType === 'deprecation');\n    const deprecations = deprecationMessages.map(deprecationMessage => {\n      return {\n        text: deprecationMessage.text,\n        reference: deprecationMessage.stylelintReference\n      };\n    });\n    const invalidOptionMessages = postcssResult.messages.filter(message => message.stylelintType === 'invalidOption');\n    const invalidOptionWarnings = invalidOptionMessages.map(invalidOptionMessage => {\n      return {\n        text: invalidOptionMessage.text\n      };\n    });\n    const parseErrors = postcssResult.messages.filter(message => message.stylelintType === 'parseError'); // Remove deprecation warnings, invalid options, and parse errors from the messages\n\n    postcssResult.messages = postcssResult.messages.filter(message => message.stylelintType !== 'deprecation' && message.stylelintType !== 'invalidOption' && message.stylelintType !== 'parseError'); // This defines the stylelint result object that formatters receive\n\n    stylelintResult = {\n      source,\n      deprecations,\n      invalidOptionWarnings,\n      // @ts-expect-error -- TS2322: Type 'Message[]' is not assignable to type '(Warning & { stylelintType: string; })[]'.\n      parseErrors,\n      errored: postcssResult.stylelint.stylelintError,\n      warnings: postcssResult.messages.map(message => {\n        return {\n          line: message.line,\n          column: message.column,\n          endLine: message.endLine,\n          endColumn: message.endColumn,\n          rule: message.rule,\n          severity: message.severity,\n          text: message.text\n        };\n      }),\n      ignored: postcssResult.stylelint.ignored,\n      _postcssResult: postcssResult\n    };\n  } else if (cssSyntaxError) {\n    if (cssSyntaxError.name !== 'CssSyntaxError') {\n      throw cssSyntaxError;\n    }\n\n    stylelintResult = {\n      source: cssSyntaxError.file || '<input css 1>',\n      deprecations: [],\n      invalidOptionWarnings: [],\n      parseErrors: [],\n      errored: true,\n      warnings: [{\n        line: cssSyntaxError.line,\n        column: cssSyntaxError.column,\n        endLine: cssSyntaxError.endLine,\n        endColumn: cssSyntaxError.endColumn,\n        rule: cssSyntaxError.name,\n        severity: 'error',\n        text: `${cssSyntaxError.reason} (${cssSyntaxError.name})`\n      }]\n    };\n  } else {\n    throw new Error('createPartialStylelintResult must be called with either postcssResult or CssSyntaxError');\n  }\n\n  return stylelintResult;\n};","map":{"version":3,"names":["module","exports","postcssResult","cssSyntaxError","stylelintResult","source","root","input","file","id","deprecationMessages","messages","filter","message","stylelintType","deprecations","map","deprecationMessage","text","reference","stylelintReference","invalidOptionMessages","invalidOptionWarnings","invalidOptionMessage","parseErrors","errored","stylelint","stylelintError","warnings","line","column","endLine","endColumn","rule","severity","ignored","_postcssResult","name","reason","Error"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/stylelint/lib/createPartialStylelintResult.js"],"sourcesContent":["'use strict';\n\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n\n/**\n * @param {PostcssResult} [postcssResult]\n * @param {import('stylelint').CssSyntaxError} [cssSyntaxError]\n * @return {StylelintResult}\n */\nmodule.exports = function (postcssResult, cssSyntaxError) {\n\t/** @type {StylelintResult} */\n\tlet stylelintResult;\n\t/** @type {string | undefined} */\n\tlet source;\n\n\tif (postcssResult && postcssResult.root) {\n\t\tif (postcssResult.root.source) {\n\t\t\tsource = postcssResult.root.source.input.file;\n\n\t\t\tif (!source && 'id' in postcssResult.root.source.input) {\n\t\t\t\tsource = postcssResult.root.source.input.id;\n\t\t\t}\n\t\t}\n\n\t\tconst deprecationMessages = postcssResult.messages.filter(\n\t\t\t(message) => message.stylelintType === 'deprecation',\n\t\t);\n\t\tconst deprecations = deprecationMessages.map((deprecationMessage) => {\n\t\t\treturn {\n\t\t\t\ttext: deprecationMessage.text,\n\t\t\t\treference: deprecationMessage.stylelintReference,\n\t\t\t};\n\t\t});\n\n\t\tconst invalidOptionMessages = postcssResult.messages.filter(\n\t\t\t(message) => message.stylelintType === 'invalidOption',\n\t\t);\n\t\tconst invalidOptionWarnings = invalidOptionMessages.map((invalidOptionMessage) => {\n\t\t\treturn {\n\t\t\t\ttext: invalidOptionMessage.text,\n\t\t\t};\n\t\t});\n\n\t\tconst parseErrors = postcssResult.messages.filter(\n\t\t\t(message) => message.stylelintType === 'parseError',\n\t\t);\n\n\t\t// Remove deprecation warnings, invalid options, and parse errors from the messages\n\t\tpostcssResult.messages = postcssResult.messages.filter(\n\t\t\t(message) =>\n\t\t\t\tmessage.stylelintType !== 'deprecation' &&\n\t\t\t\tmessage.stylelintType !== 'invalidOption' &&\n\t\t\t\tmessage.stylelintType !== 'parseError',\n\t\t);\n\n\t\t// This defines the stylelint result object that formatters receive\n\t\tstylelintResult = {\n\t\t\tsource,\n\t\t\tdeprecations,\n\t\t\tinvalidOptionWarnings,\n\t\t\t// @ts-expect-error -- TS2322: Type 'Message[]' is not assignable to type '(Warning & { stylelintType: string; })[]'.\n\t\t\tparseErrors,\n\t\t\terrored: postcssResult.stylelint.stylelintError,\n\t\t\twarnings: postcssResult.messages.map((message) => {\n\t\t\t\treturn {\n\t\t\t\t\tline: message.line,\n\t\t\t\t\tcolumn: message.column,\n\t\t\t\t\tendLine: message.endLine,\n\t\t\t\t\tendColumn: message.endColumn,\n\t\t\t\t\trule: message.rule,\n\t\t\t\t\tseverity: message.severity,\n\t\t\t\t\ttext: message.text,\n\t\t\t\t};\n\t\t\t}),\n\t\t\tignored: postcssResult.stylelint.ignored,\n\t\t\t_postcssResult: postcssResult,\n\t\t};\n\t} else if (cssSyntaxError) {\n\t\tif (cssSyntaxError.name !== 'CssSyntaxError') {\n\t\t\tthrow cssSyntaxError;\n\t\t}\n\n\t\tstylelintResult = {\n\t\t\tsource: cssSyntaxError.file || '<input css 1>',\n\t\t\tdeprecations: [],\n\t\t\tinvalidOptionWarnings: [],\n\t\t\tparseErrors: [],\n\t\t\terrored: true,\n\t\t\twarnings: [\n\t\t\t\t{\n\t\t\t\t\tline: cssSyntaxError.line,\n\t\t\t\t\tcolumn: cssSyntaxError.column,\n\t\t\t\t\tendLine: cssSyntaxError.endLine,\n\t\t\t\t\tendColumn: cssSyntaxError.endColumn,\n\t\t\t\t\trule: cssSyntaxError.name,\n\t\t\t\t\tseverity: 'error',\n\t\t\t\t\ttext: `${cssSyntaxError.reason} (${cssSyntaxError.name})`,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t} else {\n\t\tthrow new Error(\n\t\t\t'createPartialStylelintResult must be called with either postcssResult or CssSyntaxError',\n\t\t);\n\t}\n\n\treturn stylelintResult;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}