{"ast":null,"code":"let tokenizer = require('postcss/lib/tokenize');\n\nlet Comment = require('postcss/lib/comment');\n\nlet Parser = require('postcss/lib/parser');\n\nclass SafeParser extends Parser {\n  createTokenizer() {\n    this.tokenizer = tokenizer(this.input, {\n      ignoreErrors: true\n    });\n  }\n\n  comment(token) {\n    let node = new Comment();\n    this.init(node, token[2]);\n    let pos = this.input.fromOffset(token[3]) || this.input.fromOffset(this.input.css.length - 1);\n    node.source.end = {\n      offset: token[3],\n      line: pos.line,\n      column: pos.col\n    };\n    let text = token[1].slice(2);\n    if (text.slice(-2) === '*/') text = text.slice(0, -2);\n\n    if (/^\\s*$/.test(text)) {\n      node.text = '';\n      node.raws.left = text;\n      node.raws.right = '';\n    } else {\n      let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/);\n      node.text = match[2];\n      node.raws.left = match[1];\n      node.raws.right = match[3];\n    }\n  }\n\n  decl(tokens) {\n    if (tokens.length > 1 && tokens.some(i => i[0] === 'word')) {\n      super.decl(tokens);\n    }\n  }\n\n  unclosedBracket() {}\n\n  unknownWord(tokens) {\n    this.spaces += tokens.map(i => i[1]).join('');\n  }\n\n  unexpectedClose() {\n    this.current.raws.after += '}';\n  }\n\n  doubleColon() {}\n\n  unnamedAtrule(node) {\n    node.name = '';\n  }\n\n  precheckMissedSemicolon(tokens) {\n    let colon = this.colon(tokens);\n    if (colon === false) return;\n    let nextStart, prevEnd;\n\n    for (nextStart = colon - 1; nextStart >= 0; nextStart--) {\n      if (tokens[nextStart][0] === 'word') break;\n    }\n\n    if (nextStart === 0) return;\n\n    for (prevEnd = nextStart - 1; prevEnd >= 0; prevEnd--) {\n      if (tokens[prevEnd][0] !== 'space') {\n        prevEnd += 1;\n        break;\n      }\n    }\n\n    let other = tokens.slice(nextStart);\n    let spaces = tokens.slice(prevEnd, nextStart);\n    tokens.splice(prevEnd, tokens.length - prevEnd);\n    this.spaces = spaces.map(i => i[1]).join('');\n    this.decl(other);\n  }\n\n  checkMissedSemicolon() {}\n\n  endFile() {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon;\n    }\n\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces;\n\n    while (this.current.parent) {\n      this.current = this.current.parent;\n      this.current.raws.after = '';\n    }\n  }\n\n}\n\nmodule.exports = SafeParser;","map":{"version":3,"names":["tokenizer","require","Comment","Parser","SafeParser","createTokenizer","input","ignoreErrors","comment","token","node","init","pos","fromOffset","css","length","source","end","offset","line","column","col","text","slice","test","raws","left","right","match","decl","tokens","some","i","unclosedBracket","unknownWord","spaces","map","join","unexpectedClose","current","after","doubleColon","unnamedAtrule","name","precheckMissedSemicolon","colon","nextStart","prevEnd","other","splice","checkMissedSemicolon","endFile","nodes","semicolon","parent","module","exports"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/postcss-safe-parser/lib/safe-parser.js"],"sourcesContent":["let tokenizer = require('postcss/lib/tokenize')\nlet Comment = require('postcss/lib/comment')\nlet Parser = require('postcss/lib/parser')\n\nclass SafeParser extends Parser {\n  createTokenizer() {\n    this.tokenizer = tokenizer(this.input, { ignoreErrors: true })\n  }\n\n  comment(token) {\n    let node = new Comment()\n    this.init(node, token[2])\n    let pos =\n      this.input.fromOffset(token[3]) ||\n      this.input.fromOffset(this.input.css.length - 1)\n    node.source.end = {\n      offset: token[3],\n      line: pos.line,\n      column: pos.col\n    }\n\n    let text = token[1].slice(2)\n    if (text.slice(-2) === '*/') text = text.slice(0, -2)\n\n    if (/^\\s*$/.test(text)) {\n      node.text = ''\n      node.raws.left = text\n      node.raws.right = ''\n    } else {\n      let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/)\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.right = match[3]\n    }\n  }\n\n  decl(tokens) {\n    if (tokens.length > 1 && tokens.some(i => i[0] === 'word')) {\n      super.decl(tokens)\n    }\n  }\n\n  unclosedBracket() {}\n\n  unknownWord(tokens) {\n    this.spaces += tokens.map(i => i[1]).join('')\n  }\n\n  unexpectedClose() {\n    this.current.raws.after += '}'\n  }\n\n  doubleColon() {}\n\n  unnamedAtrule(node) {\n    node.name = ''\n  }\n\n  precheckMissedSemicolon(tokens) {\n    let colon = this.colon(tokens)\n    if (colon === false) return\n\n    let nextStart, prevEnd\n    for (nextStart = colon - 1; nextStart >= 0; nextStart--) {\n      if (tokens[nextStart][0] === 'word') break\n    }\n    if (nextStart === 0) return\n\n    for (prevEnd = nextStart - 1; prevEnd >= 0; prevEnd--) {\n      if (tokens[prevEnd][0] !== 'space') {\n        prevEnd += 1\n        break\n      }\n    }\n\n    let other = tokens.slice(nextStart)\n    let spaces = tokens.slice(prevEnd, nextStart)\n    tokens.splice(prevEnd, tokens.length - prevEnd)\n    this.spaces = spaces.map(i => i[1]).join('')\n\n    this.decl(other)\n  }\n\n  checkMissedSemicolon() {}\n\n  endFile() {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n\n    while (this.current.parent) {\n      this.current = this.current.parent\n      this.current.raws.after = ''\n    }\n  }\n}\n\nmodule.exports = SafeParser\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}