{"ast":null,"code":"'use strict';\n\nconst createStylelint = require('./createStylelint');\n\nconst path = require('path');\n/** @typedef {import('stylelint').PostcssPluginOptions} PostcssPluginOptions */\n\n/** @typedef {import('stylelint').Config} StylelintConfig */\n\n/**\n * @type {import('postcss').PluginCreator<PostcssPluginOptions>}\n * */\n\n\nmodule.exports = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const [cwd, tailoredOptions] = isConfig(options) ? [process.cwd(), {\n    config: options\n  }] : [options.cwd || process.cwd(), options];\n  const stylelint = createStylelint(tailoredOptions);\n  return {\n    postcssPlugin: 'stylelint',\n\n    Once(root, _ref) {\n      let {\n        result\n      } = _ref;\n      let filePath = root.source && root.source.input.file;\n\n      if (filePath && !path.isAbsolute(filePath)) {\n        filePath = path.join(cwd, filePath);\n      }\n\n      return stylelint._lintSource({\n        filePath,\n        existingPostcssResult: result\n      });\n    }\n\n  };\n};\n\nmodule.exports.postcss = true;\n/**\n * @param {PostcssPluginOptions} options\n * @returns {options is StylelintConfig}\n */\n\nfunction isConfig(options) {\n  return 'rules' in options;\n}","map":{"version":3,"names":["createStylelint","require","path","module","exports","options","cwd","tailoredOptions","isConfig","process","config","stylelint","postcssPlugin","Once","root","result","filePath","source","input","file","isAbsolute","join","_lintSource","existingPostcssResult","postcss"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/stylelint/lib/postcssPlugin.js"],"sourcesContent":["'use strict';\n\nconst createStylelint = require('./createStylelint');\nconst path = require('path');\n\n/** @typedef {import('stylelint').PostcssPluginOptions} PostcssPluginOptions */\n/** @typedef {import('stylelint').Config} StylelintConfig */\n\n/**\n * @type {import('postcss').PluginCreator<PostcssPluginOptions>}\n * */\nmodule.exports = (options = {}) => {\n\tconst [cwd, tailoredOptions] = isConfig(options)\n\t\t? [process.cwd(), { config: options }]\n\t\t: [options.cwd || process.cwd(), options];\n\tconst stylelint = createStylelint(tailoredOptions);\n\n\treturn {\n\t\tpostcssPlugin: 'stylelint',\n\t\tOnce(root, { result }) {\n\t\t\tlet filePath = root.source && root.source.input.file;\n\n\t\t\tif (filePath && !path.isAbsolute(filePath)) {\n\t\t\t\tfilePath = path.join(cwd, filePath);\n\t\t\t}\n\n\t\t\treturn stylelint._lintSource({\n\t\t\t\tfilePath,\n\t\t\t\texistingPostcssResult: result,\n\t\t\t});\n\t\t},\n\t};\n};\n\nmodule.exports.postcss = true;\n\n/**\n * @param {PostcssPluginOptions} options\n * @returns {options is StylelintConfig}\n */\nfunction isConfig(options) {\n\treturn 'rules' in options;\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,eAAe,GAAGC,OAAO,CAAC,mBAAD,CAA/B;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;AAEA;;AACA;;AAEA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,YAAkB;EAAA,IAAjBC,OAAiB,uEAAP,EAAO;EAClC,MAAM,CAACC,GAAD,EAAMC,eAAN,IAAyBC,QAAQ,CAACH,OAAD,CAAR,GAC5B,CAACI,OAAO,CAACH,GAAR,EAAD,EAAgB;IAAEI,MAAM,EAAEL;EAAV,CAAhB,CAD4B,GAE5B,CAACA,OAAO,CAACC,GAAR,IAAeG,OAAO,CAACH,GAAR,EAAhB,EAA+BD,OAA/B,CAFH;EAGA,MAAMM,SAAS,GAAGX,eAAe,CAACO,eAAD,CAAjC;EAEA,OAAO;IACNK,aAAa,EAAE,WADT;;IAENC,IAAI,CAACC,IAAD,QAAmB;MAAA,IAAZ;QAAEC;MAAF,CAAY;MACtB,IAAIC,QAAQ,GAAGF,IAAI,CAACG,MAAL,IAAeH,IAAI,CAACG,MAAL,CAAYC,KAAZ,CAAkBC,IAAhD;;MAEA,IAAIH,QAAQ,IAAI,CAACd,IAAI,CAACkB,UAAL,CAAgBJ,QAAhB,CAAjB,EAA4C;QAC3CA,QAAQ,GAAGd,IAAI,CAACmB,IAAL,CAAUf,GAAV,EAAeU,QAAf,CAAX;MACA;;MAED,OAAOL,SAAS,CAACW,WAAV,CAAsB;QAC5BN,QAD4B;QAE5BO,qBAAqB,EAAER;MAFK,CAAtB,CAAP;IAIA;;EAbK,CAAP;AAeA,CArBD;;AAuBAZ,MAAM,CAACC,OAAP,CAAeoB,OAAf,GAAyB,IAAzB;AAEA;AACA;AACA;AACA;;AACA,SAAShB,QAAT,CAAkBH,OAAlB,EAA2B;EAC1B,OAAO,WAAWA,OAAlB;AACA"},"metadata":{},"sourceType":"script"}