{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BlockStatement = BlockStatement;\nexports.Directive = Directive;\nexports.DirectiveLiteral = DirectiveLiteral;\nexports.File = File;\nexports.InterpreterDirective = InterpreterDirective;\nexports.Placeholder = Placeholder;\nexports.Program = Program;\n\nfunction File(node) {\n  if (node.program) {\n    this.print(node.program.interpreter, node);\n  }\n\n  this.print(node.program, node);\n}\n\nfunction Program(node) {\n  this.printInnerComments(node, false);\n  this.printSequence(node.directives, node);\n  if (node.directives && node.directives.length) this.newline();\n  this.printSequence(node.body, node);\n}\n\nfunction BlockStatement(node) {\n  var _node$directives;\n\n  this.tokenChar(123);\n  this.printInnerComments(node);\n  const hasDirectives = (_node$directives = node.directives) == null ? void 0 : _node$directives.length;\n\n  if (node.body.length || hasDirectives) {\n    this.newline();\n    this.printSequence(node.directives, node, {\n      indent: true\n    });\n    if (hasDirectives) this.newline();\n    this.printSequence(node.body, node, {\n      indent: true\n    });\n    this.removeTrailingNewline();\n    this.source(\"end\", node.loc);\n    if (!this.endsWith(10)) this.newline();\n    this.rightBrace();\n  } else {\n    this.source(\"end\", node.loc);\n    this.tokenChar(125);\n  }\n}\n\nfunction Directive(node) {\n  this.print(node.value, node);\n  this.semicolon();\n}\n\nconst unescapedSingleQuoteRE = /(?:^|[^\\\\])(?:\\\\\\\\)*'/;\nconst unescapedDoubleQuoteRE = /(?:^|[^\\\\])(?:\\\\\\\\)*\"/;\n\nfunction DirectiveLiteral(node) {\n  const raw = this.getPossibleRaw(node);\n\n  if (!this.format.minified && raw !== undefined) {\n    this.token(raw);\n    return;\n  }\n\n  const {\n    value\n  } = node;\n\n  if (!unescapedDoubleQuoteRE.test(value)) {\n    this.token(`\"${value}\"`);\n  } else if (!unescapedSingleQuoteRE.test(value)) {\n    this.token(`'${value}'`);\n  } else {\n    throw new Error(\"Malformed AST: it is not possible to print a directive containing\" + \" both unescaped single and double quotes.\");\n  }\n}\n\nfunction InterpreterDirective(node) {\n  this.token(`#!${node.value}\\n`, true);\n}\n\nfunction Placeholder(node) {\n  this.token(\"%%\");\n  this.print(node.name);\n  this.token(\"%%\");\n\n  if (node.expectedNode === \"Statement\") {\n    this.semicolon();\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","BlockStatement","Directive","DirectiveLiteral","File","InterpreterDirective","Placeholder","Program","node","program","print","interpreter","printInnerComments","printSequence","directives","length","newline","body","_node$directives","tokenChar","hasDirectives","indent","removeTrailingNewline","source","loc","endsWith","rightBrace","semicolon","unescapedSingleQuoteRE","unescapedDoubleQuoteRE","raw","getPossibleRaw","format","minified","undefined","token","test","Error","name","expectedNode"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/@babel/generator/lib/generators/base.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BlockStatement = BlockStatement;\nexports.Directive = Directive;\nexports.DirectiveLiteral = DirectiveLiteral;\nexports.File = File;\nexports.InterpreterDirective = InterpreterDirective;\nexports.Placeholder = Placeholder;\nexports.Program = Program;\n\nfunction File(node) {\n  if (node.program) {\n    this.print(node.program.interpreter, node);\n  }\n\n  this.print(node.program, node);\n}\n\nfunction Program(node) {\n  this.printInnerComments(node, false);\n  this.printSequence(node.directives, node);\n  if (node.directives && node.directives.length) this.newline();\n  this.printSequence(node.body, node);\n}\n\nfunction BlockStatement(node) {\n  var _node$directives;\n\n  this.tokenChar(123);\n  this.printInnerComments(node);\n  const hasDirectives = (_node$directives = node.directives) == null ? void 0 : _node$directives.length;\n\n  if (node.body.length || hasDirectives) {\n    this.newline();\n    this.printSequence(node.directives, node, {\n      indent: true\n    });\n    if (hasDirectives) this.newline();\n    this.printSequence(node.body, node, {\n      indent: true\n    });\n    this.removeTrailingNewline();\n    this.source(\"end\", node.loc);\n    if (!this.endsWith(10)) this.newline();\n    this.rightBrace();\n  } else {\n    this.source(\"end\", node.loc);\n    this.tokenChar(125);\n  }\n}\n\nfunction Directive(node) {\n  this.print(node.value, node);\n  this.semicolon();\n}\n\nconst unescapedSingleQuoteRE = /(?:^|[^\\\\])(?:\\\\\\\\)*'/;\nconst unescapedDoubleQuoteRE = /(?:^|[^\\\\])(?:\\\\\\\\)*\"/;\n\nfunction DirectiveLiteral(node) {\n  const raw = this.getPossibleRaw(node);\n\n  if (!this.format.minified && raw !== undefined) {\n    this.token(raw);\n    return;\n  }\n\n  const {\n    value\n  } = node;\n\n  if (!unescapedDoubleQuoteRE.test(value)) {\n    this.token(`\"${value}\"`);\n  } else if (!unescapedSingleQuoteRE.test(value)) {\n    this.token(`'${value}'`);\n  } else {\n    throw new Error(\"Malformed AST: it is not possible to print a directive containing\" + \" both unescaped single and double quotes.\");\n  }\n}\n\nfunction InterpreterDirective(node) {\n  this.token(`#!${node.value}\\n`, true);\n}\n\nfunction Placeholder(node) {\n  this.token(\"%%\");\n  this.print(node.name);\n  this.token(\"%%\");\n\n  if (node.expectedNode === \"Statement\") {\n    this.semicolon();\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}