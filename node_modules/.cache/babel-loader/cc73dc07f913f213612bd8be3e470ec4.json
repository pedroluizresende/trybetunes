{"ast":null,"code":"'use strict';\n/** @typedef {import('stylelint').RangeType} RangeType */\n\n/** @typedef {import('stylelint').DisableReportRange} DisabledRange */\n\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n\n/** @typedef {import('stylelint').ConfigRuleSettings<any, Object>} StylelintConfigRuleSettings */\n\n/**\n * Returns a report describing which `results` (if any) contain disabled ranges\n * for rules that disallow disables via `reportDisables: true`.\n *\n * @param {StylelintResult[]} results\n */\n\nmodule.exports = function (results) {\n  for (const result of results) {\n    // File with `CssSyntaxError` don't have `_postcssResult`s.\n    if (!result._postcssResult) {\n      continue;\n    }\n    /** @type {{[ruleName: string]: Array<RangeType>}} */\n\n\n    const rangeData = result._postcssResult.stylelint.disabledRanges;\n    if (!rangeData) continue;\n    const config = result._postcssResult.stylelint.config;\n    if (!config || !config.rules) continue; // If no rules actually disallow disables, don't bother looking for ranges\n    // that correspond to disabled rules.\n\n    if (!Object.values(config.rules).some(rule => reportDisablesForRule(rule))) {\n      continue;\n    }\n\n    for (const [rule, ranges] of Object.entries(rangeData)) {\n      for (const range of ranges) {\n        if (!reportDisablesForRule(config.rules[rule] || [])) continue; // If the comment doesn't have a location, we can't report a useful error.\n        // In practice we expect all comments to have locations, though.\n\n        if (!range.comment.source || !range.comment.source.start) continue;\n        result.warnings.push({\n          text: `Rule \"${rule}\" may not be disabled`,\n          rule: 'reportDisables',\n          line: range.comment.source.start.line,\n          column: range.comment.source.start.column,\n          endLine: range.comment.source.end && range.comment.source.end.line,\n          endColumn: range.comment.source.end && range.comment.source.end.column,\n          severity: 'error'\n        });\n      }\n    }\n  }\n};\n/**\n * @param {StylelintConfigRuleSettings} options\n * @return {boolean}\n */\n\n\nfunction reportDisablesForRule(options) {\n  if (!options || !options[1]) return false;\n  return Boolean(options[1].reportDisables);\n}","map":{"version":3,"names":["module","exports","results","result","_postcssResult","rangeData","stylelint","disabledRanges","config","rules","Object","values","some","rule","reportDisablesForRule","ranges","entries","range","comment","source","start","warnings","push","text","line","column","endLine","end","endColumn","severity","options","Boolean","reportDisables"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/stylelint/lib/reportDisables.js"],"sourcesContent":["'use strict';\n\n/** @typedef {import('stylelint').RangeType} RangeType */\n/** @typedef {import('stylelint').DisableReportRange} DisabledRange */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n/** @typedef {import('stylelint').ConfigRuleSettings<any, Object>} StylelintConfigRuleSettings */\n\n/**\n * Returns a report describing which `results` (if any) contain disabled ranges\n * for rules that disallow disables via `reportDisables: true`.\n *\n * @param {StylelintResult[]} results\n */\nmodule.exports = function (results) {\n\tfor (const result of results) {\n\t\t// File with `CssSyntaxError` don't have `_postcssResult`s.\n\t\tif (!result._postcssResult) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t/** @type {{[ruleName: string]: Array<RangeType>}} */\n\t\tconst rangeData = result._postcssResult.stylelint.disabledRanges;\n\n\t\tif (!rangeData) continue;\n\n\t\tconst config = result._postcssResult.stylelint.config;\n\n\t\tif (!config || !config.rules) continue;\n\n\t\t// If no rules actually disallow disables, don't bother looking for ranges\n\t\t// that correspond to disabled rules.\n\t\tif (!Object.values(config.rules).some((rule) => reportDisablesForRule(rule))) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor (const [rule, ranges] of Object.entries(rangeData)) {\n\t\t\tfor (const range of ranges) {\n\t\t\t\tif (!reportDisablesForRule(config.rules[rule] || [])) continue;\n\n\t\t\t\t// If the comment doesn't have a location, we can't report a useful error.\n\t\t\t\t// In practice we expect all comments to have locations, though.\n\t\t\t\tif (!range.comment.source || !range.comment.source.start) continue;\n\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\ttext: `Rule \"${rule}\" may not be disabled`,\n\t\t\t\t\trule: 'reportDisables',\n\t\t\t\t\tline: range.comment.source.start.line,\n\t\t\t\t\tcolumn: range.comment.source.start.column,\n\t\t\t\t\tendLine: range.comment.source.end && range.comment.source.end.line,\n\t\t\t\t\tendColumn: range.comment.source.end && range.comment.source.end.column,\n\t\t\t\t\tseverity: 'error',\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * @param {StylelintConfigRuleSettings} options\n * @return {boolean}\n */\nfunction reportDisablesForRule(options) {\n\tif (!options || !options[1]) return false;\n\n\treturn Boolean(options[1].reportDisables);\n}\n"],"mappings":"AAAA;AAEA;;AACA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,OAAV,EAAmB;EACnC,KAAK,MAAMC,MAAX,IAAqBD,OAArB,EAA8B;IAC7B;IACA,IAAI,CAACC,MAAM,CAACC,cAAZ,EAA4B;MAC3B;IACA;IAED;;;IACA,MAAMC,SAAS,GAAGF,MAAM,CAACC,cAAP,CAAsBE,SAAtB,CAAgCC,cAAlD;IAEA,IAAI,CAACF,SAAL,EAAgB;IAEhB,MAAMG,MAAM,GAAGL,MAAM,CAACC,cAAP,CAAsBE,SAAtB,CAAgCE,MAA/C;IAEA,IAAI,CAACA,MAAD,IAAW,CAACA,MAAM,CAACC,KAAvB,EAA8B,SAbD,CAe7B;IACA;;IACA,IAAI,CAACC,MAAM,CAACC,MAAP,CAAcH,MAAM,CAACC,KAArB,EAA4BG,IAA5B,CAAkCC,IAAD,IAAUC,qBAAqB,CAACD,IAAD,CAAhE,CAAL,EAA8E;MAC7E;IACA;;IAED,KAAK,MAAM,CAACA,IAAD,EAAOE,MAAP,CAAX,IAA6BL,MAAM,CAACM,OAAP,CAAeX,SAAf,CAA7B,EAAwD;MACvD,KAAK,MAAMY,KAAX,IAAoBF,MAApB,EAA4B;QAC3B,IAAI,CAACD,qBAAqB,CAACN,MAAM,CAACC,KAAP,CAAaI,IAAb,KAAsB,EAAvB,CAA1B,EAAsD,SAD3B,CAG3B;QACA;;QACA,IAAI,CAACI,KAAK,CAACC,OAAN,CAAcC,MAAf,IAAyB,CAACF,KAAK,CAACC,OAAN,CAAcC,MAAd,CAAqBC,KAAnD,EAA0D;QAE1DjB,MAAM,CAACkB,QAAP,CAAgBC,IAAhB,CAAqB;UACpBC,IAAI,EAAG,SAAQV,IAAK,uBADA;UAEpBA,IAAI,EAAE,gBAFc;UAGpBW,IAAI,EAAEP,KAAK,CAACC,OAAN,CAAcC,MAAd,CAAqBC,KAArB,CAA2BI,IAHb;UAIpBC,MAAM,EAAER,KAAK,CAACC,OAAN,CAAcC,MAAd,CAAqBC,KAArB,CAA2BK,MAJf;UAKpBC,OAAO,EAAET,KAAK,CAACC,OAAN,CAAcC,MAAd,CAAqBQ,GAArB,IAA4BV,KAAK,CAACC,OAAN,CAAcC,MAAd,CAAqBQ,GAArB,CAAyBH,IAL1C;UAMpBI,SAAS,EAAEX,KAAK,CAACC,OAAN,CAAcC,MAAd,CAAqBQ,GAArB,IAA4BV,KAAK,CAACC,OAAN,CAAcC,MAAd,CAAqBQ,GAArB,CAAyBF,MAN5C;UAOpBI,QAAQ,EAAE;QAPU,CAArB;MASA;IACD;EACD;AACD,CA1CD;AA4CA;AACA;AACA;AACA;;;AACA,SAASf,qBAAT,CAA+BgB,OAA/B,EAAwC;EACvC,IAAI,CAACA,OAAD,IAAY,CAACA,OAAO,CAAC,CAAD,CAAxB,EAA6B,OAAO,KAAP;EAE7B,OAAOC,OAAO,CAACD,OAAO,CAAC,CAAD,CAAP,CAAWE,cAAZ,CAAd;AACA"},"metadata":{},"sourceType":"script"}