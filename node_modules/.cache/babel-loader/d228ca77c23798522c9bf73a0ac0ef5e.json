{"ast":null,"code":"'use strict';\n\nconst optionsMatches = require('./utils/optionsMatches');\n\nconst validateDisableSettings = require('./validateDisableSettings');\n/** @typedef {import('stylelint').RangeType} RangeType */\n\n/**\n * @param {import('stylelint').LintResult[]} results\n */\n\n\nmodule.exports = function invalidScopeDisables(results) {\n  for (const result of results) {\n    const settings = validateDisableSettings(result._postcssResult, 'reportInvalidScopeDisables');\n    if (!settings) continue;\n    const [enabled, options, stylelintResult] = settings;\n    const configRules = (stylelintResult.config || {}).rules || {};\n    const usedRules = new Set(Object.keys(configRules));\n    usedRules.add('all');\n\n    for (const [rule, ruleRanges] of Object.entries(stylelintResult.disabledRanges)) {\n      if (usedRules.has(rule)) continue;\n      if (enabled === optionsMatches(options, 'except', rule)) continue;\n\n      for (const range of ruleRanges) {\n        if (!range.strictStart && !range.strictEnd) continue; // If the comment doesn't have a location, we can't report a useful error.\n        // In practice we expect all comments to have locations, though.\n\n        if (!range.comment.source || !range.comment.source.start) continue;\n        result.warnings.push({\n          text: `Rule \"${rule}\" isn't enabled`,\n          rule: '--report-invalid-scope-disables',\n          line: range.comment.source.start.line,\n          column: range.comment.source.start.column,\n          endLine: range.comment.source.end && range.comment.source.end.line,\n          endColumn: range.comment.source.end && range.comment.source.end.column,\n          severity: options.severity\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["optionsMatches","require","validateDisableSettings","module","exports","invalidScopeDisables","results","result","settings","_postcssResult","enabled","options","stylelintResult","configRules","config","rules","usedRules","Set","Object","keys","add","rule","ruleRanges","entries","disabledRanges","has","range","strictStart","strictEnd","comment","source","start","warnings","push","text","line","column","endLine","end","endColumn","severity"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/stylelint/lib/invalidScopeDisables.js"],"sourcesContent":["'use strict';\n\nconst optionsMatches = require('./utils/optionsMatches');\nconst validateDisableSettings = require('./validateDisableSettings');\n\n/** @typedef {import('stylelint').RangeType} RangeType */\n\n/**\n * @param {import('stylelint').LintResult[]} results\n */\nmodule.exports = function invalidScopeDisables(results) {\n\tfor (const result of results) {\n\t\tconst settings = validateDisableSettings(result._postcssResult, 'reportInvalidScopeDisables');\n\n\t\tif (!settings) continue;\n\n\t\tconst [enabled, options, stylelintResult] = settings;\n\n\t\tconst configRules = (stylelintResult.config || {}).rules || {};\n\n\t\tconst usedRules = new Set(Object.keys(configRules));\n\n\t\tusedRules.add('all');\n\n\t\tfor (const [rule, ruleRanges] of Object.entries(stylelintResult.disabledRanges)) {\n\t\t\tif (usedRules.has(rule)) continue;\n\n\t\t\tif (enabled === optionsMatches(options, 'except', rule)) continue;\n\n\t\t\tfor (const range of ruleRanges) {\n\t\t\t\tif (!range.strictStart && !range.strictEnd) continue;\n\n\t\t\t\t// If the comment doesn't have a location, we can't report a useful error.\n\t\t\t\t// In practice we expect all comments to have locations, though.\n\t\t\t\tif (!range.comment.source || !range.comment.source.start) continue;\n\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\ttext: `Rule \"${rule}\" isn't enabled`,\n\t\t\t\t\trule: '--report-invalid-scope-disables',\n\t\t\t\t\tline: range.comment.source.start.line,\n\t\t\t\t\tcolumn: range.comment.source.start.column,\n\t\t\t\t\tendLine: range.comment.source.end && range.comment.source.end.line,\n\t\t\t\t\tendColumn: range.comment.source.end && range.comment.source.end.column,\n\t\t\t\t\tseverity: options.severity,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n"],"mappings":"AAAA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,wBAAD,CAA9B;;AACA,MAAMC,uBAAuB,GAAGD,OAAO,CAAC,2BAAD,CAAvC;AAEA;;AAEA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,SAASC,oBAAT,CAA8BC,OAA9B,EAAuC;EACvD,KAAK,MAAMC,MAAX,IAAqBD,OAArB,EAA8B;IAC7B,MAAME,QAAQ,GAAGN,uBAAuB,CAACK,MAAM,CAACE,cAAR,EAAwB,4BAAxB,CAAxC;IAEA,IAAI,CAACD,QAAL,EAAe;IAEf,MAAM,CAACE,OAAD,EAAUC,OAAV,EAAmBC,eAAnB,IAAsCJ,QAA5C;IAEA,MAAMK,WAAW,GAAG,CAACD,eAAe,CAACE,MAAhB,IAA0B,EAA3B,EAA+BC,KAA/B,IAAwC,EAA5D;IAEA,MAAMC,SAAS,GAAG,IAAIC,GAAJ,CAAQC,MAAM,CAACC,IAAP,CAAYN,WAAZ,CAAR,CAAlB;IAEAG,SAAS,CAACI,GAAV,CAAc,KAAd;;IAEA,KAAK,MAAM,CAACC,IAAD,EAAOC,UAAP,CAAX,IAAiCJ,MAAM,CAACK,OAAP,CAAeX,eAAe,CAACY,cAA/B,CAAjC,EAAiF;MAChF,IAAIR,SAAS,CAACS,GAAV,CAAcJ,IAAd,CAAJ,EAAyB;MAEzB,IAAIX,OAAO,KAAKV,cAAc,CAACW,OAAD,EAAU,QAAV,EAAoBU,IAApB,CAA9B,EAAyD;;MAEzD,KAAK,MAAMK,KAAX,IAAoBJ,UAApB,EAAgC;QAC/B,IAAI,CAACI,KAAK,CAACC,WAAP,IAAsB,CAACD,KAAK,CAACE,SAAjC,EAA4C,SADb,CAG/B;QACA;;QACA,IAAI,CAACF,KAAK,CAACG,OAAN,CAAcC,MAAf,IAAyB,CAACJ,KAAK,CAACG,OAAN,CAAcC,MAAd,CAAqBC,KAAnD,EAA0D;QAE1DxB,MAAM,CAACyB,QAAP,CAAgBC,IAAhB,CAAqB;UACpBC,IAAI,EAAG,SAAQb,IAAK,iBADA;UAEpBA,IAAI,EAAE,iCAFc;UAGpBc,IAAI,EAAET,KAAK,CAACG,OAAN,CAAcC,MAAd,CAAqBC,KAArB,CAA2BI,IAHb;UAIpBC,MAAM,EAAEV,KAAK,CAACG,OAAN,CAAcC,MAAd,CAAqBC,KAArB,CAA2BK,MAJf;UAKpBC,OAAO,EAAEX,KAAK,CAACG,OAAN,CAAcC,MAAd,CAAqBQ,GAArB,IAA4BZ,KAAK,CAACG,OAAN,CAAcC,MAAd,CAAqBQ,GAArB,CAAyBH,IAL1C;UAMpBI,SAAS,EAAEb,KAAK,CAACG,OAAN,CAAcC,MAAd,CAAqBQ,GAArB,IAA4BZ,KAAK,CAACG,OAAN,CAAcC,MAAd,CAAqBQ,GAArB,CAAyBF,MAN5C;UAOpBI,QAAQ,EAAE7B,OAAO,CAAC6B;QAPE,CAArB;MASA;IACD;EACD;AACD,CAtCD"},"metadata":{},"sourceType":"script"}