{"ast":null,"code":"'use strict';\n\nconst optionsMatches = require('./utils/optionsMatches');\n\nconst validateDisableSettings = require('./validateDisableSettings');\n/** @typedef {import('postcss').Comment} PostcssComment */\n\n/** @typedef {import('stylelint').RangeType} RangeType */\n\n/** @typedef {import('stylelint').DisableReportRange} DisableReportRange */\n\n/** @typedef {import('stylelint').DisableOptionsReport} StylelintDisableOptionsReport */\n\n/**\n * @param {import('stylelint').LintResult[]} results\n */\n\n\nmodule.exports = function descriptionlessDisables(results) {\n  for (const result of results) {\n    const settings = validateDisableSettings(result._postcssResult, 'reportDescriptionlessDisables');\n    if (!settings) continue;\n    const [enabled, options, stylelintResult] = settings;\n    /** @type {Set<PostcssComment>} */\n\n    const alreadyReported = new Set();\n\n    for (const [rule, ruleRanges] of Object.entries(stylelintResult.disabledRanges)) {\n      for (const range of ruleRanges) {\n        if (range.description) continue;\n        if (alreadyReported.has(range.comment)) continue;\n\n        if (enabled === optionsMatches(options, 'except', rule)) {\n          // An 'all' rule will get copied for each individual rule. If the\n          // configuration is `[false, {except: ['specific-rule']}]`, we\n          // don't want to report the copies that match except, so we record\n          // the comment as already reported.\n          if (!enabled && rule === 'all') alreadyReported.add(range.comment);\n          continue;\n        }\n\n        alreadyReported.add(range.comment); // If the comment doesn't have a location, we can't report a useful error.\n        // In practice we expect all comments to have locations, though.\n\n        if (!range.comment.source || !range.comment.source.start) continue;\n        result.warnings.push({\n          text: `Disable for \"${rule}\" is missing a description`,\n          rule: '--report-descriptionless-disables',\n          line: range.comment.source.start.line,\n          column: range.comment.source.start.column,\n          endLine: range.comment.source.end && range.comment.source.end.line,\n          endColumn: range.comment.source.end && range.comment.source.end.column,\n          severity: options.severity\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["optionsMatches","require","validateDisableSettings","module","exports","descriptionlessDisables","results","result","settings","_postcssResult","enabled","options","stylelintResult","alreadyReported","Set","rule","ruleRanges","Object","entries","disabledRanges","range","description","has","comment","add","source","start","warnings","push","text","line","column","endLine","end","endColumn","severity"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/stylelint/lib/descriptionlessDisables.js"],"sourcesContent":["'use strict';\n\nconst optionsMatches = require('./utils/optionsMatches');\nconst validateDisableSettings = require('./validateDisableSettings');\n\n/** @typedef {import('postcss').Comment} PostcssComment */\n/** @typedef {import('stylelint').RangeType} RangeType */\n/** @typedef {import('stylelint').DisableReportRange} DisableReportRange */\n/** @typedef {import('stylelint').DisableOptionsReport} StylelintDisableOptionsReport */\n\n/**\n * @param {import('stylelint').LintResult[]} results\n */\nmodule.exports = function descriptionlessDisables(results) {\n\tfor (const result of results) {\n\t\tconst settings = validateDisableSettings(\n\t\t\tresult._postcssResult,\n\t\t\t'reportDescriptionlessDisables',\n\t\t);\n\n\t\tif (!settings) continue;\n\n\t\tconst [enabled, options, stylelintResult] = settings;\n\n\t\t/** @type {Set<PostcssComment>} */\n\t\tconst alreadyReported = new Set();\n\n\t\tfor (const [rule, ruleRanges] of Object.entries(stylelintResult.disabledRanges)) {\n\t\t\tfor (const range of ruleRanges) {\n\t\t\t\tif (range.description) continue;\n\n\t\t\t\tif (alreadyReported.has(range.comment)) continue;\n\n\t\t\t\tif (enabled === optionsMatches(options, 'except', rule)) {\n\t\t\t\t\t// An 'all' rule will get copied for each individual rule. If the\n\t\t\t\t\t// configuration is `[false, {except: ['specific-rule']}]`, we\n\t\t\t\t\t// don't want to report the copies that match except, so we record\n\t\t\t\t\t// the comment as already reported.\n\t\t\t\t\tif (!enabled && rule === 'all') alreadyReported.add(range.comment);\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\talreadyReported.add(range.comment);\n\n\t\t\t\t// If the comment doesn't have a location, we can't report a useful error.\n\t\t\t\t// In practice we expect all comments to have locations, though.\n\t\t\t\tif (!range.comment.source || !range.comment.source.start) continue;\n\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\ttext: `Disable for \"${rule}\" is missing a description`,\n\t\t\t\t\trule: '--report-descriptionless-disables',\n\t\t\t\t\tline: range.comment.source.start.line,\n\t\t\t\t\tcolumn: range.comment.source.start.column,\n\t\t\t\t\tendLine: range.comment.source.end && range.comment.source.end.line,\n\t\t\t\t\tendColumn: range.comment.source.end && range.comment.source.end.column,\n\t\t\t\t\tseverity: options.severity,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n"],"mappings":"AAAA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,wBAAD,CAA9B;;AACA,MAAMC,uBAAuB,GAAGD,OAAO,CAAC,2BAAD,CAAvC;AAEA;;AACA;;AACA;;AACA;;AAEA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,SAASC,uBAAT,CAAiCC,OAAjC,EAA0C;EAC1D,KAAK,MAAMC,MAAX,IAAqBD,OAArB,EAA8B;IAC7B,MAAME,QAAQ,GAAGN,uBAAuB,CACvCK,MAAM,CAACE,cADgC,EAEvC,+BAFuC,CAAxC;IAKA,IAAI,CAACD,QAAL,EAAe;IAEf,MAAM,CAACE,OAAD,EAAUC,OAAV,EAAmBC,eAAnB,IAAsCJ,QAA5C;IAEA;;IACA,MAAMK,eAAe,GAAG,IAAIC,GAAJ,EAAxB;;IAEA,KAAK,MAAM,CAACC,IAAD,EAAOC,UAAP,CAAX,IAAiCC,MAAM,CAACC,OAAP,CAAeN,eAAe,CAACO,cAA/B,CAAjC,EAAiF;MAChF,KAAK,MAAMC,KAAX,IAAoBJ,UAApB,EAAgC;QAC/B,IAAII,KAAK,CAACC,WAAV,EAAuB;QAEvB,IAAIR,eAAe,CAACS,GAAhB,CAAoBF,KAAK,CAACG,OAA1B,CAAJ,EAAwC;;QAExC,IAAIb,OAAO,KAAKV,cAAc,CAACW,OAAD,EAAU,QAAV,EAAoBI,IAApB,CAA9B,EAAyD;UACxD;UACA;UACA;UACA;UACA,IAAI,CAACL,OAAD,IAAYK,IAAI,KAAK,KAAzB,EAAgCF,eAAe,CAACW,GAAhB,CAAoBJ,KAAK,CAACG,OAA1B;UAEhC;QACA;;QAEDV,eAAe,CAACW,GAAhB,CAAoBJ,KAAK,CAACG,OAA1B,EAf+B,CAiB/B;QACA;;QACA,IAAI,CAACH,KAAK,CAACG,OAAN,CAAcE,MAAf,IAAyB,CAACL,KAAK,CAACG,OAAN,CAAcE,MAAd,CAAqBC,KAAnD,EAA0D;QAE1DnB,MAAM,CAACoB,QAAP,CAAgBC,IAAhB,CAAqB;UACpBC,IAAI,EAAG,gBAAed,IAAK,4BADP;UAEpBA,IAAI,EAAE,mCAFc;UAGpBe,IAAI,EAAEV,KAAK,CAACG,OAAN,CAAcE,MAAd,CAAqBC,KAArB,CAA2BI,IAHb;UAIpBC,MAAM,EAAEX,KAAK,CAACG,OAAN,CAAcE,MAAd,CAAqBC,KAArB,CAA2BK,MAJf;UAKpBC,OAAO,EAAEZ,KAAK,CAACG,OAAN,CAAcE,MAAd,CAAqBQ,GAArB,IAA4Bb,KAAK,CAACG,OAAN,CAAcE,MAAd,CAAqBQ,GAArB,CAAyBH,IAL1C;UAMpBI,SAAS,EAAEd,KAAK,CAACG,OAAN,CAAcE,MAAd,CAAqBQ,GAArB,IAA4Bb,KAAK,CAACG,OAAN,CAAcE,MAAd,CAAqBQ,GAArB,CAAyBF,MAN5C;UAOpBI,QAAQ,EAAExB,OAAO,CAACwB;QAPE,CAArB;MASA;IACD;EACD;AACD,CAhDD"},"metadata":{},"sourceType":"script"}