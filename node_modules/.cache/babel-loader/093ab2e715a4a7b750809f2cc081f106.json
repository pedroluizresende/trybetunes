{"ast":null,"code":"'use strict';\n\nconst validateOptions = require('./utils/validateOptions');\n\nconst {\n  isRegExp,\n  isString\n} = require('./utils/validateTypes');\n/**\n * @typedef {import('stylelint').PostcssResult} PostcssResult\n * @typedef {import('stylelint').DisableOptions} DisableOptions\n * @typedef {import('stylelint').DisablePropertyName} DisablePropertyName\n * @typedef {import('stylelint').StylelintPostcssResult} StylelintPostcssResult\n */\n\n/**\n * Validates that the stylelint config for `result` has a valid disable field\n * named `field`, and returns the result in normalized form as well as a\n * `StylelintPostcssResult` for convenience.\n *\n * Returns `null` if no disables should be reported, and automatically reports\n * an invalid configuration. If this returns non-`null`, it guarantees that\n * `result._postcssResult` is defined as well.\n *\n * @param {PostcssResult | undefined} result\n * @param {DisablePropertyName} field\n * @return {[boolean, Required<DisableOptions>, StylelintPostcssResult] | null}\n */\n\n\nmodule.exports = function (result, field) {\n  // Files with `CssSyntaxError`s don't have `_postcssResult`s.\n  if (!result) return null;\n  const stylelintResult = result.stylelint; // Files with linting errors may not have configs associated with them.\n\n  if (!stylelintResult.config) return null;\n  const rawSettings = stylelintResult.config[field];\n  /** @type {boolean} */\n\n  let enabled;\n  /** @type {DisableOptions} */\n\n  let options;\n\n  if (Array.isArray(rawSettings)) {\n    enabled = rawSettings[0];\n    options = rawSettings[1] || {};\n  } else {\n    enabled = rawSettings || false;\n    options = {};\n  }\n\n  const validOptions = validateOptions(result, field, {\n    actual: enabled,\n    possible: [true, false]\n  }, {\n    actual: options,\n    possible: {\n      except: [isString, isRegExp]\n    }\n  });\n  if (!validOptions) return null; // If the check is disabled with no exceptions, there's no reason to run\n  // it at all.\n\n  if (!enabled && !options.except) return null;\n  return [enabled, {\n    except: options.except || [],\n    severity: options.severity || stylelintResult.config.defaultSeverity || 'error'\n  }, stylelintResult];\n};","map":{"version":3,"names":["validateOptions","require","isRegExp","isString","module","exports","result","field","stylelintResult","stylelint","config","rawSettings","enabled","options","Array","isArray","validOptions","actual","possible","except","severity","defaultSeverity"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/stylelint/lib/validateDisableSettings.js"],"sourcesContent":["'use strict';\n\nconst validateOptions = require('./utils/validateOptions');\nconst { isRegExp, isString } = require('./utils/validateTypes');\n\n/**\n * @typedef {import('stylelint').PostcssResult} PostcssResult\n * @typedef {import('stylelint').DisableOptions} DisableOptions\n * @typedef {import('stylelint').DisablePropertyName} DisablePropertyName\n * @typedef {import('stylelint').StylelintPostcssResult} StylelintPostcssResult\n */\n\n/**\n * Validates that the stylelint config for `result` has a valid disable field\n * named `field`, and returns the result in normalized form as well as a\n * `StylelintPostcssResult` for convenience.\n *\n * Returns `null` if no disables should be reported, and automatically reports\n * an invalid configuration. If this returns non-`null`, it guarantees that\n * `result._postcssResult` is defined as well.\n *\n * @param {PostcssResult | undefined} result\n * @param {DisablePropertyName} field\n * @return {[boolean, Required<DisableOptions>, StylelintPostcssResult] | null}\n */\nmodule.exports = function (result, field) {\n\t// Files with `CssSyntaxError`s don't have `_postcssResult`s.\n\tif (!result) return null;\n\n\tconst stylelintResult = result.stylelint;\n\n\t// Files with linting errors may not have configs associated with them.\n\tif (!stylelintResult.config) return null;\n\n\tconst rawSettings = stylelintResult.config[field];\n\n\t/** @type {boolean} */\n\tlet enabled;\n\t/** @type {DisableOptions} */\n\tlet options;\n\n\tif (Array.isArray(rawSettings)) {\n\t\tenabled = rawSettings[0];\n\t\toptions = rawSettings[1] || {};\n\t} else {\n\t\tenabled = rawSettings || false;\n\t\toptions = {};\n\t}\n\n\tconst validOptions = validateOptions(\n\t\tresult,\n\t\tfield,\n\t\t{\n\t\t\tactual: enabled,\n\t\t\tpossible: [true, false],\n\t\t},\n\t\t{\n\t\t\tactual: options,\n\t\t\tpossible: {\n\t\t\t\texcept: [isString, isRegExp],\n\t\t\t},\n\t\t},\n\t);\n\n\tif (!validOptions) return null;\n\n\t// If the check is disabled with no exceptions, there's no reason to run\n\t// it at all.\n\tif (!enabled && !options.except) return null;\n\n\treturn [\n\t\tenabled,\n\t\t{\n\t\t\texcept: options.except || [],\n\t\t\tseverity: options.severity || stylelintResult.config.defaultSeverity || 'error',\n\t\t},\n\t\tstylelintResult,\n\t];\n};\n"],"mappings":"AAAA;;AAEA,MAAMA,eAAe,GAAGC,OAAO,CAAC,yBAAD,CAA/B;;AACA,MAAM;EAAEC,QAAF;EAAYC;AAAZ,IAAyBF,OAAO,CAAC,uBAAD,CAAtC;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAiB,UAAUC,MAAV,EAAkBC,KAAlB,EAAyB;EACzC;EACA,IAAI,CAACD,MAAL,EAAa,OAAO,IAAP;EAEb,MAAME,eAAe,GAAGF,MAAM,CAACG,SAA/B,CAJyC,CAMzC;;EACA,IAAI,CAACD,eAAe,CAACE,MAArB,EAA6B,OAAO,IAAP;EAE7B,MAAMC,WAAW,GAAGH,eAAe,CAACE,MAAhB,CAAuBH,KAAvB,CAApB;EAEA;;EACA,IAAIK,OAAJ;EACA;;EACA,IAAIC,OAAJ;;EAEA,IAAIC,KAAK,CAACC,OAAN,CAAcJ,WAAd,CAAJ,EAAgC;IAC/BC,OAAO,GAAGD,WAAW,CAAC,CAAD,CAArB;IACAE,OAAO,GAAGF,WAAW,CAAC,CAAD,CAAX,IAAkB,EAA5B;EACA,CAHD,MAGO;IACNC,OAAO,GAAGD,WAAW,IAAI,KAAzB;IACAE,OAAO,GAAG,EAAV;EACA;;EAED,MAAMG,YAAY,GAAGhB,eAAe,CACnCM,MADmC,EAEnCC,KAFmC,EAGnC;IACCU,MAAM,EAAEL,OADT;IAECM,QAAQ,EAAE,CAAC,IAAD,EAAO,KAAP;EAFX,CAHmC,EAOnC;IACCD,MAAM,EAAEJ,OADT;IAECK,QAAQ,EAAE;MACTC,MAAM,EAAE,CAAChB,QAAD,EAAWD,QAAX;IADC;EAFX,CAPmC,CAApC;EAeA,IAAI,CAACc,YAAL,EAAmB,OAAO,IAAP,CAvCsB,CAyCzC;EACA;;EACA,IAAI,CAACJ,OAAD,IAAY,CAACC,OAAO,CAACM,MAAzB,EAAiC,OAAO,IAAP;EAEjC,OAAO,CACNP,OADM,EAEN;IACCO,MAAM,EAAEN,OAAO,CAACM,MAAR,IAAkB,EAD3B;IAECC,QAAQ,EAAEP,OAAO,CAACO,QAAR,IAAoBZ,eAAe,CAACE,MAAhB,CAAuBW,eAA3C,IAA8D;EAFzE,CAFM,EAMNb,eANM,CAAP;AAQA,CArDD"},"metadata":{},"sourceType":"script"}