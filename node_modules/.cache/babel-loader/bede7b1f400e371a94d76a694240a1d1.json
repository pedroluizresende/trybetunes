{"ast":null,"code":"'use strict';\n\nconst LazyResult = require('postcss/lib/lazy-result').default;\n\nconst path = require('path');\n\nconst {\n  default: postcss\n} = require('postcss');\n\nconst {\n  promises: fs\n} = require('fs');\n/** @typedef {import('postcss').Result} Result */\n\n/** @typedef {import('postcss').Syntax} Syntax */\n\n/** @typedef {import('stylelint').CustomSyntax} CustomSyntax */\n\n/** @typedef {import('stylelint').GetPostcssOptions} GetPostcssOptions */\n\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n\n\nconst postcssProcessor = postcss();\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {GetPostcssOptions} options\n *\n * @returns {Promise<Result>}\n */\n\nmodule.exports = async function getPostcssResult(stylelint) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const cached = options.filePath ? stylelint._postcssResultCache.get(options.filePath) : undefined;\n\n  if (cached) {\n    return cached;\n  }\n\n  if (stylelint._options.syntax) {\n    let error = 'The \"syntax\" option is no longer available. ';\n    error += stylelint._options.syntax === 'css' ? 'You can remove the \"--syntax\" CLI flag as stylelint will now parse files as CSS by default' : `You should install an appropriate syntax, e.g. postcss-scss, and use the \"customSyntax\" option`;\n    return Promise.reject(new Error(error));\n  }\n\n  const syntax = options.customSyntax ? getCustomSyntax(options.customSyntax) : cssSyntax(stylelint, options.filePath);\n  const postcssOptions = {\n    from: options.filePath,\n    syntax\n  };\n  /** @type {string | undefined} */\n\n  let getCode;\n\n  if (options.code !== undefined) {\n    getCode = options.code;\n  } else if (options.filePath) {\n    getCode = await fs.readFile(options.filePath, 'utf8');\n  }\n\n  if (getCode === undefined) {\n    return Promise.reject(new Error('code or filePath required'));\n  }\n\n  if (options.codeProcessors && options.codeProcessors.length) {\n    if (stylelint._options.fix) {\n      console.warn('Autofix is incompatible with processors and will be disabled. Are you sure you need a processor?');\n      stylelint._options.fix = false;\n    }\n\n    const sourceName = options.code ? options.codeFilename : options.filePath;\n\n    for (const codeProcessor of options.codeProcessors) {\n      getCode = codeProcessor(getCode, sourceName);\n    }\n  }\n\n  const postcssResult = await new LazyResult(postcssProcessor, getCode, postcssOptions);\n\n  if (options.filePath) {\n    stylelint._postcssResultCache.set(options.filePath, postcssResult);\n  }\n\n  return postcssResult;\n};\n/**\n * @param {CustomSyntax} customSyntax\n * @returns {Syntax}\n */\n\n\nfunction getCustomSyntax(customSyntax) {\n  let resolved;\n\n  if (typeof customSyntax === 'string') {\n    try {\n      resolved = require(customSyntax);\n    } catch (error) {\n      if (error && typeof error === 'object' && // @ts-expect-error -- TS2571: Object is of type 'unknown'.\n      error.code === 'MODULE_NOT_FOUND' && // @ts-expect-error -- TS2571: Object is of type 'unknown'.\n      error.message.includes(customSyntax)) {\n        throw new Error(`Cannot resolve custom syntax module \"${customSyntax}\". Check that module \"${customSyntax}\" is available and spelled correctly.\\n\\nCaused by: ${error}`);\n      }\n\n      throw error;\n    }\n    /*\n     * PostCSS allows for syntaxes that only contain a parser, however,\n     * it then expects the syntax to be set as the `parse` option.\n     */\n\n\n    if (!resolved.parse) {\n      resolved = {\n        parse: resolved,\n        stringify: postcss.stringify\n      };\n    }\n\n    return resolved;\n  }\n\n  if (typeof customSyntax === 'object') {\n    if (typeof customSyntax.parse === 'function') {\n      resolved = { ...customSyntax\n      };\n    } else {\n      throw new TypeError(`An object provided to the \"customSyntax\" option must have a \"parse\" property. Ensure the \"parse\" property exists and its value is a function.`);\n    }\n\n    return resolved;\n  }\n\n  throw new Error(`Custom syntax must be a string or a Syntax object`);\n}\n/** @type {{ [key: string]: string }} */\n\n\nconst previouslyInferredExtensions = {\n  html: 'postcss-html',\n  js: '@stylelint/postcss-css-in-js',\n  jsx: '@stylelint/postcss-css-in-js',\n  less: 'postcss-less',\n  md: 'postcss-markdown',\n  sass: 'postcss-sass',\n  sss: 'sugarss',\n  scss: 'postcss-scss',\n  svelte: 'postcss-html',\n  ts: '@stylelint/postcss-css-in-js',\n  tsx: '@stylelint/postcss-css-in-js',\n  vue: 'postcss-html',\n  xml: 'postcss-html',\n  xst: 'postcss-html'\n};\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {string|undefined} filePath\n * @returns {Syntax}\n */\n\nfunction cssSyntax(stylelint, filePath) {\n  const fileExtension = filePath ? path.extname(filePath).slice(1).toLowerCase() : '';\n  const extensions = ['css', 'pcss', 'postcss'];\n\n  if (previouslyInferredExtensions[fileExtension]) {\n    console.warn(`${filePath}: When linting something other than CSS, you should install an appropriate syntax, e.g. \"${previouslyInferredExtensions[fileExtension]}\", and use the \"customSyntax\" option`);\n  }\n\n  return {\n    parse: stylelint._options.fix && extensions.includes(fileExtension) ? require('postcss-safe-parser') : postcss.parse,\n    stringify: postcss.stringify\n  };\n}","map":{"version":3,"names":["LazyResult","require","default","path","postcss","promises","fs","postcssProcessor","module","exports","getPostcssResult","stylelint","options","cached","filePath","_postcssResultCache","get","undefined","_options","syntax","error","Promise","reject","Error","customSyntax","getCustomSyntax","cssSyntax","postcssOptions","from","getCode","code","readFile","codeProcessors","length","fix","console","warn","sourceName","codeFilename","codeProcessor","postcssResult","set","resolved","message","includes","parse","stringify","TypeError","previouslyInferredExtensions","html","js","jsx","less","md","sass","sss","scss","svelte","ts","tsx","vue","xml","xst","fileExtension","extname","slice","toLowerCase","extensions"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/stylelint/lib/getPostcssResult.js"],"sourcesContent":["'use strict';\n\nconst LazyResult = require('postcss/lib/lazy-result').default;\nconst path = require('path');\nconst { default: postcss } = require('postcss');\nconst { promises: fs } = require('fs');\n\n/** @typedef {import('postcss').Result} Result */\n/** @typedef {import('postcss').Syntax} Syntax */\n/** @typedef {import('stylelint').CustomSyntax} CustomSyntax */\n/** @typedef {import('stylelint').GetPostcssOptions} GetPostcssOptions */\n/** @typedef {import('stylelint').InternalApi} StylelintInternalApi */\n\nconst postcssProcessor = postcss();\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {GetPostcssOptions} options\n *\n * @returns {Promise<Result>}\n */\nmodule.exports = async function getPostcssResult(stylelint, options = {}) {\n\tconst cached = options.filePath ? stylelint._postcssResultCache.get(options.filePath) : undefined;\n\n\tif (cached) {\n\t\treturn cached;\n\t}\n\n\tif (stylelint._options.syntax) {\n\t\tlet error = 'The \"syntax\" option is no longer available. ';\n\n\t\terror +=\n\t\t\tstylelint._options.syntax === 'css'\n\t\t\t\t? 'You can remove the \"--syntax\" CLI flag as stylelint will now parse files as CSS by default'\n\t\t\t\t: `You should install an appropriate syntax, e.g. postcss-scss, and use the \"customSyntax\" option`;\n\n\t\treturn Promise.reject(new Error(error));\n\t}\n\n\tconst syntax = options.customSyntax\n\t\t? getCustomSyntax(options.customSyntax)\n\t\t: cssSyntax(stylelint, options.filePath);\n\n\tconst postcssOptions = {\n\t\tfrom: options.filePath,\n\t\tsyntax,\n\t};\n\n\t/** @type {string | undefined} */\n\tlet getCode;\n\n\tif (options.code !== undefined) {\n\t\tgetCode = options.code;\n\t} else if (options.filePath) {\n\t\tgetCode = await fs.readFile(options.filePath, 'utf8');\n\t}\n\n\tif (getCode === undefined) {\n\t\treturn Promise.reject(new Error('code or filePath required'));\n\t}\n\n\tif (options.codeProcessors && options.codeProcessors.length) {\n\t\tif (stylelint._options.fix) {\n\t\t\tconsole.warn(\n\t\t\t\t'Autofix is incompatible with processors and will be disabled. Are you sure you need a processor?',\n\t\t\t);\n\t\t\tstylelint._options.fix = false;\n\t\t}\n\n\t\tconst sourceName = options.code ? options.codeFilename : options.filePath;\n\n\t\tfor (const codeProcessor of options.codeProcessors) {\n\t\t\tgetCode = codeProcessor(getCode, sourceName);\n\t\t}\n\t}\n\n\tconst postcssResult = await new LazyResult(postcssProcessor, getCode, postcssOptions);\n\n\tif (options.filePath) {\n\t\tstylelint._postcssResultCache.set(options.filePath, postcssResult);\n\t}\n\n\treturn postcssResult;\n};\n\n/**\n * @param {CustomSyntax} customSyntax\n * @returns {Syntax}\n */\nfunction getCustomSyntax(customSyntax) {\n\tlet resolved;\n\n\tif (typeof customSyntax === 'string') {\n\t\ttry {\n\t\t\tresolved = require(customSyntax);\n\t\t} catch (error) {\n\t\t\tif (\n\t\t\t\terror &&\n\t\t\t\ttypeof error === 'object' &&\n\t\t\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\t\t\terror.code === 'MODULE_NOT_FOUND' &&\n\t\t\t\t// @ts-expect-error -- TS2571: Object is of type 'unknown'.\n\t\t\t\terror.message.includes(customSyntax)\n\t\t\t) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Cannot resolve custom syntax module \"${customSyntax}\". Check that module \"${customSyntax}\" is available and spelled correctly.\\n\\nCaused by: ${error}`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\n\t\t/*\n\t\t * PostCSS allows for syntaxes that only contain a parser, however,\n\t\t * it then expects the syntax to be set as the `parse` option.\n\t\t */\n\t\tif (!resolved.parse) {\n\t\t\tresolved = {\n\t\t\t\tparse: resolved,\n\t\t\t\tstringify: postcss.stringify,\n\t\t\t};\n\t\t}\n\n\t\treturn resolved;\n\t}\n\n\tif (typeof customSyntax === 'object') {\n\t\tif (typeof customSyntax.parse === 'function') {\n\t\t\tresolved = { ...customSyntax };\n\t\t} else {\n\t\t\tthrow new TypeError(\n\t\t\t\t`An object provided to the \"customSyntax\" option must have a \"parse\" property. Ensure the \"parse\" property exists and its value is a function.`,\n\t\t\t);\n\t\t}\n\n\t\treturn resolved;\n\t}\n\n\tthrow new Error(`Custom syntax must be a string or a Syntax object`);\n}\n\n/** @type {{ [key: string]: string }} */\nconst previouslyInferredExtensions = {\n\thtml: 'postcss-html',\n\tjs: '@stylelint/postcss-css-in-js',\n\tjsx: '@stylelint/postcss-css-in-js',\n\tless: 'postcss-less',\n\tmd: 'postcss-markdown',\n\tsass: 'postcss-sass',\n\tsss: 'sugarss',\n\tscss: 'postcss-scss',\n\tsvelte: 'postcss-html',\n\tts: '@stylelint/postcss-css-in-js',\n\ttsx: '@stylelint/postcss-css-in-js',\n\tvue: 'postcss-html',\n\txml: 'postcss-html',\n\txst: 'postcss-html',\n};\n\n/**\n * @param {StylelintInternalApi} stylelint\n * @param {string|undefined} filePath\n * @returns {Syntax}\n */\nfunction cssSyntax(stylelint, filePath) {\n\tconst fileExtension = filePath ? path.extname(filePath).slice(1).toLowerCase() : '';\n\tconst extensions = ['css', 'pcss', 'postcss'];\n\n\tif (previouslyInferredExtensions[fileExtension]) {\n\t\tconsole.warn(\n\t\t\t`${filePath}: When linting something other than CSS, you should install an appropriate syntax, e.g. \"${previouslyInferredExtensions[fileExtension]}\", and use the \"customSyntax\" option`,\n\t\t);\n\t}\n\n\treturn {\n\t\tparse:\n\t\t\tstylelint._options.fix && extensions.includes(fileExtension)\n\t\t\t\t? require('postcss-safe-parser')\n\t\t\t\t: postcss.parse,\n\t\tstringify: postcss.stringify,\n\t};\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}