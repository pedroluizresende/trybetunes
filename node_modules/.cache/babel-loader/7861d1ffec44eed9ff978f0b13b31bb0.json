{"ast":null,"code":"'use strict';\n\nconst optionsMatches = require('./utils/optionsMatches');\n\nconst putIfAbsent = require('./utils/putIfAbsent');\n\nconst validateDisableSettings = require('./validateDisableSettings');\n/** @typedef {import('postcss').Comment} PostcssComment */\n\n/** @typedef {import('stylelint').DisabledRange} DisabledRange */\n\n/** @typedef {import('stylelint').RangeType} RangeType */\n\n/** @typedef {import('stylelint').DisableReportRange} DisableReportRange */\n\n/**\n * @param {import('stylelint').LintResult[]} results\n */\n\n\nmodule.exports = function needlessDisables(results) {\n  for (const result of results) {\n    const settings = validateDisableSettings(result._postcssResult, 'reportNeedlessDisables');\n    if (!settings) continue;\n    const [enabled, options, stylelintResult] = settings;\n    const rangeData = stylelintResult.disabledRanges;\n    if (!rangeData) continue;\n    const disabledWarnings = stylelintResult.disabledWarnings || []; // A map from `stylelint-disable` comments to the set of rules that\n    // are usefully disabled by each comment. We track this\n    // comment-by-comment rather than range-by-range because ranges that\n    // disable *all* rules are duplicated for each rule they apply to in\n    // practice.\n\n    /** @type {Map<PostcssComment, Set<string>>}} */\n\n    const usefulDisables = new Map();\n\n    for (const warning of disabledWarnings) {\n      const rule = warning.rule;\n      const ruleRanges = rangeData[rule];\n\n      if (ruleRanges) {\n        for (const range of ruleRanges) {\n          if (isWarningInRange(warning, range)) {\n            putIfAbsent(usefulDisables, range.comment, () => new Set()).add(rule);\n          }\n        }\n      }\n\n      for (const range of rangeData.all || []) {\n        if (isWarningInRange(warning, range)) {\n          putIfAbsent(usefulDisables, range.comment, () => new Set()).add(rule);\n        }\n      }\n    }\n\n    const allRangeComments = new Set((rangeData.all || []).map(range => range.comment));\n\n    for (const [rule, ranges] of Object.entries(rangeData)) {\n      for (const range of ranges) {\n        if (rule !== 'all' && allRangeComments.has(range.comment)) continue;\n        if (enabled === optionsMatches(options, 'except', rule)) continue;\n        const useful = usefulDisables.get(range.comment) || new Set(); // Only emit a warning if this range's comment isn't useful for this rule.\n        // For the special rule \"all\", only emit a warning if it's not useful for\n        // *any* rules, because it covers all of them.\n\n        if (rule === 'all' ? useful.size !== 0 : useful.has(rule)) continue; // If the comment doesn't have a location, we can't report a useful error.\n        // In practice we expect all comments to have locations, though.\n\n        if (!range.comment.source || !range.comment.source.start) continue;\n        result.warnings.push({\n          text: `Needless disable for \"${rule}\"`,\n          rule: '--report-needless-disables',\n          line: range.comment.source.start.line,\n          column: range.comment.source.start.column,\n          endLine: range.comment.source.end && range.comment.source.end.line,\n          endColumn: range.comment.source.end && range.comment.source.end.column,\n          severity: options.severity\n        });\n      }\n    }\n  }\n};\n/**\n * @param {import('stylelint').DisabledWarning} warning\n * @param {RangeType} range\n * @return {boolean}\n */\n\n\nfunction isWarningInRange(warning, range) {\n  const line = warning.line; // Need to check if range.end exist, because line number type cannot be compared to undefined\n\n  return range.start <= line && (range.end !== undefined && range.end >= line || range.end === undefined);\n}","map":{"version":3,"names":["optionsMatches","require","putIfAbsent","validateDisableSettings","module","exports","needlessDisables","results","result","settings","_postcssResult","enabled","options","stylelintResult","rangeData","disabledRanges","disabledWarnings","usefulDisables","Map","warning","rule","ruleRanges","range","isWarningInRange","comment","Set","add","all","allRangeComments","map","ranges","Object","entries","has","useful","get","size","source","start","warnings","push","text","line","column","endLine","end","endColumn","severity","undefined"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/stylelint/lib/needlessDisables.js"],"sourcesContent":["'use strict';\n\nconst optionsMatches = require('./utils/optionsMatches');\nconst putIfAbsent = require('./utils/putIfAbsent');\nconst validateDisableSettings = require('./validateDisableSettings');\n\n/** @typedef {import('postcss').Comment} PostcssComment */\n/** @typedef {import('stylelint').DisabledRange} DisabledRange */\n/** @typedef {import('stylelint').RangeType} RangeType */\n/** @typedef {import('stylelint').DisableReportRange} DisableReportRange */\n\n/**\n * @param {import('stylelint').LintResult[]} results\n */\nmodule.exports = function needlessDisables(results) {\n\tfor (const result of results) {\n\t\tconst settings = validateDisableSettings(result._postcssResult, 'reportNeedlessDisables');\n\n\t\tif (!settings) continue;\n\n\t\tconst [enabled, options, stylelintResult] = settings;\n\n\t\tconst rangeData = stylelintResult.disabledRanges;\n\n\t\tif (!rangeData) continue;\n\n\t\tconst disabledWarnings = stylelintResult.disabledWarnings || [];\n\n\t\t// A map from `stylelint-disable` comments to the set of rules that\n\t\t// are usefully disabled by each comment. We track this\n\t\t// comment-by-comment rather than range-by-range because ranges that\n\t\t// disable *all* rules are duplicated for each rule they apply to in\n\t\t// practice.\n\t\t/** @type {Map<PostcssComment, Set<string>>}} */\n\t\tconst usefulDisables = new Map();\n\n\t\tfor (const warning of disabledWarnings) {\n\t\t\tconst rule = warning.rule;\n\t\t\tconst ruleRanges = rangeData[rule];\n\n\t\t\tif (ruleRanges) {\n\t\t\t\tfor (const range of ruleRanges) {\n\t\t\t\t\tif (isWarningInRange(warning, range)) {\n\t\t\t\t\t\tputIfAbsent(usefulDisables, range.comment, () => new Set()).add(rule);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const range of rangeData.all || []) {\n\t\t\t\tif (isWarningInRange(warning, range)) {\n\t\t\t\t\tputIfAbsent(usefulDisables, range.comment, () => new Set()).add(rule);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst allRangeComments = new Set((rangeData.all || []).map((range) => range.comment));\n\n\t\tfor (const [rule, ranges] of Object.entries(rangeData)) {\n\t\t\tfor (const range of ranges) {\n\t\t\t\tif (rule !== 'all' && allRangeComments.has(range.comment)) continue;\n\n\t\t\t\tif (enabled === optionsMatches(options, 'except', rule)) continue;\n\n\t\t\t\tconst useful = usefulDisables.get(range.comment) || new Set();\n\n\t\t\t\t// Only emit a warning if this range's comment isn't useful for this rule.\n\t\t\t\t// For the special rule \"all\", only emit a warning if it's not useful for\n\t\t\t\t// *any* rules, because it covers all of them.\n\t\t\t\tif (rule === 'all' ? useful.size !== 0 : useful.has(rule)) continue;\n\n\t\t\t\t// If the comment doesn't have a location, we can't report a useful error.\n\t\t\t\t// In practice we expect all comments to have locations, though.\n\t\t\t\tif (!range.comment.source || !range.comment.source.start) continue;\n\n\t\t\t\tresult.warnings.push({\n\t\t\t\t\ttext: `Needless disable for \"${rule}\"`,\n\t\t\t\t\trule: '--report-needless-disables',\n\t\t\t\t\tline: range.comment.source.start.line,\n\t\t\t\t\tcolumn: range.comment.source.start.column,\n\t\t\t\t\tendLine: range.comment.source.end && range.comment.source.end.line,\n\t\t\t\t\tendColumn: range.comment.source.end && range.comment.source.end.column,\n\t\t\t\t\tseverity: options.severity,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * @param {import('stylelint').DisabledWarning} warning\n * @param {RangeType} range\n * @return {boolean}\n */\nfunction isWarningInRange(warning, range) {\n\tconst line = warning.line;\n\n\t// Need to check if range.end exist, because line number type cannot be compared to undefined\n\treturn (\n\t\trange.start <= line &&\n\t\t((range.end !== undefined && range.end >= line) || range.end === undefined)\n\t);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}