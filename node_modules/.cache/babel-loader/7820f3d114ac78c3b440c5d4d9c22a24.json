{"ast":null,"code":"'use strict';\n\nconst createPartialStylelintResult = require('./createPartialStylelintResult');\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n\n/**\n * @param {import('stylelint').InternalApi} stylelint\n * @param {PostcssResult} [postcssResult]\n * @param {string} [filePath]\n * @param {import('stylelint').CssSyntaxError} [cssSyntaxError]\n * @return {Promise<StylelintResult>}\n */\n\n\nmodule.exports = async function createStylelintResult(stylelint, postcssResult, filePath, cssSyntaxError) {\n  let stylelintResult = createPartialStylelintResult(postcssResult, cssSyntaxError);\n  const configForFile = await stylelint.getConfigForFile(filePath, filePath);\n  const config = configForFile === null ? {} : configForFile.config;\n  const file = stylelintResult.source || cssSyntaxError && cssSyntaxError.file;\n\n  if (config.resultProcessors) {\n    for (const resultProcessor of config.resultProcessors) {\n      // Result processors might just mutate the result object,\n      // or might return a new one\n      const returned = resultProcessor(stylelintResult, file);\n\n      if (returned) {\n        stylelintResult = returned;\n      }\n    }\n  }\n\n  return stylelintResult;\n};","map":{"version":3,"names":["createPartialStylelintResult","require","module","exports","createStylelintResult","stylelint","postcssResult","filePath","cssSyntaxError","stylelintResult","configForFile","getConfigForFile","config","file","source","resultProcessors","resultProcessor","returned"],"sources":["/home/pedroresende/projetos/trybe/frontend/sd-026-b-project-trybetunes/node_modules/stylelint/lib/createStylelintResult.js"],"sourcesContent":["'use strict';\n\nconst createPartialStylelintResult = require('./createPartialStylelintResult');\n\n/** @typedef {import('stylelint').PostcssResult} PostcssResult */\n/** @typedef {import('stylelint').LintResult} StylelintResult */\n\n/**\n * @param {import('stylelint').InternalApi} stylelint\n * @param {PostcssResult} [postcssResult]\n * @param {string} [filePath]\n * @param {import('stylelint').CssSyntaxError} [cssSyntaxError]\n * @return {Promise<StylelintResult>}\n */\nmodule.exports = async function createStylelintResult(\n\tstylelint,\n\tpostcssResult,\n\tfilePath,\n\tcssSyntaxError,\n) {\n\tlet stylelintResult = createPartialStylelintResult(postcssResult, cssSyntaxError);\n\n\tconst configForFile = await stylelint.getConfigForFile(filePath, filePath);\n\n\tconst config = configForFile === null ? {} : configForFile.config;\n\tconst file = stylelintResult.source || (cssSyntaxError && cssSyntaxError.file);\n\n\tif (config.resultProcessors) {\n\t\tfor (const resultProcessor of config.resultProcessors) {\n\t\t\t// Result processors might just mutate the result object,\n\t\t\t// or might return a new one\n\t\t\tconst returned = resultProcessor(stylelintResult, file);\n\n\t\t\tif (returned) {\n\t\t\t\tstylelintResult = returned;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn stylelintResult;\n};\n"],"mappings":"AAAA;;AAEA,MAAMA,4BAA4B,GAAGC,OAAO,CAAC,gCAAD,CAA5C;AAEA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,eAAeC,qBAAf,CAChBC,SADgB,EAEhBC,aAFgB,EAGhBC,QAHgB,EAIhBC,cAJgB,EAKf;EACD,IAAIC,eAAe,GAAGT,4BAA4B,CAACM,aAAD,EAAgBE,cAAhB,CAAlD;EAEA,MAAME,aAAa,GAAG,MAAML,SAAS,CAACM,gBAAV,CAA2BJ,QAA3B,EAAqCA,QAArC,CAA5B;EAEA,MAAMK,MAAM,GAAGF,aAAa,KAAK,IAAlB,GAAyB,EAAzB,GAA8BA,aAAa,CAACE,MAA3D;EACA,MAAMC,IAAI,GAAGJ,eAAe,CAACK,MAAhB,IAA2BN,cAAc,IAAIA,cAAc,CAACK,IAAzE;;EAEA,IAAID,MAAM,CAACG,gBAAX,EAA6B;IAC5B,KAAK,MAAMC,eAAX,IAA8BJ,MAAM,CAACG,gBAArC,EAAuD;MACtD;MACA;MACA,MAAME,QAAQ,GAAGD,eAAe,CAACP,eAAD,EAAkBI,IAAlB,CAAhC;;MAEA,IAAII,QAAJ,EAAc;QACbR,eAAe,GAAGQ,QAAlB;MACA;IACD;EACD;;EAED,OAAOR,eAAP;AACA,CA1BD"},"metadata":{},"sourceType":"script"}